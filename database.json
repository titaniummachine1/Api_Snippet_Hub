{
    "tables": [
        {
            "Title": "Menu Checkbox",
            "subTitle": "example checkbox snippet",
            "dLine": {
                "1": "mEnable can be replaced with any variable as we are defining here variable",
                "2": "that we get with :GetValue() in code",
                "4": "(\"Enable\", true) has string with title of checkbox and true represents",
                "5": "Default Value"
            },
            "SLine": {
                "1": "local mEnable       = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            }
        },
        {
            "Title": "Get Screen Size",
            "subTitle": "sets w nd h values",
            "dLine": {
                "1": "literaly sets screen_w and screen_h"
            },
            "SLine": {
                "1": "local screen_w, screen_h = client.GetScreenSize()"
            }
        },
        {
            "Title": "menu lib setup",
            "subTitle": "initialize menu",
            "dLine": {
                "1": "checks if you got menu.lua installed and if so it will load it and create menu"
            },
            "SLine": {
                "1": "local menuLoaded, MenuLib = pcall(require, \"Menu\")                                -- Load MenuLib",
                "2": "assert(menuLoaded, \"MenuLib not found, please install it!\")                       -- If not found, throw error",
                "3": "assert(MenuLib.Version >= 1.44, \"MenuLib version is too old, please update it!\")  -- If version is too old, throw error",
                "5": "--[[ Menu ]]--",
                "6": "local menu = MenuLib.Create(\"Examplename\", MenuFlags.AutoSize)",
                "7": "menu.Style.TitleBg = { 205, 95, 50, 255 } -- Title Background Color (Flame Pea)",
                "8": "menu.Style.Outline = true                 -- Outline around the menu"
            }
        },
        {
            "Title": "menu slider",
            "subTitle": "example slider",
            "dLine": {
                "1": "sets local value to variable set in menu usign slider with first valeu beeing min second max and third default on load."
            },
            "SLine": {
                "1": "local mtime         = menu:AddComponent(MenuLib.Slider(\"attack distance\", 200 ,275 , 240 ))"
            }
        },
        {
            "Title": "Local libloaded, lnxlib = pcall",
            "subTitle": "",
            "dLine": {
                "5": "local libLoaded, lnxLib = pcall(require, \"lnxLib\")"
            },
            "SLine": {
                "1": "local libLoaded, lnxLib = pcall(require, \"lnxLib\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "6": "assert(libLoaded, \"lnxLib not found, please install it!\")"
            },
            "SLine": {
                "1": "assert(libLoaded, \"lnxLib not found, please install it!\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "7": "assert(lnxLib.GetVersion() >= 0.967, \"LNXlib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(lnxLib.GetVersion() >= 0.967, \"LNXlib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Local menuloaded, menulib = pcall",
            "subTitle": "",
            "dLine": {
                "8": "local menuLoaded, MenuLib = pcall(require, \"Menu\")"
            },
            "SLine": {
                "1": "local menuLoaded, MenuLib = pcall(require, \"Menu\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "9": "assert(menuLoaded, \"MenuLib not found, please install it!\")"
            },
            "SLine": {
                "1": "assert(menuLoaded, \"MenuLib not found, please install it!\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "10": "assert(MenuLib.Version >= 1.44, \"MenuLib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(MenuLib.Version >= 1.44, \"MenuLib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "11": "local menu = MenuLib.Create(\"Projectile aimbot\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Projectile aimbot\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local maimbot       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "14": "local mAimbot       = menu:AddComponent(MenuLib.Checkbox(\"Aimbot\", true))"
            },
            "SLine": {
                "1": "local mAimbot       = menu:AddComponent(MenuLib.Checkbox(\"Aimbot\", true))"
            }
        },
        {
            "Title": "Local msilent       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "15": "local mSilent       = menu:AddComponent(MenuLib.Checkbox(\"Silent\", true))"
            },
            "SLine": {
                "1": "local mSilent       = menu:AddComponent(MenuLib.Checkbox(\"Silent\", true))"
            }
        },
        {
            "Title": "Local mautoshoot    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "16": "local mAutoshoot    = menu:AddComponent(MenuLib.Checkbox(\"AutoShoot\", true))"
            },
            "SLine": {
                "1": "local mAutoshoot    = menu:AddComponent(MenuLib.Checkbox(\"AutoShoot\", true))"
            }
        },
        {
            "Title": "Local mtime         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "17": "local mtime         = menu:AddComponent(MenuLib.Slider(\"time\", 1 ,50, 2 ))"
            },
            "SLine": {
                "1": "local mtime         = menu:AddComponent(MenuLib.Slider(\"time\", 1 ,50, 2 ))"
            }
        },
        {
            "Title": "Local mmvisuals     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "18": "local mmVisuals     = menu:AddComponent(MenuLib.Checkbox(\"fov Circle\", false))"
            },
            "SLine": {
                "1": "local mmVisuals     = menu:AddComponent(MenuLib.Checkbox(\"fov Circle\", false))"
            }
        },
        {
            "Title": "Local mfov          = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "19": "local mFov          = menu:AddComponent(MenuLib.Slider(\"fov\", 1 ,360, 360 ))"
            },
            "SLine": {
                "1": "local mFov          = menu:AddComponent(MenuLib.Slider(\"fov\", 1 ,360, 360 ))"
            }
        },
        {
            "Title": "Local mkey          = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "20": "local mKey          = menu:AddComponent(MenuLib.Keybind(\"LAimbot Key\", key))"
            },
            "SLine": {
                "1": "local mKey          = menu:AddComponent(MenuLib.Keybind(\"LAimbot Key\", key))"
            }
        },
        {
            "Title": "Local mdelay        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "21": "local mdelay        = menu:AddComponent(MenuLib.Slider(\"dt delay\", 1 ,24, 20 ))"
            },
            "SLine": {
                "1": "local mdelay        = menu:AddComponent(MenuLib.Slider(\"dt delay\", 1 ,24, 20 ))"
            }
        },
        {
            "Title": "Local mhibox = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "35": "local mhibox = menu:AddComponent(MenuLib.Combo(\"^Hitboxes\", Hitboxes, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mhibox = menu:AddComponent(MenuLib.Combo(\"^Hitboxes\", Hitboxes, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Autoshoot   = mautoshoot:getvalue",
            "subTitle": "",
            "dLine": {
                "42": "AutoShoot   = mAutoshoot:GetValue(),"
            },
            "SLine": {
                "1": "AutoShoot   = mAutoshoot:GetValue(),"
            }
        },
        {
            "Title": "Silent      = msilent:getvalue",
            "subTitle": "",
            "dLine": {
                "43": "Silent      = mSilent:GetValue(),"
            },
            "SLine": {
                "1": "Silent      = mSilent:GetValue(),"
            }
        },
        {
            "Title": "Aimfov      = mfov:getvalue",
            "subTitle": "",
            "dLine": {
                "44": "AimFov      = mFov:GetValue()"
            },
            "SLine": {
                "1": "AimFov      = mFov:GetValue()"
            }
        },
        {
            "Title": "Function targetpositionprediction",
            "subTitle": "",
            "dLine": {
                "46": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)"
            },
            "SLine": {
                "1": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)"
            }
        },
        {
            "Title": "Local targetkey = tostring",
            "subTitle": "",
            "dLine": {
                "52": "local targetKey = tostring(targetLastPos)"
            },
            "SLine": {
                "1": "local targetKey = tostring(targetLastPos)"
            }
        },
        {
            "Title": "Local targetvelocity = targetentity:estimateabsvelocity",
            "subTitle": "",
            "dLine": {
                "55": "local targetVelocity = targetEntity:EstimateAbsVelocity()"
            },
            "SLine": {
                "1": "local targetVelocity = targetEntity:EstimateAbsVelocity()"
            }
        },
        {
            "Title": "Targetvelocity = targetlastpos - targetentity:getorigin",
            "subTitle": "",
            "dLine": {
                "57": "targetVelocity = targetLastPos - targetEntity:GetOrigin()"
            },
            "SLine": {
                "1": "targetVelocity = targetLastPos - targetEntity:GetOrigin()"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "58": "table.insert(targetVelocitySamples[targetKey], 1, targetVelocity)"
            },
            "SLine": {
                "1": "table.insert(targetVelocitySamples[targetKey], 1, targetVelocity)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "61": "table.remove(targetVelocitySamples[targetKey], samples + 1)"
            },
            "SLine": {
                "1": "table.remove(targetVelocitySamples[targetKey], samples + 1)"
            }
        },
        {
            "Title": "Local totalvelocity = vector3",
            "subTitle": "",
            "dLine": {
                "62": "local totalVelocity = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local totalVelocity = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local curve = vector3",
            "subTitle": "",
            "dLine": {
                "66": "local curve = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local curve = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local function getbesttarget",
            "subTitle": "",
            "dLine": {
                "77": "local function GetBestTarget(me)"
            },
            "SLine": {
                "1": "local function GetBestTarget(me)"
            }
        },
        {
            "Title": "Local players = entities.findbyclass",
            "subTitle": "",
            "dLine": {
                "78": "local players = entities.FindByClass(\"CTFPlayer\")",
                "4019": "local players = entities.FindByClass(\"CTFPlayer\");"
            },
            "SLine": {
                "1": "local players = entities.FindByClass(\"CTFPlayer\")"
            }
        },
        {
            "Title": "For _, entity in pairs",
            "subTitle": "",
            "dLine": {
                "81": "for _, entity in pairs(players) do"
            },
            "SLine": {
                "1": "for _, entity in pairs(players) do"
            }
        },
        {
            "Title": "If not entity:isalive",
            "subTitle": "",
            "dLine": {
                "83": "if not entity:IsAlive() then goto continue end"
            },
            "SLine": {
                "1": "if not entity:IsAlive() then goto continue end"
            }
        },
        {
            "Title": "If entity:getteamnumber",
            "subTitle": "",
            "dLine": {
                "84": "if entity:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber() then goto continue end"
            },
            "SLine": {
                "1": "if entity:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber() then goto continue end"
            }
        },
        {
            "Title": "Local plocal = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "85": "local pLocal = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local pLocal = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Local plocaloriginlast = me:getabsorigin",
            "subTitle": "",
            "dLine": {
                "86": "local pLocalOriginLast = me:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local pLocalOriginLast = me:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local targetorigin = entity:getabsorigin",
            "subTitle": "",
            "dLine": {
                "87": "local targetOrigin = entity:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local targetOrigin = entity:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local plocalorigin = me:geteyepos",
            "subTitle": "",
            "dLine": {
                "88": "local pLocalOrigin = me:GetEyePos()"
            },
            "SLine": {
                "1": "local pLocalOrigin = me:GetEyePos()"
            }
        },
        {
            "Title": "Targetfuture = ",
            "subTitle": "",
            "dLine": {
                "92": "targetFuture = (entity:GetAbsOrigin() + entity:EstimateAbsVelocity())"
            },
            "SLine": {
                "1": "targetFuture = (entity:GetAbsOrigin() + entity:EstimateAbsVelocity())"
            }
        },
        {
            "Title": "Local distance = ",
            "subTitle": "",
            "dLine": {
                "95": "local distance = (predictedPos - pLocalOrigin):Length()"
            },
            "SLine": {
                "1": "local distance = (predictedPos - pLocalOrigin):Length()"
            }
        },
        {
            "Title": "Targetfuture = targetpositionprediction",
            "subTitle": "",
            "dLine": {
                "97": "targetFuture = TargetPositionPrediction(targetOrigin, tickRate, travelTime, targetEntity)"
            },
            "SLine": {
                "1": "targetFuture = TargetPositionPrediction(targetOrigin, tickRate, travelTime, targetEntity)"
            }
        },
        {
            "Title": "Local player = wplayer.fromentity",
            "subTitle": "",
            "dLine": {
                "98": "local player = WPlayer.FromEntity(entity)"
            },
            "SLine": {
                "1": "local player = WPlayer.FromEntity(entity)"
            }
        },
        {
            "Title": "Local angles = math.positionangles",
            "subTitle": "",
            "dLine": {
                "100": "local angles = Math.PositionAngles(me:GetEyePos(), aimPos)"
            },
            "SLine": {
                "1": "local angles = Math.PositionAngles(me:GetEyePos(), aimPos)"
            }
        },
        {
            "Title": "Local fov = math.anglefov",
            "subTitle": "",
            "dLine": {
                "101": "local fov = Math.AngleFov(angles, engine.GetViewAngles())"
            },
            "SLine": {
                "1": "local fov = Math.AngleFov(angles, engine.GetViewAngles())"
            }
        },
        {
            "Title": "If not helpers.vispos",
            "subTitle": "",
            "dLine": {
                "103": "if not Helpers.VisPos(entity, me:GetEyePos(), aimPos) then goto continue end"
            },
            "SLine": {
                "1": "if not Helpers.VisPos(entity, me:GetEyePos(), aimPos) then goto continue end"
            }
        },
        {
            "Title": "Lasttarget = vector3",
            "subTitle": "",
            "dLine": {
                "109": "lasttarget = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "lasttarget = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local function oncreatemove",
            "subTitle": "",
            "dLine": {
                "110": "local function OnCreateMove(userCmd)"
            },
            "SLine": {
                "1": "local function OnCreateMove(userCmd)"
            }
        },
        {
            "Title": "Local me = wplayer.getlocal",
            "subTitle": "",
            "dLine": {
                "113": "local me = WPlayer.GetLocal()"
            },
            "SLine": {
                "1": "local me = WPlayer.GetLocal()"
            }
        },
        {
            "Title": "Currenttarget = getbesttarget",
            "subTitle": "",
            "dLine": {
                "115": "currentTarget = GetBestTarget(me)"
            },
            "SLine": {
                "1": "currentTarget = GetBestTarget(me)"
            }
        },
        {
            "Title": "If not input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "117": "if not input.IsButtonDown(options.AimKey) then return end"
            },
            "SLine": {
                "1": "if not input.IsButtonDown(options.AimKey) then return end"
            }
        },
        {
            "Title": "Usercmd:setviewangles",
            "subTitle": "",
            "dLine": {
                "118": "userCmd:SetViewAngles(currentTarget.angles:Unpack())"
            },
            "SLine": {
                "1": "userCmd:SetViewAngles(currentTarget.angles:Unpack())"
            }
        },
        {
            "Title": "Engine.setviewangles",
            "subTitle": "",
            "dLine": {
                "120": "engine.SetViewAngles(currentTarget.angles)"
            },
            "SLine": {
                "1": "engine.SetViewAngles(currentTarget.angles)"
            }
        },
        {
            "Title": "Local pweapon = me:getpropentity",
            "subTitle": "",
            "dLine": {
                "121": "local pWeapon = me:GetPropEntity(\"m_hActiveWeapon\")"
            },
            "SLine": {
                "1": "local pWeapon = me:GetPropEntity(\"m_hActiveWeapon\")"
            }
        },
        {
            "Title": "Local myfont = draw.createfont",
            "subTitle": "",
            "dLine": {
                "125": "local myfont = draw.CreateFont( \"Verdana\", 16, 800 )"
            },
            "SLine": {
                "1": "local myfont = draw.CreateFont( \"Verdana\", 16, 800 )"
            }
        },
        {
            "Title": "Local function ondraw",
            "subTitle": "",
            "dLine": {
                "126": "local function OnDraw()"
            },
            "SLine": {
                "1": "local function OnDraw()"
            }
        },
        {
            "Title": "If engine.con_isvisible",
            "subTitle": "",
            "dLine": {
                "127": "if engine.Con_IsVisible() or engine.IsGameUIVisible() then"
            },
            "SLine": {
                "1": "if engine.Con_IsVisible() or engine.IsGameUIVisible() then"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "129": "draw.SetFont( myfont )"
            },
            "SLine": {
                "1": "draw.SetFont( myfont )"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "130": "draw.Color( 255, 255, 255, 255 )"
            },
            "SLine": {
                "1": "draw.Color( 255, 255, 255, 255 )"
            }
        },
        {
            "Title": "Local w, h = draw.getscreensize",
            "subTitle": "",
            "dLine": {
                "131": "local w, h = draw.GetScreenSize()"
            },
            "SLine": {
                "1": "local w, h = draw.GetScreenSize()"
            }
        },
        {
            "Title": "Screenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "133": "screenPos = client.WorldToScreen(targetFuture)"
            },
            "SLine": {
                "1": "screenPos = client.WorldToScreen(targetFuture)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "135": "draw.Line( screenPos[1] + 10, screenPos[2], screenPos[1] - 10, screenPos[2])"
            },
            "SLine": {
                "1": "draw.Line( screenPos[1] + 10, screenPos[2], screenPos[1] - 10, screenPos[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "136": "draw.Line( screenPos[1], screenPos[2] - 10, screenPos[1], screenPos[2] + 10)"
            },
            "SLine": {
                "1": "draw.Line( screenPos[1], screenPos[2] - 10, screenPos[1], screenPos[2] + 10)"
            }
        },
        {
            "Title": "Local function onunload",
            "subTitle": "",
            "dLine": {
                "137": "local function OnUnload()"
            },
            "SLine": {
                "1": "local function OnUnload()"
            }
        },
        {
            "Title": "Menulib.removemenu",
            "subTitle": "",
            "dLine": {
                "138": "MenuLib.RemoveMenu(menu)"
            },
            "SLine": {
                "1": "MenuLib.RemoveMenu(menu)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "139": "client.Command('play \"ui/buttonclickrelease\"', true)"
            },
            "SLine": {
                "1": "client.Command('play \"ui/buttonclickrelease\"', true)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "140": "callbacks.Unregister(\"CreateMove\", \"LNX.Aimbot.CreateMove\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"LNX.Aimbot.CreateMove\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "141": "callbacks.Unregister(\"Unload\", \"MCT_Unload\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Unload\", \"MCT_Unload\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "142": "callbacks.Unregister(\"Draw\", \"LNX.Aimbot.Draw\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"LNX.Aimbot.Draw\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "143": "callbacks.Register(\"CreateMove\", \"LNX.Aimbot.CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"LNX.Aimbot.CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "144": "callbacks.Register(\"Unload\", \"MCT_Unload\", OnUnload)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Unload\", \"MCT_Unload\", OnUnload)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "145": "callbacks.Register(\"Draw\", \"LNX.Aimbot.Draw\", OnDraw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"LNX.Aimbot.Draw\", OnDraw)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "146": "local menu = MenuLib.Create(\"Anti Aim lua for Lmaobox\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Anti Aim lua for Lmaobox\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local randomtoggle  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "148": "local RandomToggle  = menu:AddComponent(MenuLib.Checkbox(\"Random Yaw\", true))"
            },
            "SLine": {
                "1": "local RandomToggle  = menu:AddComponent(MenuLib.Checkbox(\"Random Yaw\", true))"
            }
        },
        {
            "Title": "Local antioverlap   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "149": "local Antioverlap   = menu:AddComponent(MenuLib.Checkbox(\"anti overlap\", true))"
            },
            "SLine": {
                "1": "local Antioverlap   = menu:AddComponent(MenuLib.Checkbox(\"anti overlap\", true))"
            }
        },
        {
            "Title": "Local fakelagtoggle = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "150": "local FakeLagToggle = menu:AddComponent(MenuLib.Checkbox(\"Random Fake Lag\", false))"
            },
            "SLine": {
                "1": "local FakeLagToggle = menu:AddComponent(MenuLib.Checkbox(\"Random Fake Lag\", false))"
            }
        },
        {
            "Title": "Local minfakelag    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "151": "local MinFakeLag    = menu:AddComponent(MenuLib.Slider(\"Fake Lag Min Value\", 1 ,22 , 14 ))"
            },
            "SLine": {
                "1": "local MinFakeLag    = menu:AddComponent(MenuLib.Slider(\"Fake Lag Min Value\", 1 ,22 , 14 ))"
            }
        },
        {
            "Title": "Local maxfakelag    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "152": "local MaxFakeLag    = menu:AddComponent(MenuLib.Slider(\"Fake Lag Max Value\", 1 ,22 , 22 ))"
            },
            "SLine": {
                "1": "local MaxFakeLag    = menu:AddComponent(MenuLib.Slider(\"Fake Lag Max Value\", 1 ,22 , 22 ))"
            }
        },
        {
            "Title": "Local jittertoggle  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "153": "local JitterToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Jitter\", false))"
            },
            "SLine": {
                "1": "local JitterToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Jitter\", false))"
            }
        },
        {
            "Title": "Local jitterreal    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "154": "local JitterReal    = menu:AddComponent(MenuLib.Slider(\"Real Angle Jitter\", -180 ,180 , 140 ))"
            },
            "SLine": {
                "1": "local JitterReal    = menu:AddComponent(MenuLib.Slider(\"Real Angle Jitter\", -180 ,180 , 140 ))"
            }
        },
        {
            "Title": "Local jitterfake    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "155": "local JitterFake    = menu:AddComponent(MenuLib.Slider(\"Fake Angle Jitter\", -180 ,180 , 170 ))"
            },
            "SLine": {
                "1": "local JitterFake    = menu:AddComponent(MenuLib.Slider(\"Fake Angle Jitter\", -180 ,180 , 170 ))"
            }
        },
        {
            "Title": "Local offsetspintoggle  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "156": "local OffsetSpinToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Offset Spin\", false))"
            },
            "SLine": {
                "1": "local OffsetSpinToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Offset Spin\", false))"
            }
        },
        {
            "Title": "Local realoffset    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "157": "local RealOffset    = menu:AddComponent(MenuLib.Slider(\"Real Angle Offset\", 0 ,180 , 65 ))"
            },
            "SLine": {
                "1": "local RealOffset    = menu:AddComponent(MenuLib.Slider(\"Real Angle Offset\", 0 ,180 , 65 ))"
            }
        },
        {
            "Title": "Local semispintoggle  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "158": "local SemiSpinToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Semi Spin (broken)\", false))"
            },
            "SLine": {
                "1": "local SemiSpinToggle  = menu:AddComponent(MenuLib.Checkbox(\"(Yaw) Semi Spin (broken)\", false))"
            }
        },
        {
            "Title": "Local semispinoffset    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "159": "local SemiSpinOffset    = menu:AddComponent(MenuLib.Slider(\"Spin Angle\", -179 ,180 , 50 ))"
            },
            "SLine": {
                "1": "local SemiSpinOffset    = menu:AddComponent(MenuLib.Slider(\"Spin Angle\", -179 ,180 , 50 ))"
            }
        },
        {
            "Title": "Local semispinrealoffset    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "160": "local SemiSpinRealOffset    = menu:AddComponent(MenuLib.Slider(\"Real Angle Offset\", -180 ,180 , 50 ))"
            },
            "SLine": {
                "1": "local SemiSpinRealOffset    = menu:AddComponent(MenuLib.Slider(\"Real Angle Offset\", -180 ,180 , 50 ))"
            }
        },
        {
            "Title": "Local function script",
            "subTitle": "",
            "dLine": {
                "161": "local function script()"
            },
            "SLine": {
                "1": "local function script()"
            }
        },
        {
            "Title": "If randomtoggle:getvalue",
            "subTitle": "",
            "dLine": {
                "162": "if RandomToggle:GetValue() == true then"
            },
            "SLine": {
                "1": "if RandomToggle:GetValue() == true then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "163": "gui.SetValue(\"Anti Aim - Custom Yaw (Real)\", math.random(-180, 180 ))"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Yaw (Real)\", math.random(-180, 180 ))"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "164": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", math.random(-180, 180 ))"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", math.random(-180, 180 ))"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "165": "gui.SetValue(\"Anti Aim - Pitch\", \"Custom\")"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Pitch\", \"Custom\")"
            }
        },
        {
            "Title": "Local number = math.random",
            "subTitle": "",
            "dLine": {
                "168": "local number = math.random(1,3)"
            },
            "SLine": {
                "1": "local number = math.random(1,3)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "170": "gui.SetValue(\"Anti Aim - Pitch\", 2)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Pitch\", 2)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "172": "gui.SetValue(\"Anti Aim - Pitch\", 4)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Pitch\", 4)"
            }
        },
        {
            "Title": "Local pitch = math.random",
            "subTitle": "",
            "dLine": {
                "174": "local pitch = math.random(40, 80)"
            },
            "SLine": {
                "1": "local pitch = math.random(40, 80)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "176": "gui.SetValue(\"Anti Aim - Custom Pitch (Real)\", pitch)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Pitch (Real)\", pitch)"
            }
        },
        {
            "Title": "If fakelagtoggle:getvalue",
            "subTitle": "",
            "dLine": {
                "177": "if FakeLagToggle:GetValue() == true then"
            },
            "SLine": {
                "1": "if FakeLagToggle:GetValue() == true then"
            }
        },
        {
            "Title": "Ticks = math.random",
            "subTitle": "",
            "dLine": {
                "178": "ticks = math.random(MinFakeLag.Value, MaxFakeLag.Value) * 15"
            },
            "SLine": {
                "1": "ticks = math.random(MinFakeLag.Value, MaxFakeLag.Value) * 15"
            }
        },
        {
            "Title": "If jittertoggle:getvalue",
            "subTitle": "",
            "dLine": {
                "179": "if JitterToggle:GetValue() == true then"
            },
            "SLine": {
                "1": "if JitterToggle:GetValue() == true then"
            }
        },
        {
            "Title": "If gui.getvalue",
            "subTitle": "",
            "dLine": {
                "180": "if gui.GetValue( \"Anti Aim - Custom Yaw (Real)\" ) == JitterReal.Value then"
            },
            "SLine": {
                "1": "if gui.GetValue( \"Anti Aim - Custom Yaw (Real)\" ) == JitterReal.Value then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "181": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", JitterFake.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", JitterFake.Value)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "182": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", JitterReal.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", JitterReal.Value)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "183": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", JitterReal.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", JitterReal.Value)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "184": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", JitterFake.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", JitterFake.Value)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "185": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", -JitterReal.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Real)\", -JitterReal.Value)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "186": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", -JitterFake.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (Fake)\", -JitterFake.Value)"
            }
        },
        {
            "Title": "If offsetspintoggle:getvalue",
            "subTitle": "",
            "dLine": {
                "187": "if OffsetSpinToggle:GetValue() == true then"
            },
            "SLine": {
                "1": "if OffsetSpinToggle:GetValue() == true then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "188": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\" ) + 1)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\" ) + 1)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "189": "if (gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") == 180) then"
            },
            "SLine": {
                "1": "if (gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") == 180) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "190": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", -180)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", -180)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "191": "gui.SetValue( \"Anti Aim - Custom Yaw (real)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") - RealOffset.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (real)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") - RealOffset.Value)"
            }
        },
        {
            "Title": "If semispintoggle:getvalue",
            "subTitle": "",
            "dLine": {
                "192": "if SemiSpinToggle:GetValue() == true then"
            },
            "SLine": {
                "1": "if SemiSpinToggle:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "193": "if (gui.GetValue(\"Anti Aim - Custom Yaw (fake)\") == SemiSpinOffset.Value) then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"Anti Aim - Custom Yaw (fake)\") == SemiSpinOffset.Value) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "194": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", (SemiSpinOffset.Value - 100))"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (fake)\", (SemiSpinOffset.Value - 100))"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "195": "gui.SetValue( \"Anti Aim - Custom Yaw (real)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") - SemiSpinRealOffset.Value)"
            },
            "SLine": {
                "1": "gui.SetValue( \"Anti Aim - Custom Yaw (real)\", gui.GetValue( \"Anti Aim - Custom Yaw (fake)\") - SemiSpinRealOffset.Value)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "196": "callbacks.Unregister(\"CreateMove\", \"MCT_CreateMove\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"MCT_CreateMove\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "197": "callbacks.Register( \"Draw\", \"MCT_Script\", script )"
            },
            "SLine": {
                "1": "callbacks.Register( \"Draw\", \"MCT_Script\", script )"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "200": "assert(MenuLib.Version >= 1.43, \"MenuLib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(MenuLib.Version >= 1.43, \"MenuLib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Font = draw.createfont",
            "subTitle": "",
            "dLine": {
                "201": "Font = draw.CreateFont(\"Roboto\", 20, 400)"
            },
            "SLine": {
                "1": "Font = draw.CreateFont(\"Roboto\", 20, 400)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "202": "local menu = MenuLib.Create(\"Auto Peek\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Auto Peek\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local menabled = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "204": "local mEnabled = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            },
            "SLine": {
                "1": "local mEnabled = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            }
        },
        {
            "Title": "Local mkey = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "205": "local mKey = menu:AddComponent(MenuLib.Keybind(\"Peek Key\", KEY_LSHIFT, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mKey = menu:AddComponent(MenuLib.Keybind(\"Peek Key\", KEY_LSHIFT, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "206": "menu:AddComponent(MenuLib.Label(\"_\"))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"_\"))"
            }
        },
        {
            "Title": "Local mfreemove = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "207": "local mFreeMove = menu:AddComponent(MenuLib.Checkbox(\"Free Move\", false))"
            },
            "SLine": {
                "1": "local mFreeMove = menu:AddComponent(MenuLib.Checkbox(\"Free Move\", false))"
            }
        },
        {
            "Title": "Local mdistance = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "208": "local mDistance = menu:AddComponent(MenuLib.Slider(\"Distance\", 20, 400, 100))"
            },
            "SLine": {
                "1": "local mDistance = menu:AddComponent(MenuLib.Slider(\"Distance\", 20, 400, 100))"
            }
        },
        {
            "Title": "Local msegments = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "209": "local mSegments = menu:AddComponent(MenuLib.Slider(\"Segments\", 2, 15, 5))"
            },
            "SLine": {
                "1": "local mSegments = menu:AddComponent(MenuLib.Slider(\"Segments\", 2, 15, 5))"
            }
        },
        {
            "Title": "Local peekstartvec = vector3",
            "subTitle": "",
            "dLine": {
                "213": "local PeekStartVec = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local PeekStartVec = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local peekdirectionvec = vector3",
            "subTitle": "",
            "dLine": {
                "214": "local PeekDirectionVec = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local PeekDirectionVec = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local peekreturnvec = vector3",
            "subTitle": "",
            "dLine": {
                "215": "local PeekReturnVec = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local PeekReturnVec = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Local function onground",
            "subTitle": "",
            "dLine": {
                "222": "local function OnGround(player)"
            },
            "SLine": {
                "1": "local function OnGround(player)"
            }
        },
        {
            "Title": "Local pflags = player:getpropint",
            "subTitle": "",
            "dLine": {
                "223": "local pFlags = player:GetPropInt(\"m_fFlags\")"
            },
            "SLine": {
                "1": "local pFlags = player:GetPropInt(\"m_fFlags\")"
            }
        },
        {
            "Title": "Local function vispos",
            "subTitle": "",
            "dLine": {
                "225": "local function VisPos(target, vFrom, vTo)"
            },
            "SLine": {
                "1": "local function VisPos(target, vFrom, vTo)"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "226": "local trace = engine.TraceLine(vFrom, vTo, MASK_SHOT | CONTENTS_GRATE)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(vFrom, vTo, MASK_SHOT | CONTENTS_GRATE)"
            }
        },
        {
            "Title": "Local function canshoot",
            "subTitle": "",
            "dLine": {
                "228": "local function CanShoot(pLocal)"
            },
            "SLine": {
                "1": "local function CanShoot(pLocal)"
            }
        },
        {
            "Title": "Local pweapon = plocal:getpropentity",
            "subTitle": "",
            "dLine": {
                "229": "local pWeapon = pLocal:GetPropEntity(\"m_hActiveWeapon\")"
            },
            "SLine": {
                "1": "local pWeapon = pLocal:GetPropEntity(\"m_hActiveWeapon\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "230": "if (not pWeapon) or (pWeapon:IsMeleeWeapon()) then return false end"
            },
            "SLine": {
                "1": "if (not pWeapon) or (pWeapon:IsMeleeWeapon()) then return false end"
            }
        },
        {
            "Title": "Local nextprimaryattack = pweapon:getpropfloat",
            "subTitle": "",
            "dLine": {
                "231": "local nextPrimaryAttack = pWeapon:GetPropFloat(\"LocalActiveWeaponData\", \"m_flNextPrimaryAttack\")"
            },
            "SLine": {
                "1": "local nextPrimaryAttack = pWeapon:GetPropFloat(\"LocalActiveWeaponData\", \"m_flNextPrimaryAttack\")"
            }
        },
        {
            "Title": "Local nextattack = plocal:getpropfloat",
            "subTitle": "",
            "dLine": {
                "232": "local nextAttack = pLocal:GetPropFloat(\"bcc_localdata\", \"m_flNextAttack\")"
            },
            "SLine": {
                "1": "local nextAttack = pLocal:GetPropFloat(\"bcc_localdata\", \"m_flNextAttack\")"
            }
        },
        {
            "Title": "Return ",
            "subTitle": "",
            "dLine": {
                "234": "return (nextPrimaryAttack <= globals.CurTime()) and (nextAttack <= globals.CurTime())"
            },
            "SLine": {
                "1": "return (nextPrimaryAttack <= globals.CurTime()) and (nextAttack <= globals.CurTime())"
            }
        },
        {
            "Title": "Local function gethitboxpos",
            "subTitle": "",
            "dLine": {
                "235": "local function GetHitboxPos(entity, hitbox)"
            },
            "SLine": {
                "1": "local function GetHitboxPos(entity, hitbox)"
            }
        },
        {
            "Title": "Local hitbox = entity:gethitboxes",
            "subTitle": "",
            "dLine": {
                "236": "local hitbox = entity:GetHitboxes()[hitbox]"
            },
            "SLine": {
                "1": "local hitbox = entity:GetHitboxes()[hitbox]"
            }
        },
        {
            "Title": "Local function canattackfrompos",
            "subTitle": "",
            "dLine": {
                "239": "local function CanAttackFromPos(pLocal, pPos)"
            },
            "SLine": {
                "1": "local function CanAttackFromPos(pLocal, pPos)"
            }
        },
        {
            "Title": "If canshoot",
            "subTitle": "",
            "dLine": {
                "240": "if CanShoot(pLocal) == false then return false end"
            },
            "SLine": {
                "1": "if CanShoot(pLocal) == false then return false end"
            }
        },
        {
            "Title": "Local ignorefriends = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "241": "local ignoreFriends = gui.GetValue(\"ignore steam friends\")"
            },
            "SLine": {
                "1": "local ignoreFriends = gui.GetValue(\"ignore steam friends\")"
            }
        },
        {
            "Title": "For k, vplayer in pairs",
            "subTitle": "",
            "dLine": {
                "242": "for k, vPlayer in pairs(players) do"
            },
            "SLine": {
                "1": "for k, vPlayer in pairs(players) do"
            }
        },
        {
            "Title": "If vplayer:isvalid",
            "subTitle": "",
            "dLine": {
                "243": "if vPlayer:IsValid() == false then goto continue end"
            },
            "SLine": {
                "1": "if vPlayer:IsValid() == false then goto continue end"
            }
        },
        {
            "Title": "If vplayer:isalive",
            "subTitle": "",
            "dLine": {
                "244": "if vPlayer:IsAlive() == false then goto continue end"
            },
            "SLine": {
                "1": "if vPlayer:IsAlive() == false then goto continue end"
            }
        },
        {
            "Title": "If vplayer:getteamnumber",
            "subTitle": "",
            "dLine": {
                "245": "if vPlayer:GetTeamNumber() == pLocal:GetTeamNumber() then goto continue end"
            },
            "SLine": {
                "1": "if vPlayer:GetTeamNumber() == pLocal:GetTeamNumber() then goto continue end"
            }
        },
        {
            "Title": "Local playerinfo = client.getplayerinfo",
            "subTitle": "",
            "dLine": {
                "246": "local playerInfo = client.GetPlayerInfo(vPlayer:GetIndex())"
            },
            "SLine": {
                "1": "local playerInfo = client.GetPlayerInfo(vPlayer:GetIndex())"
            }
        },
        {
            "Title": "If steam.isfriend",
            "subTitle": "",
            "dLine": {
                "247": "if steam.IsFriend(playerInfo.SteamID) and ignoreFriends == 1 then goto continue end"
            },
            "SLine": {
                "1": "if steam.IsFriend(playerInfo.SteamID) and ignoreFriends == 1 then goto continue end"
            }
        },
        {
            "Title": "If vispos",
            "subTitle": "",
            "dLine": {
                "248": "if VisPos(vPlayer, pPos, GetHitboxPos(vPlayer, Hitboxes.HEAD)) then"
            },
            "SLine": {
                "1": "if VisPos(vPlayer, pPos, GetHitboxPos(vPlayer, Hitboxes.HEAD)) then"
            }
        },
        {
            "Title": "Local function computemove",
            "subTitle": "",
            "dLine": {
                "251": "local function ComputeMove(pCmd, a, b)"
            },
            "SLine": {
                "1": "local function ComputeMove(pCmd, a, b)"
            }
        },
        {
            "Title": "If diff:length",
            "subTitle": "",
            "dLine": {
                "253": "if diff:Length() == 0 then return Vector3(0, 0, 0) end"
            },
            "SLine": {
                "1": "if diff:Length() == 0 then return Vector3(0, 0, 0) end"
            }
        },
        {
            "Title": "Local vsilent = vector3",
            "subTitle": "",
            "dLine": {
                "256": "local vSilent = Vector3(x, y, 0)"
            },
            "SLine": {
                "1": "local vSilent = Vector3(x, y, 0)"
            }
        },
        {
            "Title": "Local ang = vsilent:angles",
            "subTitle": "",
            "dLine": {
                "257": "local ang = vSilent:Angles()"
            },
            "SLine": {
                "1": "local ang = vSilent:Angles()"
            }
        },
        {
            "Title": "Local cpitch, cyaw, croll = pcmd:getviewangles",
            "subTitle": "",
            "dLine": {
                "258": "local cPitch, cYaw, cRoll = pCmd:GetViewAngles()"
            },
            "SLine": {
                "1": "local cPitch, cYaw, cRoll = pCmd:GetViewAngles()"
            }
        },
        {
            "Title": "Local yaw = math.rad",
            "subTitle": "",
            "dLine": {
                "259": "local yaw = math.rad(ang.y - cYaw)"
            },
            "SLine": {
                "1": "local yaw = math.rad(ang.y - cYaw)"
            }
        },
        {
            "Title": "Local pitch = math.rad",
            "subTitle": "",
            "dLine": {
                "260": "local pitch = math.rad(ang.x - cPitch)"
            },
            "SLine": {
                "1": "local pitch = math.rad(ang.x - cPitch)"
            }
        },
        {
            "Title": "Local move = vector3",
            "subTitle": "",
            "dLine": {
                "261": "local move = Vector3(math.cos(yaw) * 450, -math.sin(yaw) * 450, -math.cos(pitch) * 450)"
            },
            "SLine": {
                "1": "local move = Vector3(math.cos(yaw) * 450, -math.sin(yaw) * 450, -math.cos(pitch) * 450)"
            }
        },
        {
            "Title": "Local function walkto",
            "subTitle": "",
            "dLine": {
                "263": "local function WalkTo(pCmd, pLocal, pDestination)"
            },
            "SLine": {
                "1": "local function WalkTo(pCmd, pLocal, pDestination)"
            }
        },
        {
            "Title": "Local localpos = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "264": "local localPos = pLocal:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local localPos = pLocal:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local result = computemove",
            "subTitle": "",
            "dLine": {
                "265": "local result = ComputeMove(pCmd, localPos, pDestination)"
            },
            "SLine": {
                "1": "local result = ComputeMove(pCmd, localPos, pDestination)"
            }
        },
        {
            "Title": "Pcmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "266": "pCmd:SetForwardMove(result.x)"
            },
            "SLine": {
                "1": "pCmd:SetForwardMove(result.x)"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "267": "pCmd:SetSideMove(result.y)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(result.y)"
            }
        },
        {
            "Title": "Local function drawline",
            "subTitle": "",
            "dLine": {
                "268": "local function DrawLine(startPos, endPos)"
            },
            "SLine": {
                "1": "local function DrawLine(startPos, endPos)"
            }
        },
        {
            "Title": "Local function oncreatemove",
            "subTitle": "",
            "dLine": {
                "273": "local function OnCreateMove(pCmd)"
            },
            "SLine": {
                "1": "local function OnCreateMove(pCmd)"
            }
        },
        {
            "Title": "If not plocal or menabled:getvalue",
            "subTitle": "",
            "dLine": {
                "274": "if not pLocal or mEnabled:GetValue() == false then return end"
            },
            "SLine": {
                "1": "if not pLocal or mEnabled:GetValue() == false then return end"
            }
        },
        {
            "Title": "If plocal:isalive",
            "subTitle": "",
            "dLine": {
                "275": "if pLocal:IsAlive() and input.IsButtonDown(mKey:GetValue()) or pLocal:IsAlive() and (pLocal:InCond(13)) then"
            },
            "SLine": {
                "1": "if pLocal:IsAlive() and input.IsButtonDown(mKey:GetValue()) or pLocal:IsAlive() and (pLocal:InCond(13)) then"
            }
        },
        {
            "Title": "If onground",
            "subTitle": "",
            "dLine": {
                "277": "if OnGround(pLocal) then"
            },
            "SLine": {
                "1": "if OnGround(pLocal) then"
            }
        },
        {
            "Title": "If mfreemove:getvalue",
            "subTitle": "",
            "dLine": {
                "280": "if mFreeMove:GetValue() == false and HasDirection == false and OnGround(pLocal) then"
            },
            "SLine": {
                "1": "if mFreeMove:GetValue() == false and HasDirection == false and OnGround(pLocal) then"
            }
        },
        {
            "Title": "Local viewangles = engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "281": "local viewAngles = engine.GetViewAngles()"
            },
            "SLine": {
                "1": "local viewAngles = engine.GetViewAngles()"
            }
        },
        {
            "Title": "Local vdirection = vector3",
            "subTitle": "",
            "dLine": {
                "282": "local vDirection = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local vDirection = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "283": "if input.IsButtonDown(KEY_A) or input.IsButtonDown(KEY_W) or input.IsButtonDown(KEY_D) or input.IsButtonDown(KEY_S) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(KEY_A) or input.IsButtonDown(KEY_W) or input.IsButtonDown(KEY_D) or input.IsButtonDown(KEY_S) then"
            }
        },
        {
            "Title": "Local eyepos = localpos + plocal:getpropvector",
            "subTitle": "",
            "dLine": {
                "284": "local eyePos = localPos + pLocal:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            },
            "SLine": {
                "1": "local eyePos = localPos + pLocal:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "285": "if input.IsButtonDown(KEY_A) or input.IsButtonDown(KEY_W) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(KEY_A) or input.IsButtonDown(KEY_W) then"
            }
        },
        {
            "Title": "Vdirection = vdirection - ",
            "subTitle": "",
            "dLine": {
                "286": "vDirection = vDirection - (viewAngles:Right() * mDistance:GetValue())"
            },
            "SLine": {
                "1": "vDirection = vDirection - (viewAngles:Right() * mDistance:GetValue())"
            }
        },
        {
            "Title": "Elseif input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "287": "elseif input.IsButtonDown(KEY_D) or input.IsButtonDown(KEY_S) then"
            },
            "SLine": {
                "1": "elseif input.IsButtonDown(KEY_D) or input.IsButtonDown(KEY_S) then"
            }
        },
        {
            "Title": "Vdirection = vdirection + ",
            "subTitle": "",
            "dLine": {
                "288": "vDirection = vDirection + (viewAngles:Right() * mDistance:GetValue())"
            },
            "SLine": {
                "1": "vDirection = vDirection + (viewAngles:Right() * mDistance:GetValue())"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "290": "local trace = engine.TraceLine(eyePos, traceDest, MASK_SOLID)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(eyePos, traceDest, MASK_SOLID)"
            }
        },
        {
            "Title": "If mfreemove:getvalue",
            "subTitle": "",
            "dLine": {
                "295": "if mFreeMove:GetValue() == false and HasDirection == true then"
            },
            "SLine": {
                "1": "if mFreeMove:GetValue() == false and HasDirection == true then"
            }
        },
        {
            "Title": "Local segmentsize = math.floor",
            "subTitle": "",
            "dLine": {
                "297": "local segmentSize = math.floor(100 / mSegments:GetValue())"
            },
            "SLine": {
                "1": "local segmentSize = math.floor(100 / mSegments:GetValue())"
            }
        },
        {
            "Title": "For i = 1, msegments:getvalue",
            "subTitle": "",
            "dLine": {
                "299": "for i = 1, mSegments:GetValue() do"
            },
            "SLine": {
                "1": "for i = 1, mSegments:GetValue() do"
            }
        },
        {
            "Title": "If canattackfrompos",
            "subTitle": "",
            "dLine": {
                "302": "if CanAttackFromPos(pLocal, currentPos) then"
            },
            "SLine": {
                "1": "if CanAttackFromPos(pLocal, currentPos) then"
            }
        },
        {
            "Title": "Walkto",
            "subTitle": "",
            "dLine": {
                "303": "WalkTo(pCmd, pLocal, currentPos)"
            },
            "SLine": {
                "1": "WalkTo(pCmd, pLocal, currentPos)"
            }
        },
        {
            "Title": "Drawline",
            "subTitle": "",
            "dLine": {
                "305": "DrawLine(PeekReturnVec, currentPos)"
            },
            "SLine": {
                "1": "DrawLine(PeekReturnVec, currentPos)"
            }
        },
        {
            "Title": "If pcmd:getbuttons",
            "subTitle": "",
            "dLine": {
                "309": "if pCmd:GetButtons() & IN_ATTACK == 1 then"
            },
            "SLine": {
                "1": "if pCmd:GetButtons() & IN_ATTACK == 1 then"
            }
        },
        {
            "Title": "Local dist = distvector:length",
            "subTitle": "",
            "dLine": {
                "313": "local dist = distVector:Length()"
            },
            "SLine": {
                "1": "local dist = distVector:Length()"
            }
        },
        {
            "Title": "Walkto",
            "subTitle": "",
            "dLine": {
                "316": "WalkTo(pCmd, pLocal, PeekReturnVec)"
            },
            "SLine": {
                "1": "WalkTo(pCmd, pLocal, PeekReturnVec)"
            }
        },
        {
            "Title": "Peekreturnvec = vector3",
            "subTitle": "",
            "dLine": {
                "215": "local PeekReturnVec = Vector3(0, 0, 0)",
                "319": "PeekReturnVec = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "PeekReturnVec = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "321": "draw.SetFont(options.Font)"
            },
            "SLine": {
                "1": "draw.SetFont(options.Font)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "322": "draw.Color(255, 255, 255, 255)"
            },
            "SLine": {
                "1": "draw.Color(255, 255, 255, 255)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "324": "draw.Color(200, 200, 200, 230)"
            },
            "SLine": {
                "1": "draw.Color(200, 200, 200, 230)"
            }
        },
        {
            "Title": "For k, v in pairs",
            "subTitle": "",
            "dLine": {
                "325": "for k, v in pairs(LineDrawList) do"
            },
            "SLine": {
                "1": "for k, v in pairs(LineDrawList) do"
            }
        },
        {
            "Title": "Local start = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "326": "local start = client.WorldToScreen(v.start)"
            },
            "SLine": {
                "1": "local start = client.WorldToScreen(v.start)"
            }
        },
        {
            "Title": "Local endpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "327": "local endPos = client.WorldToScreen(v.endPos)"
            },
            "SLine": {
                "1": "local endPos = client.WorldToScreen(v.endPos)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "329": "draw.Line(start[1], start[2], endPos[1], endPos[2])"
            },
            "SLine": {
                "1": "draw.Line(start[1], start[2], endPos[1], endPos[2])"
            }
        },
        {
            "Title": "If mfreemove:getvalue",
            "subTitle": "",
            "dLine": {
                "330": "if mFreeMove:GetValue() == true then"
            },
            "SLine": {
                "1": "if mFreeMove:GetValue() == true then"
            }
        },
        {
            "Title": "Local startpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "332": "local startPos = client.WorldToScreen(pLocal:GetAbsOrigin())"
            },
            "SLine": {
                "1": "local startPos = client.WorldToScreen(pLocal:GetAbsOrigin())"
            }
        },
        {
            "Title": "Local endpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "333": "local endPos = client.WorldToScreen(PeekReturnVec)"
            },
            "SLine": {
                "1": "local endPos = client.WorldToScreen(PeekReturnVec)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "335": "draw.Line(startPos[1], startPos[2], endPos[1], endPos[2])"
            },
            "SLine": {
                "1": "draw.Line(startPos[1], startPos[2], endPos[1], endPos[2])"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "336": "callbacks.Unregister(\"CreateMove\", \"AP_CreateMove\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"AP_CreateMove\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "337": "callbacks.Unregister(\"Draw\", \"AP_Draw\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"AP_Draw\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "338": "callbacks.Unregister(\"Unload\", \"AP_Unload\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Unload\", \"AP_Unload\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "339": "callbacks.Register(\"CreateMove\", \"AP_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"AP_CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "340": "callbacks.Register(\"Draw\", \"AP_Draw\", OnDraw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"AP_Draw\", OnDraw)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "341": "callbacks.Register(\"Unload\", \"AP_Unload\", OnUnload)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Unload\", \"AP_Unload\", OnUnload)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "342": "client.Command('play \"ui/buttonclick\"', true)"
            },
            "SLine": {
                "1": "client.Command('play \"ui/buttonclick\"', true)"
            }
        },
        {
            "Title": "Client.removeconvarprotection",
            "subTitle": "",
            "dLine": {
                "343": "client.RemoveConVarProtection(\"cyoa_pda_open\")"
            },
            "SLine": {
                "1": "client.RemoveConVarProtection(\"cyoa_pda_open\")"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "344": "client.Command(\"cyoa_pda_open 0\", true)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open 0\", true)"
            }
        },
        {
            "Title": "If input.isbuttonreleased",
            "subTitle": "",
            "dLine": {
                "348": "if input.IsButtonReleased(MOUSE_RIGHT) and not pLocal:InCond(1) then"
            },
            "SLine": {
                "1": "if input.IsButtonReleased(MOUSE_RIGHT) and not pLocal:InCond(1) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "351": "client.Command(\"cyoa_pda_open 1\", true)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open 1\", true)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "355": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "Local function damage",
            "subTitle": "",
            "dLine": {
                "359": "local function damage(event)"
            },
            "SLine": {
                "1": "local function damage(event)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "360": "if (event:GetName() == 'player_hurt' ) then"
            },
            "SLine": {
                "1": "if (event:GetName() == 'player_hurt' ) then"
            }
        },
        {
            "Title": "Local localplayer = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "361": "local localPlayer = entities.GetLocalPlayer();"
            },
            "SLine": {
                "1": "local localPlayer = entities.GetLocalPlayer();"
            }
        },
        {
            "Title": "Victim = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "362": "victim = entities.GetByUserID(event:GetInt(\"userid\"))",
                "3860": "local victim = entities.GetByUserID(event:GetInt(\"userid\"))"
            },
            "SLine": {
                "1": "victim = entities.GetByUserID(event:GetInt(\"userid\"))"
            }
        },
        {
            "Title": "Local health = event:getint",
            "subTitle": "",
            "dLine": {
                "363": "local health = event:GetInt(\"health\")"
            },
            "SLine": {
                "1": "local health = event:GetInt(\"health\")"
            }
        },
        {
            "Title": "Local attacker = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "364": "local attacker = entities.GetByUserID(event:GetInt(\"attacker\"))"
            },
            "SLine": {
                "1": "local attacker = entities.GetByUserID(event:GetInt(\"attacker\"))"
            }
        },
        {
            "Title": "Local damage = event:getint",
            "subTitle": "",
            "dLine": {
                "365": "local damage = event:GetInt(\"damageamount\")"
            },
            "SLine": {
                "1": "local damage = event:GetInt(\"damageamount\")"
            }
        },
        {
            "Title": "Local weaponid = event:getint",
            "subTitle": "",
            "dLine": {
                "366": "local weaponid = event:GetInt(\"weaponid\")"
            },
            "SLine": {
                "1": "local weaponid = event:GetInt(\"weaponid\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "367": "if (attacker == nil or localPlayer:GetIndex() ~= attacker:GetIndex()) or victim:GetIndex() == localPlayer:GetIndex() then"
            },
            "SLine": {
                "1": "if (attacker == nil or localPlayer:GetIndex() ~= attacker:GetIndex()) or victim:GetIndex() == localPlayer:GetIndex() then"
            }
        },
        {
            "Title": "Hitboxv = victim:hitboxsurroundingbox",
            "subTitle": "",
            "dLine": {
                "371": "hitboxv = victim:HitboxSurroundingBox()"
            },
            "SLine": {
                "1": "hitboxv = victim:HitboxSurroundingBox()"
            }
        },
        {
            "Title": "Time = globals.realtime",
            "subTitle": "",
            "dLine": {
                "372": "time = globals.RealTime()",
                "2613": "time = globals.RealTime() + delay,"
            },
            "SLine": {
                "1": "time = globals.RealTime()"
            }
        },
        {
            "Title": "Hitboxv = victim:gethitboxes",
            "subTitle": "",
            "dLine": {
                "373": "hitboxv = victim:GetHitboxes()"
            },
            "SLine": {
                "1": "hitboxv = victim:GetHitboxes()"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "375": "callbacks.Register(\"FireGameEvent\", \"damageDraw\", damage)"
            },
            "SLine": {
                "1": "callbacks.Register(\"FireGameEvent\", \"damageDraw\", damage)"
            }
        },
        {
            "Title": "Local function hitboxdraw",
            "subTitle": "",
            "dLine": {
                "376": "local function HitboxDraw()"
            },
            "SLine": {
                "1": "local function HitboxDraw()"
            }
        },
        {
            "Title": "If sec + time >= globals.realtime",
            "subTitle": "",
            "dLine": {
                "377": "if sec + time >= globals.RealTime() then"
            },
            "SLine": {
                "1": "if sec + time >= globals.RealTime() then"
            }
        },
        {
            "Title": "Local poof = math.floor",
            "subTitle": "",
            "dLine": {
                "378": "local poof = math.floor( 255 / sec)"
            },
            "SLine": {
                "1": "local poof = math.floor( 255 / sec)"
            }
        },
        {
            "Title": "Local ac = math.floor",
            "subTitle": "",
            "dLine": {
                "379": "local ac = math.floor(255 + ((time - globals.RealTime()) * poof))"
            },
            "SLine": {
                "1": "local ac = math.floor(255 + ((time - globals.RealTime()) * poof))"
            }
        },
        {
            "Title": "Local xa, ya, za = min:unpack",
            "subTitle": "",
            "dLine": {
                "388": "local xa, ya, za = min:Unpack()"
            },
            "SLine": {
                "1": "local xa, ya, za = min:Unpack()"
            }
        },
        {
            "Title": "Local xb, yb, zb = max:unpack",
            "subTitle": "",
            "dLine": {
                "389": "local xb, yb, zb = max:Unpack()"
            },
            "SLine": {
                "1": "local xb, yb, zb = max:Unpack()"
            }
        },
        {
            "Title": "Mool = vector3",
            "subTitle": "",
            "dLine": {
                "390": "mool = Vector3(xb, ya, za)"
            },
            "SLine": {
                "1": "mool = Vector3(xb, ya, za)"
            }
        },
        {
            "Title": "Moal = vector3",
            "subTitle": "",
            "dLine": {
                "391": "moal = Vector3(xb, yb, za)"
            },
            "SLine": {
                "1": "moal = Vector3(xb, yb, za)"
            }
        },
        {
            "Title": "Moul = vector3",
            "subTitle": "",
            "dLine": {
                "392": "moul = Vector3(xa, yb, za)"
            },
            "SLine": {
                "1": "moul = Vector3(xa, yb, za)"
            }
        },
        {
            "Title": "Moql = vector3",
            "subTitle": "",
            "dLine": {
                "393": "moql = Vector3(xb, ya, zb)"
            },
            "SLine": {
                "1": "moql = Vector3(xb, ya, zb)"
            }
        },
        {
            "Title": "Morl = vector3",
            "subTitle": "",
            "dLine": {
                "394": "morl = Vector3(xa, yb, zb)"
            },
            "SLine": {
                "1": "morl = Vector3(xa, yb, zb)"
            }
        },
        {
            "Title": "Mozl = vector3",
            "subTitle": "",
            "dLine": {
                "395": "mozl = Vector3(xa, ya, zb)"
            },
            "SLine": {
                "1": "mozl = Vector3(xa, ya, zb)"
            }
        },
        {
            "Title": "Mool = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "396": "mool = client.WorldToScreen( mool )"
            },
            "SLine": {
                "1": "mool = client.WorldToScreen( mool )"
            }
        },
        {
            "Title": "Moal = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "397": "moal = client.WorldToScreen( moal )"
            },
            "SLine": {
                "1": "moal = client.WorldToScreen( moal )"
            }
        },
        {
            "Title": "Moul = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "398": "moul = client.WorldToScreen( moul )"
            },
            "SLine": {
                "1": "moul = client.WorldToScreen( moul )"
            }
        },
        {
            "Title": "Moql = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "399": "moql = client.WorldToScreen( moql )"
            },
            "SLine": {
                "1": "moql = client.WorldToScreen( moql )"
            }
        },
        {
            "Title": "Mozl = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "400": "mozl = client.WorldToScreen( mozl )"
            },
            "SLine": {
                "1": "mozl = client.WorldToScreen( mozl )"
            }
        },
        {
            "Title": "Morl = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "401": "morl = client.WorldToScreen( morl )"
            },
            "SLine": {
                "1": "morl = client.WorldToScreen( morl )"
            }
        },
        {
            "Title": "Min = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "402": "min = client.WorldToScreen( min )"
            },
            "SLine": {
                "1": "min = client.WorldToScreen( min )"
            }
        },
        {
            "Title": "Max = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "403": "max = client.WorldToScreen( max )"
            },
            "SLine": {
                "1": "max = client.WorldToScreen( max )"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "405": "draw.Color(255, 255, 255, ac)"
            },
            "SLine": {
                "1": "draw.Color(255, 255, 255, ac)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "406": "draw.Line(mozl[1], mozl[2], morl[1], morl[2])"
            },
            "SLine": {
                "1": "draw.Line(mozl[1], mozl[2], morl[1], morl[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "407": "draw.Line(mozl[1], mozl[2], moql[1], moql[2])"
            },
            "SLine": {
                "1": "draw.Line(mozl[1], mozl[2], moql[1], moql[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "408": "draw.Line(morl[1], morl[2], max[1], max[2])"
            },
            "SLine": {
                "1": "draw.Line(morl[1], morl[2], max[1], max[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "409": "draw.Line(moql[1], moql[2], max[1], max[2])"
            },
            "SLine": {
                "1": "draw.Line(moql[1], moql[2], max[1], max[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "410": "draw.Line(min[1], min[2], mool[1], mool[2])"
            },
            "SLine": {
                "1": "draw.Line(min[1], min[2], mool[1], mool[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "411": "draw.Line(min[1], min[2], moul[1], moul[2])"
            },
            "SLine": {
                "1": "draw.Line(min[1], min[2], moul[1], moul[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "412": "draw.Line(mool[1], mool[2], moal[1], moal[2])"
            },
            "SLine": {
                "1": "draw.Line(mool[1], mool[2], moal[1], moal[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "413": "draw.Line(moul[1], moul[2], moal[1], moal[2])"
            },
            "SLine": {
                "1": "draw.Line(moul[1], moul[2], moal[1], moal[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "414": "draw.Line(min[1], min[2], mozl[1], mozl[2])"
            },
            "SLine": {
                "1": "draw.Line(min[1], min[2], mozl[1], mozl[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "415": "draw.Line(moal[1], moal[2], max[1], max[2])"
            },
            "SLine": {
                "1": "draw.Line(moal[1], moal[2], max[1], max[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "416": "draw.Line(moul[1], moul[2], morl[1], morl[2])"
            },
            "SLine": {
                "1": "draw.Line(moul[1], moul[2], morl[1], morl[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "417": "draw.Line(mool[1], mool[2], moql[1], moql[2])"
            },
            "SLine": {
                "1": "draw.Line(mool[1], mool[2], moql[1], moql[2])"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "418": "callbacks.Register( \"Draw\", HitboxDraw )"
            },
            "SLine": {
                "1": "callbacks.Register( \"Draw\", HitboxDraw )"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "420": "client.Command(\"cyoa_pda_open \" .. ('0'), true)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open \" .. ('0'), true)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "422": "client.Command(\"cyoa_pda_open \" .. ('1'), true)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open \" .. ('1'), true)"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "423": "client.ChatPrintf(\"works\")"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"works\")"
            }
        },
        {
            "Title": "Elseif not plocal:incond",
            "subTitle": "",
            "dLine": {
                "424": "elseif not pLocal:InCond(1) then"
            },
            "SLine": {
                "1": "elseif not pLocal:InCond(1) then"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "426": "local menu = MenuLib.Create(\"Swing Prediction\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Swing Prediction\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "427": "client.SetConVar(\"cl_vWeapon_sway_interp\",              0)"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_vWeapon_sway_interp\",              0)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "428": "client.SetConVar(\"cl_jiggle_bone_framerate_cutoff\", 0)"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_jiggle_bone_framerate_cutoff\", 0)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "429": "client.SetConVar(\"cl_bobcycle\",                     10000)"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_bobcycle\",                     10000)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "430": "client.SetConVar(\"sv_cheats\", 1)"
            },
            "SLine": {
                "1": "client.SetConVar(\"sv_cheats\", 1)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "431": "client.SetConVar(\"mp_disable_respawn_times\", 1)"
            },
            "SLine": {
                "1": "client.SetConVar(\"mp_disable_respawn_times\", 1)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "432": "client.SetConVar(\"mp_respawnwavetime\", -1)"
            },
            "SLine": {
                "1": "client.SetConVar(\"mp_respawnwavetime\", -1)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "433": "client.SetConVar(\"mp_teams_unbalance_limit\", 1000)"
            },
            "SLine": {
                "1": "client.SetConVar(\"mp_teams_unbalance_limit\", 1000)"
            }
        },
        {
            "Title": "Local swingpred     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "435": "local Swingpred     = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local Swingpred     = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local rangepred     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "436": "local rangepred     = menu:AddComponent(MenuLib.Checkbox(\"range prediction\", true))"
            },
            "SLine": {
                "1": "local rangepred     = menu:AddComponent(MenuLib.Checkbox(\"range prediction\", true))"
            }
        },
        {
            "Title": "Local mtime         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "437": "local mtime         = menu:AddComponent(MenuLib.Slider(\"attack distance\", 200 ,275 , 240 ))"
            },
            "SLine": {
                "1": "local mtime         = menu:AddComponent(MenuLib.Slider(\"attack distance\", 200 ,275 , 240 ))"
            }
        },
        {
            "Title": "Local mautorefill   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "438": "local mAutoRefill   = menu:AddComponent(MenuLib.Checkbox(\"Crit Refill\", true))"
            },
            "SLine": {
                "1": "local mAutoRefill   = menu:AddComponent(MenuLib.Checkbox(\"Crit Refill\", true))"
            }
        },
        {
            "Title": "Local mautogarden   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "439": "local mAutoGarden   = menu:AddComponent(MenuLib.Checkbox(\"Troldier assist\", false))"
            },
            "SLine": {
                "1": "local mAutoGarden   = menu:AddComponent(MenuLib.Checkbox(\"Troldier assist\", false))"
            }
        },
        {
            "Title": "Local mmvisuals     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "440": "local mmVisuals     = menu:AddComponent(MenuLib.Checkbox(\"Enable Visuals\", false))"
            },
            "SLine": {
                "1": "local mmVisuals     = menu:AddComponent(MenuLib.Checkbox(\"Enable Visuals\", false))"
            }
        },
        {
            "Title": "Local mvisuals = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "444": "local mVisuals = menu:AddComponent(MenuLib.MultiCombo(\"^Visuals\", Visuals, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mVisuals = menu:AddComponent(MenuLib.MultiCombo(\"^Visuals\", Visuals, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local mcolor_close  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "445": "local mcolor_close  = menu:AddComponent(MenuLib.Colorpicker(\"Color\", color))"
            },
            "SLine": {
                "1": "local mcolor_close  = menu:AddComponent(MenuLib.Colorpicker(\"Color\", color))"
            }
        },
        {
            "Title": "Local mtheightt = getviewheight",
            "subTitle": "",
            "dLine": {
                "447": "local mTHeightt = GetViewHeight()"
            },
            "SLine": {
                "1": "local mTHeightt = GetViewHeight()"
            }
        },
        {
            "Title": "Local hitbox_min = vector3",
            "subTitle": "",
            "dLine": {
                "451": "local hitbox_min = Vector3(14, 14, 0)"
            },
            "SLine": {
                "1": "local hitbox_min = Vector3(14, 14, 0)"
            }
        },
        {
            "Title": "Local hitbox_max = vector3",
            "subTitle": "",
            "dLine": {
                "452": "local hitbox_max = Vector3(-14, -14, 85)"
            },
            "SLine": {
                "1": "local hitbox_max = Vector3(-14, -14, 85)"
            }
        },
        {
            "Title": "Function updatelocals",
            "subTitle": "",
            "dLine": {
                "463": "function UpdateLocals()"
            },
            "SLine": {
                "1": "function UpdateLocals()"
            }
        },
        {
            "Title": "Local viewoffset = vector3",
            "subTitle": "",
            "dLine": {
                "464": "local viewOffset = vector3(0, 0, 75)"
            },
            "SLine": {
                "1": "local viewOffset = vector3(0, 0, 75)"
            }
        },
        {
            "Title": "Local adjustedheight = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "465": "local adjustedHeight = pLocal:GetAbsOrigin() + viewOffset"
            },
            "SLine": {
                "1": "local adjustedHeight = pLocal:GetAbsOrigin() + viewOffset"
            }
        },
        {
            "Title": "Viewheight = ",
            "subTitle": "",
            "dLine": {
                "466": "viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()",
                "3717": "local viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()"
            },
            "SLine": {
                "1": "viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()"
            }
        },
        {
            "Title": "Local vheight = vector3",
            "subTitle": "",
            "dLine": {
                "467": "local Vheight = Vector3(0, 0, viewheight)"
            },
            "SLine": {
                "1": "local Vheight = Vector3(0, 0, viewheight)"
            }
        },
        {
            "Title": "Plocalorigin = ",
            "subTitle": "",
            "dLine": {
                "468": "pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)",
                "3718": "local pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)"
            },
            "SLine": {
                "1": "pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)"
            }
        },
        {
            "Title": "Function getclosestenemy",
            "subTitle": "",
            "dLine": {
                "470": "function GetClosestEnemy(pLocal, pLocalOrigin)"
            },
            "SLine": {
                "1": "function GetClosestEnemy(pLocal, pLocalOrigin)"
            }
        },
        {
            "Title": "For _, vplayer in ipairs",
            "subTitle": "",
            "dLine": {
                "474": "for _, vPlayer in ipairs(players) do"
            },
            "SLine": {
                "1": "for _, vPlayer in ipairs(players) do"
            }
        },
        {
            "Title": "If vplayer ~= nil and vplayer:isalive",
            "subTitle": "",
            "dLine": {
                "475": "if vPlayer ~= nil and vPlayer:IsAlive() and vPlayer:GetTeamNumber() ~= pLocal:GetTeamNumber() then"
            },
            "SLine": {
                "1": "if vPlayer ~= nil and vPlayer:IsAlive() and vPlayer:GetTeamNumber() ~= pLocal:GetTeamNumber() then"
            }
        },
        {
            "Title": "Local vplayerorigin = vplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "476": "local vPlayerOrigin = vPlayer:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local vPlayerOrigin = vPlayer:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local distancex = math.abs",
            "subTitle": "",
            "dLine": {
                "477": "local distanceX = math.abs(vPlayerOrigin.x - pLocalOrigin.x)"
            },
            "SLine": {
                "1": "local distanceX = math.abs(vPlayerOrigin.x - pLocalOrigin.x)"
            }
        },
        {
            "Title": "Local distancey = math.abs",
            "subTitle": "",
            "dLine": {
                "478": "local distanceY = math.abs(vPlayerOrigin.y - pLocalOrigin.y)"
            },
            "SLine": {
                "1": "local distanceY = math.abs(vPlayerOrigin.y - pLocalOrigin.y)"
            }
        },
        {
            "Title": "Local distancez = math.abs",
            "subTitle": "",
            "dLine": {
                "479": "local distanceZ = math.abs(vPlayerOrigin.z - pLocalOrigin.z)"
            },
            "SLine": {
                "1": "local distanceZ = math.abs(vPlayerOrigin.z - pLocalOrigin.z)"
            }
        },
        {
            "Title": "Local distance = math.sqrt",
            "subTitle": "",
            "dLine": {
                "480": "local distance = math.sqrt(distanceX * distanceX + distanceY * distanceY + distanceZ * distanceZ)"
            },
            "SLine": {
                "1": "local distance = math.sqrt(distanceX * distanceX + distanceY * distanceY + distanceZ * distanceZ)"
            }
        },
        {
            "Title": "Function gettriggerboxmin",
            "subTitle": "",
            "dLine": {
                "490": "function GetTriggerboxMin(swingrange, vPlayerFuture)"
            },
            "SLine": {
                "1": "function GetTriggerboxMin(swingrange, vPlayerFuture)"
            }
        },
        {
            "Title": "Local vhitbox_min = vector3",
            "subTitle": "",
            "dLine": {
                "494": "local vhitbox_min = Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)"
            },
            "SLine": {
                "1": "local vhitbox_min = Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)"
            }
        },
        {
            "Title": "Function gettriggerboxmax",
            "subTitle": "",
            "dLine": {
                "497": "function GetTriggerboxMax(swingrange, vPlayerFuture)"
            },
            "SLine": {
                "1": "function GetTriggerboxMax(swingrange, vPlayerFuture)"
            }
        },
        {
            "Title": "Local vhitbox_max = vector3",
            "subTitle": "",
            "dLine": {
                "499": "local vhitbox_max = Vector3(vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)"
            },
            "SLine": {
                "1": "local vhitbox_max = Vector3(vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)"
            }
        },
        {
            "Title": "Function iswithinhitbox",
            "subTitle": "",
            "dLine": {
                "502": "function isWithinHitbox(hitboxMinTrigger, hitboxMaxTrigger, pLocalFuture, vPlayerFuture)"
            },
            "SLine": {
                "1": "function isWithinHitbox(hitboxMinTrigger, hitboxMaxTrigger, pLocalFuture, vPlayerFuture)"
            }
        },
        {
            "Title": "Local minx, miny, minz = hitboxmintrigger:unpack",
            "subTitle": "",
            "dLine": {
                "504": "local minX, minY, minZ = hitboxMinTrigger:Unpack()"
            },
            "SLine": {
                "1": "local minX, minY, minZ = hitboxMinTrigger:Unpack()"
            }
        },
        {
            "Title": "Local maxx, maxy, maxz = hitboxmaxtrigger:unpack",
            "subTitle": "",
            "dLine": {
                "505": "local maxX, maxY, maxZ = hitboxMaxTrigger:Unpack()"
            },
            "SLine": {
                "1": "local maxX, maxY, maxZ = hitboxMaxTrigger:Unpack()"
            }
        },
        {
            "Title": "Plocal = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "85": "local pLocal = entities.GetLocalPlayer()",
                "509": "pLocal = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "pLocal = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "If not swingpred:getvalue",
            "subTitle": "",
            "dLine": {
                "510": "if not Swingpred:GetValue() then goto continue end"
            },
            "SLine": {
                "1": "if not Swingpred:GetValue() then goto continue end"
            }
        },
        {
            "Title": "Plocalclass = plocal:getpropint",
            "subTitle": "",
            "dLine": {
                "512": "pLocalClass = pLocal:GetPropInt(\"m_iClass\")",
                "3719": "local pLocalClass = pLocal:GetPropInt(\"m_iClass\")"
            },
            "SLine": {
                "1": "pLocalClass = pLocal:GetPropInt(\"m_iClass\")"
            }
        },
        {
            "Title": "Swingrange = pweapon:getswingrange",
            "subTitle": "",
            "dLine": {
                "515": "swingrange = pWeapon:GetSwingRange()",
                "3715": "local swingrange = pWeapon:GetSwingRange()"
            },
            "SLine": {
                "1": "swingrange = pWeapon:GetSwingRange()"
            }
        },
        {
            "Title": "Local flags = plocal:getpropint",
            "subTitle": "",
            "dLine": {
                "516": "local flags = pLocal:GetPropInt( \"m_fFlags\" )"
            },
            "SLine": {
                "1": "local flags = pLocal:GetPropInt( \"m_fFlags\" )"
            }
        },
        {
            "Title": "Local time = mtime:getvalue",
            "subTitle": "",
            "dLine": {
                "517": "local time = mtime:GetValue() * 0.001"
            },
            "SLine": {
                "1": "local time = mtime:GetValue() * 0.001"
            }
        },
        {
            "Title": "If mautogarden:getvalue",
            "subTitle": "",
            "dLine": {
                "518": "if mAutoGarden:GetValue() == true then"
            },
            "SLine": {
                "1": "if mAutoGarden:GetValue() == true then"
            }
        },
        {
            "Title": "Local downheight = vector3",
            "subTitle": "",
            "dLine": {
                "521": "local downheight = Vector3(0, 0, -250)"
            },
            "SLine": {
                "1": "local downheight = Vector3(0, 0, -250)"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "522": "if input.IsButtonDown( KEY_SPACE ) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown( KEY_SPACE ) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "528": "client.Command(state, true)"
            },
            "SLine": {
                "1": "client.Command(state, true)"
            }
        },
        {
            "Title": "Flags = player:getpropint",
            "subTitle": "",
            "dLine": {
                "529": "flags = player:GetPropInt( \"m_fFlags\" )"
            },
            "SLine": {
                "1": "flags = player:GetPropInt( \"m_fFlags\" )"
            }
        },
        {
            "Title": "Pcmd:setbuttons",
            "subTitle": "",
            "dLine": {
                "531": "pCmd:SetButtons(pCmd.buttons | IN_DUCK)"
            },
            "SLine": {
                "1": "pCmd:SetButtons(pCmd.buttons | IN_DUCK)"
            }
        },
        {
            "Title": "Pcmd:setbuttons",
            "subTitle": "",
            "dLine": {
                "532": "pCmd:SetButtons(pCmd.buttons & (~IN_DUCK))"
            },
            "SLine": {
                "1": "pCmd:SetButtons(pCmd.buttons & (~IN_DUCK))"
            }
        },
        {
            "Title": "Ismelee = pweapon:ismeleeweapon",
            "subTitle": "",
            "dLine": {
                "535": "isMelee = pWeapon:IsMeleeWeapon()"
            },
            "SLine": {
                "1": "isMelee = pWeapon:IsMeleeWeapon()"
            }
        },
        {
            "Title": "If plocal == nil then plocalorigin = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "537": "if pLocal == nil then pLocalOrigin = pLocal:GetAbsOrigin() return pLocalOrigin end"
            },
            "SLine": {
                "1": "if pLocal == nil then pLocalOrigin = pLocal:GetAbsOrigin() return pLocalOrigin end"
            }
        },
        {
            "Title": "Local viewoffset = vector3",
            "subTitle": "",
            "dLine": {
                "538": "local viewOffset = Vector3(0, 0, 70)"
            },
            "SLine": {
                "1": "local viewOffset = Vector3(0, 0, 70)"
            }
        },
        {
            "Title": "Closestplayer = getclosestenemy",
            "subTitle": "",
            "dLine": {
                "539": "closestPlayer = GetClosestEnemy(pLocal, pLocalOrigin, players)"
            },
            "SLine": {
                "1": "closestPlayer = GetClosestEnemy(pLocal, pLocalOrigin, players)"
            }
        },
        {
            "Title": "Vplayerorigin = closestplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "541": "vPlayerOrigin = closestPlayer:GetAbsOrigin()"
            },
            "SLine": {
                "1": "vPlayerOrigin = closestPlayer:GetAbsOrigin()"
            }
        },
        {
            "Title": "Vdistance = ",
            "subTitle": "",
            "dLine": {
                "542": "vdistance = (vPlayerOrigin - pLocalOrigin):Length()"
            },
            "SLine": {
                "1": "vdistance = (vPlayerOrigin - pLocalOrigin):Length()"
            }
        },
        {
            "Title": "Vplayerfuture = targetpositionprediction",
            "subTitle": "",
            "dLine": {
                "543": "vPlayerFuture = TargetPositionPrediction(vPlayerOrigin, tickRate, time, closestPlayer)"
            },
            "SLine": {
                "1": "vPlayerFuture = TargetPositionPrediction(vPlayerOrigin, tickRate, time, closestPlayer)"
            }
        },
        {
            "Title": "Plocalfuture =  targetpositionprediction",
            "subTitle": "",
            "dLine": {
                "544": "pLocalFuture =  TargetPositionPrediction(pLocalOrigin, tickRate, time, pLocal)"
            },
            "SLine": {
                "1": "pLocalFuture =  TargetPositionPrediction(pLocalOrigin, tickRate, time, pLocal)"
            }
        },
        {
            "Title": "Fdistance = ",
            "subTitle": "",
            "dLine": {
                "545": "fDistance = (vPlayerFuture - pLocalFuture):Length()"
            },
            "SLine": {
                "1": "fDistance = (vPlayerFuture - pLocalFuture):Length()"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "548": "if (pLocal:InCond(17)) and pLocalClass == 4 or pLocalClass == 8 then"
            },
            "SLine": {
                "1": "if (pLocal:InCond(17)) and pLocalClass == 4 or pLocalClass == 8 then"
            }
        },
        {
            "Title": "Pcmd:setbuttons",
            "subTitle": "",
            "dLine": {
                "553": "pCmd:SetButtons(pCmd:GetButtons() | IN_ATTACK)"
            },
            "SLine": {
                "1": "pCmd:SetButtons(pCmd:GetButtons() | IN_ATTACK)"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "555": "local trace = engine.TraceLine(pLocalFuture, vPlayerFuture, MASK_SHOT_HULL)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(pLocalFuture, vPlayerFuture, MASK_SHOT_HULL)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "556": "if (trace.entity:GetClass() == \"CTFPlayer\") and (trace.entity:GetTeamNumber() ~= pLocal:GetTeamNumber()) then"
            },
            "SLine": {
                "1": "if (trace.entity:GetClass() == \"CTFPlayer\") and (trace.entity:GetTeamNumber() ~= pLocal:GetTeamNumber()) then"
            }
        },
        {
            "Title": "Can_attack = iswithinhitbox",
            "subTitle": "",
            "dLine": {
                "557": "can_attack = isWithinHitbox(GetTriggerboxMin(swingrange, vPlayerFuture), GetTriggerboxMax(swingrange, vPlayerFuture), pLocalFuture, vPlayerFuture)"
            },
            "SLine": {
                "1": "can_attack = isWithinHitbox(GetTriggerboxMin(swingrange, vPlayerFuture), GetTriggerboxMax(swingrange, vPlayerFuture), pLocalFuture, vPlayerFuture)"
            }
        },
        {
            "Title": "Warp.triggerwarp",
            "subTitle": "",
            "dLine": {
                "562": "warp.TriggerWarp()"
            },
            "SLine": {
                "1": "warp.TriggerWarp()"
            }
        },
        {
            "Title": "Elseif ismelee and not stop and pweapon:getcrittokenbucket",
            "subTitle": "",
            "dLine": {
                "564": "elseif isMelee and not stop and pWeapon:GetCritTokenBucket() <= 27 and mAutoRefill:GetValue() == true then"
            },
            "SLine": {
                "1": "elseif isMelee and not stop and pWeapon:GetCritTokenBucket() <= 27 and mAutoRefill:GetValue() == true then"
            }
        },
        {
            "Title": "Local function dodraw",
            "subTitle": "",
            "dLine": {
                "569": "local function doDraw()"
            },
            "SLine": {
                "1": "local function doDraw()"
            }
        },
        {
            "Title": "If not mmvisuals:getvalue",
            "subTitle": "",
            "dLine": {
                "572": "if not mmVisuals:GetValue() then return end"
            },
            "SLine": {
                "1": "if not mmVisuals:GetValue() then return end"
            }
        },
        {
            "Title": "Screenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "575": "screenPos = client.WorldToScreen(pLocalFuture)"
            },
            "SLine": {
                "1": "screenPos = client.WorldToScreen(pLocalFuture)"
            }
        },
        {
            "Title": "Screenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "576": "screenPos = client.WorldToScreen(vPlayerTargetPos)"
            },
            "SLine": {
                "1": "screenPos = client.WorldToScreen(vPlayerTargetPos)"
            }
        },
        {
            "Title": "Local screenpos1 = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "577": "local screenPos1 = client.WorldToScreen(vPlayerOrigin)"
            },
            "SLine": {
                "1": "local screenPos1 = client.WorldToScreen(vPlayerOrigin)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "579": "draw.Line( screenPos1[1], screenPos1[2], screenPos[1], screenPos[2])"
            },
            "SLine": {
                "1": "draw.Line( screenPos1[1], screenPos1[2], screenPos[1], screenPos[2])"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "582": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "583": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "584": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "585": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, -vhitbox_width_trigger, -vhitbox_Height_trigger_bottom)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "586": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "587": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, vhitbox_width_trigger, vhitbox_Height_trigger)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "588": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, vhitbox_Height_trigger)),"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(-vhitbox_width_trigger, -vhitbox_width_trigger, vhitbox_Height_trigger)),"
            }
        },
        {
            "Title": "Client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "589": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, -vhitbox_width_trigger, vhitbox_Height_trigger))"
            },
            "SLine": {
                "1": "client.WorldToScreen(vPlayerTargetPos + Vector3(vhitbox_width_trigger, -vhitbox_width_trigger, vhitbox_Height_trigger))"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "591": "draw.Line(vertices[1][1], vertices[1][2], vertices[2][1], vertices[2][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[1][1], vertices[1][2], vertices[2][1], vertices[2][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "592": "draw.Line(vertices[2][1], vertices[2][2], vertices[3][1], vertices[3][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[2][1], vertices[2][2], vertices[3][1], vertices[3][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "593": "draw.Line(vertices[3][1], vertices[3][2], vertices[4][1], vertices[4][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[3][1], vertices[3][2], vertices[4][1], vertices[4][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "594": "draw.Line(vertices[4][1], vertices[4][2], vertices[1][1], vertices[1][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[4][1], vertices[4][2], vertices[1][1], vertices[1][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "595": "draw.Line(vertices[5][1], vertices[5][2], vertices[6][1], vertices[6][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[5][1], vertices[5][2], vertices[6][1], vertices[6][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "596": "draw.Line(vertices[6][1], vertices[6][2], vertices[7][1], vertices[7][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[6][1], vertices[6][2], vertices[7][1], vertices[7][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "597": "draw.Line(vertices[7][1], vertices[7][2], vertices[8][1], vertices[8][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[7][1], vertices[7][2], vertices[8][1], vertices[8][2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "598": "draw.Line(vertices[8][1], vertices[8][2], vertices[5][1], vertices[5][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[8][1], vertices[8][2], vertices[5][1], vertices[5][2])"
            }
        },
        {
            "Title": "If vertices[1] and vertices[5] then draw.line",
            "subTitle": "",
            "dLine": {
                "599": "if vertices[1] and vertices[5] then draw.Line(vertices[1][1], vertices[1][2], vertices[5][1], vertices[5][2]) end"
            },
            "SLine": {
                "1": "if vertices[1] and vertices[5] then draw.Line(vertices[1][1], vertices[1][2], vertices[5][1], vertices[5][2]) end"
            }
        },
        {
            "Title": "If vertices[2] and vertices[6] then draw.line",
            "subTitle": "",
            "dLine": {
                "600": "if vertices[2] and vertices[6] then draw.Line(vertices[2][1], vertices[2][2], vertices[6][1], vertices[6][2]) end"
            },
            "SLine": {
                "1": "if vertices[2] and vertices[6] then draw.Line(vertices[2][1], vertices[2][2], vertices[6][1], vertices[6][2]) end"
            }
        },
        {
            "Title": "If vertices[3] and vertices[7] then draw.line",
            "subTitle": "",
            "dLine": {
                "601": "if vertices[3] and vertices[7] then draw.Line(vertices[3][1], vertices[3][2], vertices[7][1], vertices[7][2]) end"
            },
            "SLine": {
                "1": "if vertices[3] and vertices[7] then draw.Line(vertices[3][1], vertices[3][2], vertices[7][1], vertices[7][2]) end"
            }
        },
        {
            "Title": "If vertices[4] and vertices[8] then draw.line",
            "subTitle": "",
            "dLine": {
                "602": "if vertices[4] and vertices[8] then draw.Line(vertices[4][1], vertices[4][2], vertices[8][1], vertices[8][2])"
            },
            "SLine": {
                "1": "if vertices[4] and vertices[8] then draw.Line(vertices[4][1], vertices[4][2], vertices[8][1], vertices[8][2])"
            }
        },
        {
            "Title": "If mvisuals:isselected",
            "subTitle": "",
            "dLine": {
                "603": "if mVisuals:IsSelected(\"Draw Trail\") then"
            },
            "SLine": {
                "1": "if mVisuals:IsSelected(\"Draw Trail\") then"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "607": "table.insert(predictedPositions, 1, pLocalFuture)"
            },
            "SLine": {
                "1": "table.insert(predictedPositions, 1, pLocalFuture)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "609": "table.remove(predictedPositions, maxPositions + 1)"
            },
            "SLine": {
                "1": "table.remove(predictedPositions, maxPositions + 1)"
            }
        },
        {
            "Title": "For i = 1, math.min",
            "subTitle": "",
            "dLine": {
                "610": "for i = 1, math.min(#predictedPositions - 1, maxPositions - 1) do"
            },
            "SLine": {
                "1": "for i = 1, math.min(#predictedPositions - 1, maxPositions - 1) do"
            }
        },
        {
            "Title": "Local screenpos1 = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "613": "local screenPos1 = client.WorldToScreen(pos1)"
            },
            "SLine": {
                "1": "local screenPos1 = client.WorldToScreen(pos1)"
            }
        },
        {
            "Title": "Local screenpos2 = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "614": "local screenPos2 = client.WorldToScreen(pos2)"
            },
            "SLine": {
                "1": "local screenPos2 = client.WorldToScreen(pos2)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "616": "draw.Line(screenPos1[1], screenPos1[2], screenPos2[1], screenPos2[2])"
            },
            "SLine": {
                "1": "draw.Line(screenPos1[1], screenPos1[2], screenPos2[1], screenPos2[2])"
            }
        },
        {
            "Title": "If mvisuals:isselected",
            "subTitle": "",
            "dLine": {
                "617": "if mVisuals:IsSelected(\"Range Circle\") == false then return end"
            },
            "SLine": {
                "1": "if mVisuals:IsSelected(\"Range Circle\") == false then return end"
            }
        },
        {
            "Title": "Local selected_color = mcolor_close:getcolor",
            "subTitle": "",
            "dLine": {
                "622": "local selected_color = mcolor_close:GetColor()"
            },
            "SLine": {
                "1": "local selected_color = mcolor_close:GetColor()"
            }
        },
        {
            "Title": "Local selected_color1 = mcolor_close:getcolor",
            "subTitle": "",
            "dLine": {
                "624": "local selected_color1 = mcolor_close:GetColor()"
            },
            "SLine": {
                "1": "local selected_color1 = mcolor_close:GetColor()"
            }
        },
        {
            "Title": "Local angle = math.rad",
            "subTitle": "",
            "dLine": {
                "633": "local angle = math.rad(i * (360 / segments))"
            },
            "SLine": {
                "1": "local angle = math.rad(i * (360 / segments))"
            }
        },
        {
            "Title": "Local direction = vector3",
            "subTitle": "",
            "dLine": {
                "634": "local direction = Vector3(math.cos(angle), math.sin(angle), 0)"
            },
            "SLine": {
                "1": "local direction = Vector3(math.cos(angle), math.sin(angle), 0)"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "635": "local trace = engine.TraceLine(vPlayerFuture, center + direction * radius, MASK_SHOT_BRUSHONLY)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(vPlayerFuture, center + direction * radius, MASK_SHOT_BRUSHONLY)"
            }
        },
        {
            "Title": "Local x = center.x + math.cos",
            "subTitle": "",
            "dLine": {
                "637": "local x = center.x + math.cos(angle) * distance"
            },
            "SLine": {
                "1": "local x = center.x + math.cos(angle) * distance"
            }
        },
        {
            "Title": "Local y = center.y + math.sin",
            "subTitle": "",
            "dLine": {
                "638": "local y = center.y + math.sin(angle) * distance"
            },
            "SLine": {
                "1": "local y = center.y + math.sin(angle) * distance"
            }
        },
        {
            "Title": "Vertices[i] = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "647": "vertices[i] = client.WorldToScreen(Vector3(x, y, z))"
            },
            "SLine": {
                "1": "vertices[i] = client.WorldToScreen(Vector3(x, y, z))"
            }
        },
        {
            "Title": "For key, value in pairs",
            "subTitle": "",
            "dLine": {
                "654": "for key, value in pairs(color_close) do"
            },
            "SLine": {
                "1": "for key, value in pairs(color_close) do"
            }
        },
        {
            "Title": "Color[key] = math.floor",
            "subTitle": "",
            "dLine": {
                "655": "color[key] = math.floor((1 - t) * value + t * color_far[key])"
            },
            "SLine": {
                "1": "color[key] = math.floor((1 - t) * value + t * color_far[key])"
            }
        },
        {
            "Title": "Local top_vertex = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "658": "local top_vertex = client.WorldToScreen(Vector3(center.x, center.y, center.z + top_height))"
            },
            "SLine": {
                "1": "local top_vertex = client.WorldToScreen(Vector3(center.x, center.y, center.z + top_height))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "662": "draw.Color(colors[i].r, colors[i].g, colors[i].b, colors[i].a)"
            },
            "SLine": {
                "1": "draw.Color(colors[i].r, colors[i].g, colors[i].b, colors[i].a)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "663": "draw.Line(vertices[i][1], vertices[i][2], vertices[j][1], vertices[j][2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[i][1], vertices[i][2], vertices[j][1], vertices[j][2])"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "664": "callbacks.Unregister(\"Draw\", \"MCT_Draw\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"MCT_Draw\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "665": "callbacks.Register(\"Draw\", \"MCT_Draw\", doDraw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"MCT_Draw\", doDraw)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "666": "client.Command(\"cyoa_pda_open\", 1)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open\", 1)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "667": "client.SetConVar(\"cyoa_pda_open\", 1)"
            },
            "SLine": {
                "1": "client.SetConVar(\"cyoa_pda_open\", 1)"
            }
        },
        {
            "Title": "If plocal:incond",
            "subTitle": "",
            "dLine": {
                "668": "if pLocal:InCond(1) == true and client.GetConVar(\"cyoa_pda_open\") == 0 then"
            },
            "SLine": {
                "1": "if pLocal:InCond(1) == true and client.GetConVar(\"cyoa_pda_open\") == 0 then"
            }
        },
        {
            "Title": "Elseif client.getconvar",
            "subTitle": "",
            "dLine": {
                "669": "elseif client.GetConVar(\"cyoa_pda_open\") then"
            },
            "SLine": {
                "1": "elseif client.GetConVar(\"cyoa_pda_open\") then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "670": "client.Command(\"cyoa_pda_open\", 0)"
            },
            "SLine": {
                "1": "client.Command(\"cyoa_pda_open\", 0)"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "671": "client.SetConVar(\"sv_cheats\", 0)"
            },
            "SLine": {
                "1": "client.SetConVar(\"sv_cheats\", 0)"
            }
        },
        {
            "Title": "Color       = color",
            "subTitle": "",
            "dLine": {
                "673": "color       = Color(1,1,1),"
            },
            "SLine": {
                "1": "color       = Color(1,1,1),"
            }
        },
        {
            "Title": "Function togglecircle",
            "subTitle": "",
            "dLine": {
                "680": "function toggleCircle()"
            },
            "SLine": {
                "1": "function toggleCircle()"
            }
        },
        {
            "Title": "If circle.show then drawcircle",
            "subTitle": "",
            "dLine": {
                "682": "if circle.show then drawCircle() else clearCircle() end"
            },
            "SLine": {
                "1": "if circle.show then drawCircle() else clearCircle() end"
            }
        },
        {
            "Title": "Function drawcircle",
            "subTitle": "",
            "dLine": {
                "683": "function drawCircle()"
            },
            "SLine": {
                "1": "function drawCircle()"
            }
        },
        {
            "Title": "Points    = getcirclevectorpoints",
            "subTitle": "",
            "dLine": {
                "687": "points    = getCircleVectorPoints(circle.radius, circle.steps, circle.vert_offset),"
            },
            "SLine": {
                "1": "points    = getCircleVectorPoints(circle.radius, circle.steps, circle.vert_offset),"
            }
        },
        {
            "Title": "Function clearcircle",
            "subTitle": "",
            "dLine": {
                "691": "function clearCircle()"
            },
            "SLine": {
                "1": "function clearCircle()"
            }
        },
        {
            "Title": "Self.setvectorlines",
            "subTitle": "",
            "dLine": {
                "693": "self.setVectorLines({})"
            },
            "SLine": {
                "1": "self.setVectorLines({})"
            }
        },
        {
            "Title": "Function getcirclevectorpoints",
            "subTitle": "",
            "dLine": {
                "694": "function getCircleVectorPoints(radius, steps, y)"
            },
            "SLine": {
                "1": "function getCircleVectorPoints(radius, steps, y)"
            }
        },
        {
            "Title": "C",
            "subTitle": "",
            "dLine": {
                "699": "c(r(d*i))*radius,"
            },
            "SLine": {
                "1": "c(r(d*i))*radius,"
            }
        },
        {
            "Title": "S",
            "subTitle": "",
            "dLine": {
                "701": "s(r(d*i))*radius"
            },
            "SLine": {
                "1": "s(r(d*i))*radius"
            }
        },
        {
            "Title": "Local function shouldthink",
            "subTitle": "",
            "dLine": {
                "703": "local function ShouldThink(localPlayer)"
            },
            "SLine": {
                "1": "local function ShouldThink(localPlayer)"
            }
        },
        {
            "Title": "Local playerresources = entities.getplayerresources",
            "subTitle": "",
            "dLine": {
                "704": "local playerResources = entities.GetPlayerResources();"
            },
            "SLine": {
                "1": "local playerResources = entities.GetPlayerResources();"
            }
        },
        {
            "Title": "Local allplayerclasses = playerresources:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "705": "local allPlayerClasses = playerResources:GetPropDataTableInt(\"m_iPlayerClass\");"
            },
            "SLine": {
                "1": "local allPlayerClasses = playerResources:GetPropDataTableInt(\"m_iPlayerClass\");"
            }
        },
        {
            "Title": "Local currentplayerclass = allplayerclasses[localplayer:getindex",
            "subTitle": "",
            "dLine": {
                "706": "local currentPlayerClass = allPlayerClasses[localPlayer:GetIndex() + 1];"
            },
            "SLine": {
                "1": "local currentPlayerClass = allPlayerClasses[localPlayer:GetIndex() + 1];"
            }
        },
        {
            "Title": "Local function createmovehook",
            "subTitle": "",
            "dLine": {
                "710": "local function CreateMoveHook(cmd)"
            },
            "SLine": {
                "1": "local function CreateMoveHook(cmd)"
            }
        },
        {
            "Title": "If not localplayer:isalive",
            "subTitle": "",
            "dLine": {
                "711": "if not localPlayer:IsAlive() then"
            },
            "SLine": {
                "1": "if not localPlayer:IsAlive() then"
            }
        },
        {
            "Title": "Shouldthink = shouldthink",
            "subTitle": "",
            "dLine": {
                "713": "shouldThink = ShouldThink(localPlayer);"
            },
            "SLine": {
                "1": "shouldThink = ShouldThink(localPlayer);"
            }
        },
        {
            "Title": "Local isdisguised = localplayer:incond",
            "subTitle": "",
            "dLine": {
                "716": "local isDisguised = localPlayer:InCond(TFCond_Cloaked);"
            },
            "SLine": {
                "1": "local isDisguised = localPlayer:InCond(TFCond_Cloaked);"
            }
        },
        {
            "Title": "Local cloakmeter = localplayer:getpropfloat",
            "subTitle": "",
            "dLine": {
                "718": "local cloakMeter = localPlayer:GetPropFloat(\"m_flCloakMeter\");"
            },
            "SLine": {
                "1": "local cloakMeter = localPlayer:GetPropFloat(\"m_flCloakMeter\");"
            }
        },
        {
            "Title": "Cmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "725": "cmd:SetForwardMove(cmd:GetForwardMove() * moveModifier);"
            },
            "SLine": {
                "1": "cmd:SetForwardMove(cmd:GetForwardMove() * moveModifier);"
            }
        },
        {
            "Title": "Cmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "726": "cmd:SetSideMove(cmd:GetSideMove() * moveModifier);"
            },
            "SLine": {
                "1": "cmd:SetSideMove(cmd:GetSideMove() * moveModifier);"
            }
        },
        {
            "Title": "Cmd:setupmove",
            "subTitle": "",
            "dLine": {
                "727": "cmd:SetUpMove(cmd:GetUpMove() * moveModifier);"
            },
            "SLine": {
                "1": "cmd:SetUpMove(cmd:GetUpMove() * moveModifier);"
            }
        },
        {
            "Title": "Cmd:setbuttons",
            "subTitle": "",
            "dLine": {
                "728": "cmd:SetButtons(cmd:GetButtons() & ~IN_JUMP);"
            },
            "SLine": {
                "1": "cmd:SetButtons(cmd:GetButtons() & ~IN_JUMP);"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "729": "callbacks.Register(\"CreateMove\", \"createmove_cloak_stop\", CreateMoveHook);"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"createmove_cloak_stop\", CreateMoveHook);"
            }
        },
        {
            "Title": "Local menu         = menulib.create",
            "subTitle": "",
            "dLine": {
                "730": "local menu         = MenuLib.Create(\"Trajectories\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu         = MenuLib.Create(\"Trajectories\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "731": "menu:AddComponent(MenuLib.Label(\"                   [ Draw ]\", ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"                   [ Draw ]\", ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local menagle        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "732": "local mEnagle        = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            },
            "SLine": {
                "1": "local mEnagle        = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            }
        },
        {
            "Title": "Function calculateprojectilepath",
            "subTitle": "",
            "dLine": {
                "735": "function CalculateProjectilePath(startPos, endPos, velocity)"
            },
            "SLine": {
                "1": "function CalculateProjectilePath(startPos, endPos, velocity)"
            }
        },
        {
            "Title": "Local distance = ",
            "subTitle": "",
            "dLine": {
                "736": "local distance = (endPos - startPos):Length()"
            },
            "SLine": {
                "1": "local distance = (endPos - startPos):Length()"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "740": "assert(startPos ~= nil and type(startPos) == \"userdata\", \"Invalid start position\")"
            },
            "SLine": {
                "1": "assert(startPos ~= nil and type(startPos) == \"userdata\", \"Invalid start position\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "741": "assert(endPos ~= nil and type(endPos) == \"userdata\", \"Invalid end position\")"
            },
            "SLine": {
                "1": "assert(endPos ~= nil and type(endPos) == \"userdata\", \"Invalid end position\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "742": "assert(velocity ~= nil and type(velocity) == \"number\", \"Invalid velocity\")"
            },
            "SLine": {
                "1": "assert(velocity ~= nil and type(velocity) == \"number\", \"Invalid velocity\")"
            }
        },
        {
            "Title": "Local angle = math.deg",
            "subTitle": "",
            "dLine": {
                "743": "local angle = math.deg(math.asin((GRAVITY * distance) / (velocity * velocity)) / 2)"
            },
            "SLine": {
                "1": "local angle = math.deg(math.asin((GRAVITY * distance) / (velocity * velocity)) / 2)"
            }
        },
        {
            "Title": "Local timetotarget = velocity * math.sin",
            "subTitle": "",
            "dLine": {
                "744": "local timeToTarget = velocity * math.sin(math.rad(angle))"
            },
            "SLine": {
                "1": "local timeToTarget = velocity * math.sin(math.rad(angle))"
            }
        },
        {
            "Title": "Local height = velocity * math.sin",
            "subTitle": "",
            "dLine": {
                "745": "local height = velocity * math.sin(math.rad(angle)) * timeToTarget - 0.5 * GRAVITY * timeToTarget * timeToTarget"
            },
            "SLine": {
                "1": "local height = velocity * math.sin(math.rad(angle)) * timeToTarget - 0.5 * GRAVITY * timeToTarget * timeToTarget"
            }
        },
        {
            "Title": "Local x = velocity * math.cos",
            "subTitle": "",
            "dLine": {
                "750": "local x = velocity * math.cos(math.rad(angle)) * currentTime"
            },
            "SLine": {
                "1": "local x = velocity * math.cos(math.rad(angle)) * currentTime"
            }
        },
        {
            "Title": "Local y = velocity * math.sin",
            "subTitle": "",
            "dLine": {
                "751": "local y = velocity * math.sin(math.rad(angle)) * currentTime - 0.5 * GRAVITY * currentTime * currentTime + height"
            },
            "SLine": {
                "1": "local y = velocity * math.sin(math.rad(angle)) * currentTime - 0.5 * GRAVITY * currentTime * currentTime + height"
            }
        },
        {
            "Title": "Local z = velocity * math.cos",
            "subTitle": "",
            "dLine": {
                "752": "local z = velocity * math.cos(math.rad(angle)) * currentTime"
            },
            "SLine": {
                "1": "local z = velocity * math.cos(math.rad(angle)) * currentTime"
            }
        },
        {
            "Title": "Local point = startpos + direction * x + vector3",
            "subTitle": "",
            "dLine": {
                "753": "local point = startPos + direction * x + Vector3(0, 0, z)"
            },
            "SLine": {
                "1": "local point = startPos + direction * x + Vector3(0, 0, z)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "754": "table.insert(path, point)"
            },
            "SLine": {
                "1": "table.insert(path, point)"
            }
        },
        {
            "Title": "Local myfont = draw.createfont",
            "subTitle": "",
            "dLine": {
                "757": "local myfont = draw.CreateFont(\"Verdana\", 16, 800)"
            },
            "SLine": {
                "1": "local myfont = draw.CreateFont(\"Verdana\", 16, 800)"
            }
        },
        {
            "Title": "Local me = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "758": "local me = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local me = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Me = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "759": "me = entities.GetLocalPlayer();"
            },
            "SLine": {
                "1": "me = entities.GetLocalPlayer();"
            }
        },
        {
            "Title": "Local source = me:getabsorigin",
            "subTitle": "",
            "dLine": {
                "760": "local source = me:GetAbsOrigin() + me:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" );"
            },
            "SLine": {
                "1": "local source = me:GetAbsOrigin() + me:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" );"
            }
        },
        {
            "Title": "Local destination = source + engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "761": "local destination = source + engine.GetViewAngles():Forward() * 1000;"
            },
            "SLine": {
                "1": "local destination = source + engine.GetViewAngles():Forward() * 1000;"
            }
        },
        {
            "Title": "Source = source + engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "762": "source = source + engine.GetViewAngles():Forward() * 10;"
            },
            "SLine": {
                "1": "source = source + engine.GetViewAngles():Forward() * 10;"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "763": "local trace = engine.TraceLine( source, destination, MASK_SHOT_HULL );"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine( source, destination, MASK_SHOT_HULL );"
            }
        },
        {
            "Title": "Local startpos = source + vector3",
            "subTitle": "",
            "dLine": {
                "765": "local startPos = source + Vector3(-20, -20, -20)"
            },
            "SLine": {
                "1": "local startPos = source + Vector3(-20, -20, -20)"
            }
        },
        {
            "Title": "Local path = calculateprojectilepath",
            "subTitle": "",
            "dLine": {
                "767": "local path = CalculateProjectilePath(source, endPos, FIXED_VELOCITY)"
            },
            "SLine": {
                "1": "local path = CalculateProjectilePath(source, endPos, FIXED_VELOCITY)"
            }
        },
        {
            "Title": "For i, point in ipairs",
            "subTitle": "",
            "dLine": {
                "769": "for i, point in ipairs(path) do"
            },
            "SLine": {
                "1": "for i, point in ipairs(path) do"
            }
        },
        {
            "Title": "Local startscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "770": "local startScreenPos = client.WorldToScreen(path[i])"
            },
            "SLine": {
                "1": "local startScreenPos = client.WorldToScreen(path[i])"
            }
        },
        {
            "Title": "Local endscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "771": "local endScreenPos = client.WorldToScreen(path[i+1])"
            },
            "SLine": {
                "1": "local endScreenPos = client.WorldToScreen(path[i+1])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "773": "draw.Line(startScreenPos[1], startScreenPos[2], endScreenPos[1], endScreenPos[2])"
            },
            "SLine": {
                "1": "draw.Line(startScreenPos[1], startScreenPos[2], endScreenPos[1], endScreenPos[2])"
            }
        },
        {
            "Title": "Local function strikeplayer",
            "subTitle": "",
            "dLine": {
                "780": "local function StrikePlayer(index, reason)"
            },
            "SLine": {
                "1": "local function StrikePlayer(index, reason)"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "785": "client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)"
            }
        },
        {
            "Title": "Local function checkchoke",
            "subTitle": "",
            "dLine": {
                "786": "local function CheckChoke(player)"
            },
            "SLine": {
                "1": "local function CheckChoke(player)"
            }
        },
        {
            "Title": "Local simtime = player:getpropfloat",
            "subTitle": "",
            "dLine": {
                "787": "local simTime = player:GetPropFloat(\"m_flSimulationTime\")"
            },
            "SLine": {
                "1": "local simTime = player:GetPropFloat(\"m_flSimulationTime\")"
            }
        },
        {
            "Title": "If not oldsimtimes[player:getindex",
            "subTitle": "",
            "dLine": {
                "789": "if not oldSimTimes[player:GetIndex()] then"
            },
            "SLine": {
                "1": "if not oldSimTimes[player:GetIndex()] then"
            }
        },
        {
            "Title": "Oldsimtimes[player:getindex",
            "subTitle": "",
            "dLine": {
                "790": "oldSimTimes[player:GetIndex()] = simTime"
            },
            "SLine": {
                "1": "oldSimTimes[player:GetIndex()] = simTime"
            }
        },
        {
            "Title": "Local delta = simtime - oldsimtimes[player:getindex",
            "subTitle": "",
            "dLine": {
                "791": "local delta = simTime - oldSimTimes[player:GetIndex()]"
            },
            "SLine": {
                "1": "local delta = simTime - oldSimTimes[player:GetIndex()]"
            }
        },
        {
            "Title": "Strikeplayer",
            "subTitle": "",
            "dLine": {
                "793": "StrikePlayer(player:GetIndex(), \"Packet was choked\")"
            },
            "SLine": {
                "1": "StrikePlayer(player:GetIndex(), \"Packet was choked\")"
            }
        },
        {
            "Title": "Local function checkpitch",
            "subTitle": "",
            "dLine": {
                "794": "local function CheckPitch(player)"
            },
            "SLine": {
                "1": "local function CheckPitch(player)"
            }
        },
        {
            "Title": "Local eyeanglesx = player:getpropfloat",
            "subTitle": "",
            "dLine": {
                "795": "local eyeAnglesX = player:GetPropFloat(\"tfnonlocaldata\", \"m_angEyeAngles[0]\")"
            },
            "SLine": {
                "1": "local eyeAnglesX = player:GetPropFloat(\"tfnonlocaldata\", \"m_angEyeAngles[0]\")"
            }
        },
        {
            "Title": "Strikeplayer",
            "subTitle": "",
            "dLine": {
                "798": "StrikePlayer(player:GetIndex(), \"Invalid Pitch\")"
            },
            "SLine": {
                "1": "StrikePlayer(player:GetIndex(), \"Invalid Pitch\")"
            }
        },
        {
            "Title": "Local function checkangledelta",
            "subTitle": "",
            "dLine": {
                "799": "local function CheckAngleDelta(player)"
            },
            "SLine": {
                "1": "local function CheckAngleDelta(player)"
            }
        },
        {
            "Title": "Local eyeangles = player:getpropvector",
            "subTitle": "",
            "dLine": {
                "800": "local eyeAngles = player:GetPropVector(\"tfnonlocaldata\", \"m_angEyeAngles\")"
            },
            "SLine": {
                "1": "local eyeAngles = player:GetPropVector(\"tfnonlocaldata\", \"m_angEyeAngles\")"
            }
        },
        {
            "Title": "If not oldeyeangles[player:getindex",
            "subTitle": "",
            "dLine": {
                "802": "if not oldEyeAngles[player:GetIndex()] then"
            },
            "SLine": {
                "1": "if not oldEyeAngles[player:GetIndex()] then"
            }
        },
        {
            "Title": "Oldeyeangles[player:getindex",
            "subTitle": "",
            "dLine": {
                "803": "oldEyeAngles[player:GetIndex()] = eyeAngles"
            },
            "SLine": {
                "1": "oldEyeAngles[player:GetIndex()] = eyeAngles"
            }
        },
        {
            "Title": "Local delta = eyeangles - oldeyeangles[player:getindex",
            "subTitle": "",
            "dLine": {
                "804": "local delta = eyeAngles - oldEyeAngles[player:GetIndex()]"
            },
            "SLine": {
                "1": "local delta = eyeAngles - oldEyeAngles[player:GetIndex()]"
            }
        },
        {
            "Title": "If delta:length",
            "subTitle": "",
            "dLine": {
                "805": "if delta:Length() > options.MaxAngleDelta then"
            },
            "SLine": {
                "1": "if delta:Length() > options.MaxAngleDelta then"
            }
        },
        {
            "Title": "Strikeplayer",
            "subTitle": "",
            "dLine": {
                "806": "StrikePlayer(player:GetIndex(), \"Invalid Angle Delta\")"
            },
            "SLine": {
                "1": "StrikePlayer(player:GetIndex(), \"Invalid Angle Delta\")"
            }
        },
        {
            "Title": "If vplayer:isvalid",
            "subTitle": "",
            "dLine": {
                "807": "if vPlayer:IsValid() == false or vPlayer:IsAlive() == false then"
            },
            "SLine": {
                "1": "if vPlayer:IsValid() == false or vPlayer:IsAlive() == false then"
            }
        },
        {
            "Title": "Oldeyeangles[vplayer:getindex",
            "subTitle": "",
            "dLine": {
                "808": "oldEyeAngles[vPlayer:GetIndex()] = nil"
            },
            "SLine": {
                "1": "oldEyeAngles[vPlayer:GetIndex()] = nil"
            }
        },
        {
            "Title": "Checkchoke",
            "subTitle": "",
            "dLine": {
                "810": "CheckChoke(vPlayer)"
            },
            "SLine": {
                "1": "CheckChoke(vPlayer)"
            }
        },
        {
            "Title": "Checkpitch",
            "subTitle": "",
            "dLine": {
                "811": "CheckPitch(vPlayer)"
            },
            "SLine": {
                "1": "CheckPitch(vPlayer)"
            }
        },
        {
            "Title": "Checkangledelta",
            "subTitle": "",
            "dLine": {
                "812": "CheckAngleDelta(vPlayer)"
            },
            "SLine": {
                "1": "CheckAngleDelta(vPlayer)"
            }
        },
        {
            "Title": "For kindex, vstrikes in pairs",
            "subTitle": "",
            "dLine": {
                "813": "for kIndex, vStrikes in pairs(playerStrikes) do"
            },
            "SLine": {
                "1": "for kIndex, vStrikes in pairs(playerStrikes) do"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "815": "client.ChatPrintf(\"\\x04[CD] \\x02Cheater detected:\\x05 \" .. entities.GetByIndex(kIndex):GetName())"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x04[CD] \\x02Cheater detected:\\x05 \" .. entities.GetByIndex(kIndex):GetName())"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "817": "callbacks.Unregister(\"CreateMove\", \"CD_CreateMove\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"CD_CreateMove\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "818": "callbacks.Register(\"CreateMove\", \"CD_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"CD_CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "Local function dt_enabled",
            "subTitle": "",
            "dLine": {
                "829": "local function DT_Enabled()"
            },
            "SLine": {
                "1": "local function DT_Enabled()"
            }
        },
        {
            "Title": "Local dtmode = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "830": "local dtMode = gui.GetValue(\"double tap (beta)\")"
            },
            "SLine": {
                "1": "local dtMode = gui.GetValue(\"double tap (beta)\")"
            }
        },
        {
            "Title": "Local dashkey = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "831": "local dashKey = gui.GetValue(\"dash move key\")"
            },
            "SLine": {
                "1": "local dashKey = gui.GetValue(\"dash move key\")"
            }
        },
        {
            "Title": "If not dt_enabled",
            "subTitle": "",
            "dLine": {
                "833": "if not DT_Enabled() then return end"
            },
            "SLine": {
                "1": "if not DT_Enabled() then return end"
            }
        },
        {
            "Title": "If not plocal or engine.isgameuivisible",
            "subTitle": "",
            "dLine": {
                "834": "if not pLocal or engine.IsGameUIVisible() then return end"
            },
            "SLine": {
                "1": "if not pLocal or engine.IsGameUIVisible() then return end"
            }
        },
        {
            "Title": "Local ratio = warp.getchargedticks",
            "subTitle": "",
            "dLine": {
                "836": "local ratio = warp.GetChargedTicks() / MAX_TICKS"
            },
            "SLine": {
                "1": "local ratio = warp.GetChargedTicks() / MAX_TICKS"
            }
        },
        {
            "Title": "Local boxheight = math.floor",
            "subTitle": "",
            "dLine": {
                "838": "local boxHeight = math.floor(4 * options.Size)"
            },
            "SLine": {
                "1": "local boxHeight = math.floor(4 * options.Size)"
            }
        },
        {
            "Title": "Local barwidth = math.floor",
            "subTitle": "",
            "dLine": {
                "839": "local barWidth = math.floor(boxWidth * ratio)"
            },
            "SLine": {
                "1": "local barWidth = math.floor(boxWidth * ratio)"
            }
        },
        {
            "Title": "Local swidth, sheight = draw.getscreensize",
            "subTitle": "",
            "dLine": {
                "840": "local sWidth, sHeight = draw.GetScreenSize()"
            },
            "SLine": {
                "1": "local sWidth, sHeight = draw.GetScreenSize()"
            }
        },
        {
            "Title": "Local xpos = math.floor",
            "subTitle": "",
            "dLine": {
                "841": "local xPos = math.floor(sWidth * options.X - boxWidth * 0.5)"
            },
            "SLine": {
                "1": "local xPos = math.floor(sWidth * options.X - boxWidth * 0.5)"
            }
        },
        {
            "Title": "Local ypos = math.floor",
            "subTitle": "",
            "dLine": {
                "842": "local yPos = math.floor(sHeight * options.Y - boxHeight * 0.5)"
            },
            "SLine": {
                "1": "local yPos = math.floor(sHeight * options.Y - boxHeight * 0.5)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "843": "draw.Color(table.unpack(options.Colors.Background))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(options.Colors.Background))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "844": "draw.FilledRect(xPos, yPos, xPos + boxWidth, yPos + boxHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(xPos, yPos, xPos + boxWidth, yPos + boxHeight)"
            }
        },
        {
            "Title": "If warp.iswarping",
            "subTitle": "",
            "dLine": {
                "845": "if warp.IsWarping() or warp.GetChargedTicks() < MAX_TICKS then"
            },
            "SLine": {
                "1": "if warp.IsWarping() or warp.GetChargedTicks() < MAX_TICKS then"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "846": "draw.Color(table.unpack(options.Colors.Recharge))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(options.Colors.Recharge))"
            }
        },
        {
            "Title": "Elseif warp.candoubletap",
            "subTitle": "",
            "dLine": {
                "847": "elseif warp.CanDoubleTap(pWeapon) then"
            },
            "SLine": {
                "1": "elseif warp.CanDoubleTap(pWeapon) then"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "848": "draw.Color(table.unpack(options.Colors.Ready))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(options.Colors.Ready))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "849": "draw.Color(205, 95, 50, 255)"
            },
            "SLine": {
                "1": "draw.Color(205, 95, 50, 255)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "850": "draw.FilledRect(xPos, yPos, xPos + barWidth, yPos + boxHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(xPos, yPos, xPos + barWidth, yPos + boxHeight)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "851": "draw.Color(table.unpack(options.Colors.Outline))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(options.Colors.Outline))"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "852": "draw.OutlinedRect(xPos, yPos, xPos + boxWidth, yPos + boxHeight)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(xPos, yPos, xPos + boxWidth, yPos + boxHeight)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "853": "callbacks.Unregister(\"Draw\", \"lnx_DT-Bar_Draw\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"lnx_DT-Bar_Draw\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "854": "callbacks.Register(\"Draw\", \"lnx_DT-Bar_Draw\", OnDraw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"lnx_DT-Bar_Draw\", OnDraw)"
            }
        },
        {
            "Title": "Local immenu = require",
            "subTitle": "",
            "dLine": {
                "858": "local ImMenu = require(\"ImMenu\")"
            },
            "SLine": {
                "1": "local ImMenu = require(\"ImMenu\")"
            }
        },
        {
            "Title": "Local function getfilelist",
            "subTitle": "",
            "dLine": {
                "861": "local function GetFileList(path)"
            },
            "SLine": {
                "1": "local function GetFileList(path)"
            }
        },
        {
            "Title": "Pcall",
            "subTitle": "",
            "dLine": {
                "863": "pcall(function()"
            },
            "SLine": {
                "1": "pcall(function()"
            }
        },
        {
            "Title": "Filesystem.enumeratedirectory",
            "subTitle": "",
            "dLine": {
                "864": "filesystem.EnumerateDirectory(path .. \"*\", function (filename, attributes)"
            },
            "SLine": {
                "1": "filesystem.EnumerateDirectory(path .. \"*\", function (filename, attributes)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "866": "table.insert(files, { name = filename, attributes = attributes })"
            },
            "SLine": {
                "1": "table.insert(files, { name = filename, attributes = attributes })"
            }
        },
        {
            "Title": "Function immenu.filebrowser",
            "subTitle": "",
            "dLine": {
                "869": "function ImMenu.FileBrowser()"
            },
            "SLine": {
                "1": "function ImMenu.FileBrowser()"
            }
        },
        {
            "Title": "Local listsize = immenu.getstyle",
            "subTitle": "",
            "dLine": {
                "871": "local listSize = ImMenu.GetStyle()[\"FileBrowser_ListSize\"] or 10"
            },
            "SLine": {
                "1": "local listSize = ImMenu.GetStyle()[\"FileBrowser_ListSize\"] or 10"
            }
        },
        {
            "Title": "If immenu.begin",
            "subTitle": "",
            "dLine": {
                "872": "if ImMenu.Begin(\"File Browser\", true) then"
            },
            "SLine": {
                "1": "if ImMenu.Begin(\"File Browser\", true) then"
            }
        },
        {
            "Title": "Local filelist = getfilelist",
            "subTitle": "",
            "dLine": {
                "873": "local fileList = GetFileList(currentPath)"
            },
            "SLine": {
                "1": "local fileList = GetFileList(currentPath)"
            }
        },
        {
            "Title": "Immenu.beginframe",
            "subTitle": "",
            "dLine": {
                "875": "ImMenu.BeginFrame(ImAlign.Horizontal)"
            },
            "SLine": {
                "1": "ImMenu.BeginFrame(ImAlign.Horizontal)"
            }
        },
        {
            "Title": "Immenu.text",
            "subTitle": "",
            "dLine": {
                "876": "ImMenu.Text(\"Path: \" .. currentPath)"
            },
            "SLine": {
                "1": "ImMenu.Text(\"Path: \" .. currentPath)"
            }
        },
        {
            "Title": "Immenu.endframe",
            "subTitle": "",
            "dLine": {
                "877": "ImMenu.EndFrame()",
                "1336": "function ImMenu.EndFrame()",
                "1385": "local frame = ImMenu.EndFrame()"
            },
            "SLine": {
                "1": "ImMenu.EndFrame()"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "878": "ImMenu.PushStyle(\"ItemSize\", { 25, 75 })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { 25, 75 })"
            }
        },
        {
            "Title": "Immenu.beginframe",
            "subTitle": "",
            "dLine": {
                "879": "ImMenu.BeginFrame(ImAlign.Vertical)"
            },
            "SLine": {
                "1": "ImMenu.BeginFrame(ImAlign.Vertical)"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "880": "if ImMenu.Button(\"^\") then"
            },
            "SLine": {
                "1": "if ImMenu.Button(\"^\") then"
            }
        },
        {
            "Title": "Currentoffset = math.max",
            "subTitle": "",
            "dLine": {
                "881": "currentOffset = math.max(currentOffset - 1, 1)"
            },
            "SLine": {
                "1": "currentOffset = math.max(currentOffset - 1, 1)"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "882": "if ImMenu.Button(\"<\") then"
            },
            "SLine": {
                "1": "if ImMenu.Button(\"<\") then"
            }
        },
        {
            "Title": "Currentpath = currentpath:match",
            "subTitle": "",
            "dLine": {
                "883": "currentPath = currentPath:match(\"(.*/).*/\") or \"./\""
            },
            "SLine": {
                "1": "currentPath = currentPath:match(\"(.*/).*/\") or \"./\""
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "884": "if ImMenu.Button(\"v\") then"
            },
            "SLine": {
                "1": "if ImMenu.Button(\"v\") then"
            }
        },
        {
            "Title": "Currentoffset = math.clamp",
            "subTitle": "",
            "dLine": {
                "885": "currentOffset = math.clamp(currentOffset + 1, 1, fileCount - listSize)"
            },
            "SLine": {
                "1": "currentOffset = math.clamp(currentOffset + 1, 1, fileCount - listSize)"
            }
        },
        {
            "Title": "Immenu.popstyle",
            "subTitle": "",
            "dLine": {
                "886": "ImMenu.PopStyle()"
            },
            "SLine": {
                "1": "ImMenu.PopStyle()"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "887": "ImMenu.PushStyle(\"ItemSize\", { 300, 25 })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { 300, 25 })"
            }
        },
        {
            "Title": "Immenu.text",
            "subTitle": "",
            "dLine": {
                "889": "ImMenu.Text(\"No files found\")"
            },
            "SLine": {
                "1": "ImMenu.Text(\"No files found\")"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "895": "if ImMenu.Button(file.name .. \"/\") then"
            },
            "SLine": {
                "1": "if ImMenu.Button(file.name .. \"/\") then"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "898": "if ImMenu.Button(file.name) then"
            },
            "SLine": {
                "1": "if ImMenu.Button(file.name) then"
            }
        },
        {
            "Title": "Immenu.end",
            "subTitle": "",
            "dLine": {
                "900": "ImMenu.End()",
                "1384": "function ImMenu.End()"
            },
            "SLine": {
                "1": "ImMenu.End()"
            }
        },
        {
            "Title": "Local x, y = draw.getscreensize",
            "subTitle": "",
            "dLine": {
                "907": "local x, y = draw.GetScreenSize()"
            },
            "SLine": {
                "1": "local x, y = draw.GetScreenSize()"
            }
        },
        {
            "Title": "Local font_calibri = draw.createfont",
            "subTitle": "",
            "dLine": {
                "908": "local font_calibri = draw.CreateFont(\"Calibri\", 18, 18)"
            },
            "SLine": {
                "1": "local font_calibri = draw.CreateFont(\"Calibri\", 18, 18)"
            }
        },
        {
            "Title": "Local function event_hook",
            "subTitle": "",
            "dLine": {
                "909": "local function event_hook(ev)"
            },
            "SLine": {
                "1": "local function event_hook(ev)"
            }
        },
        {
            "Title": "If ev:getname",
            "subTitle": "",
            "dLine": {
                "910": "if ev:GetName() ~= \"player_healed\" then return end"
            },
            "SLine": {
                "1": "if ev:GetName() ~= \"player_healed\" then return end"
            }
        },
        {
            "Title": "Local victim_entity = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "911": "local victim_entity = entities.GetByUserID(ev:GetInt(\"patient\"))"
            },
            "SLine": {
                "1": "local victim_entity = entities.GetByUserID(ev:GetInt(\"patient\"))"
            }
        },
        {
            "Title": "Local attacker = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "912": "local attacker = entities.GetByUserID(ev:GetInt(\"healer\"))"
            },
            "SLine": {
                "1": "local attacker = entities.GetByUserID(ev:GetInt(\"healer\"))"
            }
        },
        {
            "Title": "Local localplayer = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "913": "local localplayer = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local localplayer = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Local damage = ev:getint",
            "subTitle": "",
            "dLine": {
                "914": "local damage = ev:GetInt(\"amount\")"
            },
            "SLine": {
                "1": "local damage = ev:GetInt(\"amount\")"
            }
        },
        {
            "Title": "Local health = ev:getint",
            "subTitle": "",
            "dLine": {
                "915": "local health = ev:GetInt(\"health\")"
            },
            "SLine": {
                "1": "local health = ev:GetInt(\"health\")"
            }
        },
        {
            "Title": "Local ping = entities.getplayerresources",
            "subTitle": "",
            "dLine": {
                "916": "local ping = entities.GetPlayerResources():GetPropDataTableInt(\"m_iPing\")[victim_entity:GetIndex()]"
            },
            "SLine": {
                "1": "local ping = entities.GetPlayerResources():GetPropDataTableInt(\"m_iPing\")[victim_entity:GetIndex()]"
            }
        },
        {
            "Title": "String = string.format",
            "subTitle": "",
            "dLine": {
                "919": "string = string.format(\"Healed %s for %d health (%d health remaining)\", victim_entity:GetName(), damage, health, ping),"
            },
            "SLine": {
                "1": "string = string.format(\"Healed %s for %d health (%d health remaining)\", victim_entity:GetName(), damage, health, ping),"
            }
        },
        {
            "Title": "Delay = globals.realtime",
            "subTitle": "",
            "dLine": {
                "920": "delay = globals.RealTime() + 5.5,"
            },
            "SLine": {
                "1": "delay = globals.RealTime() + 5.5,"
            }
        },
        {
            "Title": "Printc",
            "subTitle": "",
            "dLine": {
                "922": "printc(100, 255, 100, 255, string.format(\"Healed %s for %d health (%d health remaining)\", victim_entity:GetName(), damage, health, ping))"
            },
            "SLine": {
                "1": "printc(100, 255, 100, 255, string.format(\"Healed %s for %d health (%d health remaining)\", victim_entity:GetName(), damage, health, ping))"
            }
        },
        {
            "Title": "Local function paint_logs",
            "subTitle": "",
            "dLine": {
                "923": "local function paint_logs()"
            },
            "SLine": {
                "1": "local function paint_logs()"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "924": "draw.SetFont(font_calibri)"
            },
            "SLine": {
                "1": "draw.SetFont(font_calibri)"
            }
        },
        {
            "Title": "For i, v in pairs",
            "subTitle": "",
            "dLine": {
                "925": "for i, v in pairs(queue) do"
            },
            "SLine": {
                "1": "for i, v in pairs(queue) do"
            }
        },
        {
            "Title": "Local alpha = floor",
            "subTitle": "",
            "dLine": {
                "926": "local alpha = floor(v.alpha)"
            },
            "SLine": {
                "1": "local alpha = floor(v.alpha)"
            }
        },
        {
            "Title": "Local y_pos = floor",
            "subTitle": "",
            "dLine": {
                "928": "local y_pos = floor(y / 2) + (i * 20)"
            },
            "SLine": {
                "1": "local y_pos = floor(y / 2) + (i * 20)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "929": "draw.Color(255, 255, 255, alpha)"
            },
            "SLine": {
                "1": "draw.Color(255, 255, 255, alpha)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "930": "draw.Text(7, y_pos, text)"
            },
            "SLine": {
                "1": "draw.Text(7, y_pos, text)"
            }
        },
        {
            "Title": "Local function anim",
            "subTitle": "",
            "dLine": {
                "931": "local function anim()"
            },
            "SLine": {
                "1": "local function anim()"
            }
        },
        {
            "Title": "If globals.realtime",
            "subTitle": "",
            "dLine": {
                "932": "if globals.RealTime() < v.delay then"
            },
            "SLine": {
                "1": "if globals.RealTime() < v.delay then"
            }
        },
        {
            "Title": "V.alpha = math.min",
            "subTitle": "",
            "dLine": {
                "933": "v.alpha = math.min(v.alpha + 1, 255)"
            },
            "SLine": {
                "1": "v.alpha = math.min(v.alpha + 1, 255)"
            }
        },
        {
            "Title": "V.string = string.sub",
            "subTitle": "",
            "dLine": {
                "934": "v.string = string.sub(v.string, 1, string.len(v.string) - 1)"
            },
            "SLine": {
                "1": "v.string = string.sub(v.string, 1, string.len(v.string) - 1)"
            }
        },
        {
            "Title": "If 0 >= string.len",
            "subTitle": "",
            "dLine": {
                "935": "if 0 >= string.len(v.string) then"
            },
            "SLine": {
                "1": "if 0 >= string.len(v.string) then"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "936": "table.remove(queue, i)"
            },
            "SLine": {
                "1": "table.remove(queue, i)"
            }
        },
        {
            "Title": "Local function draw_handler",
            "subTitle": "",
            "dLine": {
                "937": "local function draw_handler()"
            },
            "SLine": {
                "1": "local function draw_handler()"
            }
        },
        {
            "Title": "Paint_logs",
            "subTitle": "",
            "dLine": {
                "923": "local function paint_logs()",
                "938": "paint_logs()"
            },
            "SLine": {
                "1": "paint_logs()"
            }
        },
        {
            "Title": "Anim",
            "subTitle": "",
            "dLine": {
                "931": "local function anim()",
                "939": "anim()"
            },
            "SLine": {
                "1": "anim()"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "940": "callbacks.Register(\"Draw\", \"unique_draw_hook\", draw_handler)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"unique_draw_hook\", draw_handler)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "941": "callbacks.Register(\"FireGameEvent\", \"unique_event_hook\", event_hook)"
            },
            "SLine": {
                "1": "callbacks.Register(\"FireGameEvent\", \"unique_event_hook\", event_hook)"
            }
        },
        {
            "Title": "If ev:getname",
            "subTitle": "",
            "dLine": {
                "942": "if ev:GetName() ~= \"player_hurt\" then return end"
            },
            "SLine": {
                "1": "if ev:GetName() ~= \"player_hurt\" then return end"
            }
        },
        {
            "Title": "Local victim_entity = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "943": "local victim_entity = entities.GetByUserID(ev:GetInt(\"userid\"))"
            },
            "SLine": {
                "1": "local victim_entity = entities.GetByUserID(ev:GetInt(\"userid\"))"
            }
        },
        {
            "Title": "Local attacker = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "944": "local attacker = entities.GetByUserID(ev:GetInt(\"attacker\"))"
            },
            "SLine": {
                "1": "local attacker = entities.GetByUserID(ev:GetInt(\"attacker\"))"
            }
        },
        {
            "Title": "Local damage = ev:getint",
            "subTitle": "",
            "dLine": {
                "945": "local damage = ev:GetInt(\"damageamount\")"
            },
            "SLine": {
                "1": "local damage = ev:GetInt(\"damageamount\")"
            }
        },
        {
            "Title": "Local iscrit = ev:getstring",
            "subTitle": "",
            "dLine": {
                "946": "local iscrit = ev:GetString(\"crit\") == 1 and true or false"
            },
            "SLine": {
                "1": "local iscrit = ev:GetString(\"crit\") == 1 and true or false"
            }
        },
        {
            "Title": "String = string.format",
            "subTitle": "",
            "dLine": {
                "947": "string = string.format(\"Hit %s for %d damage (%d health remaining)\", victim_entity:GetName(), damage, health, iscrit, ping),"
            },
            "SLine": {
                "1": "string = string.format(\"Hit %s for %d damage (%d health remaining)\", victim_entity:GetName(), damage, health, iscrit, ping),"
            }
        },
        {
            "Title": "Printc",
            "subTitle": "",
            "dLine": {
                "948": "printc(100, 255, 100, 255, string.format(\"[LMAOBOX] Hit %s for %d damage (%d health remaining)\", victim_entity:GetName(), damage, health, iscrit, ping))"
            },
            "SLine": {
                "1": "printc(100, 255, 100, 255, string.format(\"[LMAOBOX] Hit %s for %d damage (%d health remaining)\", victim_entity:GetName(), damage, health, iscrit, ping))"
            }
        },
        {
            "Title": "Local menu         = menulib.create",
            "subTitle": "",
            "dLine": {
                "956": "local menu         = MenuLib.Create(\"Hvh_tools\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu         = MenuLib.Create(\"Hvh_tools\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "957": "menu:AddComponent(MenuLib.Label(\"                   [ Misc ]\", ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"                   [ Misc ]\", ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local mslowwalk            = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "958": "local mslowwalk            = menu:AddComponent(MenuLib.Slider(\"Walk Speed\", 1, 200, 17))"
            },
            "SLine": {
                "1": "local mslowwalk            = menu:AddComponent(MenuLib.Slider(\"Walk Speed\", 1, 200, 17))"
            }
        },
        {
            "Title": "Local mskey            = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "959": "local mSKey            = menu:AddComponent(MenuLib.Keybind(\"Key\", KEY_LSHIFT, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mSKey            = menu:AddComponent(MenuLib.Keybind(\"Key\", KEY_LSHIFT, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "960": "menu:AddComponent(MenuLib.Seperator())"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Seperator())"
            }
        },
        {
            "Title": "Local minfakelag        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "961": "local MinFakeLag        = menu:AddComponent(MenuLib.Slider(\"Fake Lag Min\", 1, 329, 3))"
            },
            "SLine": {
                "1": "local MinFakeLag        = menu:AddComponent(MenuLib.Slider(\"Fake Lag Min\", 1, 329, 3))"
            }
        },
        {
            "Title": "Local maxfakelag        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "962": "local MaxFakeLag        = menu:AddComponent(MenuLib.Slider(\"Fake Lag Max\", 2, 330, 2))"
            },
            "SLine": {
                "1": "local MaxFakeLag        = menu:AddComponent(MenuLib.Slider(\"Fake Lag Max\", 2, 330, 2))"
            }
        },
        {
            "Title": "Local mlegjitter        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "963": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\", true))"
            },
            "SLine": {
                "1": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\", true))"
            }
        },
        {
            "Title": "Local mlgstrengh        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "964": "local mlgstrengh        = menu:AddComponent(MenuLib.Slider(\"Leg Jitter Strengh\", 9, 47, 33))"
            },
            "SLine": {
                "1": "local mlgstrengh        = menu:AddComponent(MenuLib.Slider(\"Leg Jitter Strengh\", 9, 47, 33))"
            }
        },
        {
            "Title": "Local mmvisuals         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "965": "local mmVisuals         = menu:AddComponent(MenuLib.Checkbox(\"indicators\", true))"
            },
            "SLine": {
                "1": "local mmVisuals         = menu:AddComponent(MenuLib.Checkbox(\"indicators\", true))"
            }
        },
        {
            "Title": "Local mmindicator       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "966": "local mmIndicator       = menu:AddComponent(MenuLib.Slider(\"Indicator Size\", 10, 100, 50))"
            },
            "SLine": {
                "1": "local mmIndicator       = menu:AddComponent(MenuLib.Slider(\"Indicator Size\", 10, 100, 50))"
            }
        },
        {
            "Title": "Local mautopriority     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "967": "local mAutoPriority     = menu:AddComponent(MenuLib.Checkbox(\"Auto Priority\", true))"
            },
            "SLine": {
                "1": "local mAutoPriority     = menu:AddComponent(MenuLib.Checkbox(\"Auto Priority\", true))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "968": "menu:AddComponent(MenuLib.Label(\"                  [ Safety ]\", ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"                  [ Safety ]\", ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local msafe_angles      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "969": "local msafe_angles      = menu:AddComponent(MenuLib.Checkbox(\"Safe Angles\", true))"
            },
            "SLine": {
                "1": "local msafe_angles      = menu:AddComponent(MenuLib.Checkbox(\"Safe Angles\", true))"
            }
        },
        {
            "Title": "Local downpitch         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "970": "local downPitch         = menu:AddComponent(MenuLib.Checkbox(\"Safe pitch\", true))"
            },
            "SLine": {
                "1": "local downPitch         = menu:AddComponent(MenuLib.Checkbox(\"Safe pitch\", true))"
            }
        },
        {
            "Title": "Local mantitaunt        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "971": "local mAntiTaunt        = menu:AddComponent(MenuLib.Checkbox(\"Anti Holiday Punch\", true))"
            },
            "SLine": {
                "1": "local mAntiTaunt        = menu:AddComponent(MenuLib.Checkbox(\"Anti Holiday Punch\", true))"
            }
        },
        {
            "Title": "Local mhandshield        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "972": "local mHandShield        = menu:AddComponent(MenuLib.Checkbox(\"Hand Shield(BETA)\", false))"
            },
            "SLine": {
                "1": "local mHandShield        = menu:AddComponent(MenuLib.Checkbox(\"Hand Shield(BETA)\", false))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "973": "menu:AddComponent(MenuLib.Label(\"                [ Anty Aim ]\", ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"                [ Anty Aim ]\", ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local randompitchtype   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "974": "local RandomPitchtype   = menu:AddComponent(MenuLib.Checkbox(\"Jitter Pitch type\", true))"
            },
            "SLine": {
                "1": "local RandomPitchtype   = menu:AddComponent(MenuLib.Checkbox(\"Jitter Pitch type\", true))"
            }
        },
        {
            "Title": "Local randomtoggle      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "975": "local RandomToggle      = menu:AddComponent(MenuLib.Checkbox(\"Jitter Yaw\", true))"
            },
            "SLine": {
                "1": "local RandomToggle      = menu:AddComponent(MenuLib.Checkbox(\"Jitter Yaw\", true))"
            }
        },
        {
            "Title": "Local mdelay            = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "976": "local mDelay            = menu:AddComponent(MenuLib.Slider(\"jitter Speed\", 1, 66, 1))"
            },
            "SLine": {
                "1": "local mDelay            = menu:AddComponent(MenuLib.Slider(\"jitter Speed\", 1, 66, 1))"
            }
        },
        {
            "Title": "Local atenemy           = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "977": "local atenemy           = menu:AddComponent(MenuLib.Checkbox(\"At enemy\", true))"
            },
            "SLine": {
                "1": "local atenemy           = menu:AddComponent(MenuLib.Checkbox(\"At enemy\", true))"
            }
        },
        {
            "Title": "Local mheadsize          = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "978": "local mHeadSize          = menu:AddComponent(MenuLib.Slider(\"Angle Distance\", 1, 60, 44))"
            },
            "SLine": {
                "1": "local mHeadSize          = menu:AddComponent(MenuLib.Slider(\"Angle Distance\", 1, 60, 44))"
            }
        },
        {
            "Title": "Local jitter_range_real  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "979": "local Jitter_Range_Real  = menu:AddComponent(MenuLib.Slider(\"Jitter Range\", 30, 180, 55))"
            },
            "SLine": {
                "1": "local Jitter_Range_Real  = menu:AddComponent(MenuLib.Slider(\"Jitter Range\", 30, 180, 55))"
            }
        },
        {
            "Title": "Local pitchtype1 = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "995": "local pitchtype1 = gui.GetValue(\"Anti Aim - Pitch\")"
            },
            "SLine": {
                "1": "local pitchtype1 = gui.GetValue(\"Anti Aim - Pitch\")"
            }
        },
        {
            "Title": "Local jitter_range_real1 = jitter_range_real:getvalue",
            "subTitle": "",
            "dLine": {
                "997": "local Jitter_Range_Real1 = Jitter_Range_Real:GetValue() / 2"
            },
            "SLine": {
                "1": "local Jitter_Range_Real1 = Jitter_Range_Real:GetValue() / 2"
            }
        },
        {
            "Title": "Local function getbesttarget",
            "subTitle": "",
            "dLine": {
                "998": "local function GetBestTarget(me, pLocalOrigin, pLocal)"
            },
            "SLine": {
                "1": "local function GetBestTarget(me, pLocalOrigin, pLocal)"
            }
        },
        {
            "Title": "Players = entities.findbyclass",
            "subTitle": "",
            "dLine": {
                "78": "local players = entities.FindByClass(\"CTFPlayer\")",
                "999": "players = entities.FindByClass(\"CTFPlayer\")",
                "4019": "local players = entities.FindByClass(\"CTFPlayer\");"
            },
            "SLine": {
                "1": "players = entities.FindByClass(\"CTFPlayer\")"
            }
        },
        {
            "Title": "Local validtarget = entity and entity:isalive",
            "subTitle": "",
            "dLine": {
                "1005": "local ValidTarget = entity and entity:IsAlive() and entity:GetTeamNumber() ~= me:GetTeamNumber()"
            },
            "SLine": {
                "1": "local ValidTarget = entity and entity:IsAlive() and entity:GetTeamNumber() ~= me:GetTeamNumber()"
            }
        },
        {
            "Title": "If validtarget and ",
            "subTitle": "",
            "dLine": {
                "1006": "if ValidTarget and (entity:GetPropInt(\"m_iClass\") == 2 or entity:GetPropInt(\"m_iClass\") == 8) then"
            },
            "SLine": {
                "1": "if ValidTarget and (entity:GetPropInt(\"m_iClass\") == 2 or entity:GetPropInt(\"m_iClass\") == 8) then"
            }
        },
        {
            "Title": "Local distance = ",
            "subTitle": "",
            "dLine": {
                "1007": "local distance = (entity:GetAbsOrigin() - me:GetAbsOrigin()):Length()"
            },
            "SLine": {
                "1": "local distance = (entity:GetAbsOrigin() - me:GetAbsOrigin()):Length()"
            }
        },
        {
            "Title": "Local targetpos = entity:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1010": "local targetPos = entity:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local targetPos = entity:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local playerpos = me:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1011": "local playerPos = me:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local playerPos = me:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local forwardvec = engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "1012": "local forwardVec = engine.GetViewAngles():Forward()"
            },
            "SLine": {
                "1": "local forwardVec = engine.GetViewAngles():Forward()"
            }
        },
        {
            "Title": "Local targetangle1 = math.deg",
            "subTitle": "",
            "dLine": {
                "1013": "local targetAngle1 = math.deg(math.atan(targetPos.y - playerPos.y, targetPos.x - playerPos.x))"
            },
            "SLine": {
                "1": "local targetAngle1 = math.deg(math.atan(targetPos.y - playerPos.y, targetPos.x - playerPos.x))"
            }
        },
        {
            "Title": "Local viewangle = math.deg",
            "subTitle": "",
            "dLine": {
                "1014": "local viewAngle = math.deg(math.atan(forwardVec.y, forwardVec.x))"
            },
            "SLine": {
                "1": "local viewAngle = math.deg(math.atan(forwardVec.y, forwardVec.x))"
            }
        },
        {
            "Title": "Local aimpos = player:gethitboxpos",
            "subTitle": "",
            "dLine": {
                "1016": "local aimPos = player:GetHitboxPos(options.AimPos)"
            },
            "SLine": {
                "1": "local aimPos = player:GetHitboxPos(options.AimPos)"
            }
        },
        {
            "Title": "Local angles = math.positionangles",
            "subTitle": "",
            "dLine": {
                "1017": "local angles = Math.PositionAngles(engine.GetViewAngles():Forward(), aimPos)"
            },
            "SLine": {
                "1": "local angles = Math.PositionAngles(engine.GetViewAngles():Forward(), aimPos)"
            }
        },
        {
            "Title": "Local entityorigin = entity:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1018": "local entityOrigin = entity:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local entityOrigin = entity:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local function bestfov",
            "subTitle": "",
            "dLine": {
                "1019": "local function bestFov()"
            },
            "SLine": {
                "1": "local function bestFov()"
            }
        },
        {
            "Title": "If not helpers.vispos",
            "subTitle": "",
            "dLine": {
                "1020": "if not Helpers.VisPos(entityOrigin, me:GetEyePos(), aimPos) then"
            },
            "SLine": {
                "1": "if not Helpers.VisPos(entityOrigin, me:GetEyePos(), aimPos) then"
            }
        },
        {
            "Title": "Bestfov",
            "subTitle": "",
            "dLine": {
                "1019": "local function bestFov()",
                "1021": "bestFov()"
            },
            "SLine": {
                "1": "bestFov()"
            }
        },
        {
            "Title": "Local function damagelogger",
            "subTitle": "",
            "dLine": {
                "1025": "local function damageLogger(event)"
            },
            "SLine": {
                "1": "local function damageLogger(event)"
            }
        },
        {
            "Title": "Local victim = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "1026": "local victim = entities.GetByUserID(event:GetInt(\"attacker\"))"
            },
            "SLine": {
                "1": "local victim = entities.GetByUserID(event:GetInt(\"attacker\"))"
            }
        },
        {
            "Title": "Local attacker = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "1027": "local attacker = entities.GetByUserID(event:GetInt(\"userid\"))"
            },
            "SLine": {
                "1": "local attacker = entities.GetByUserID(event:GetInt(\"userid\"))"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "1028": "if (attacker == nil or localPlayer:GetIndex() ~= attacker:GetIndex()) then"
            },
            "SLine": {
                "1": "if (attacker == nil or localPlayer:GetIndex() ~= attacker:GetIndex()) then"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "1030": "callbacks.Register(\"FireGameEvent\", \"exampledamageLogger\", damageLogger)"
            },
            "SLine": {
                "1": "callbacks.Register(\"FireGameEvent\", \"exampledamageLogger\", damageLogger)"
            }
        },
        {
            "Title": "Function createangletable",
            "subTitle": "",
            "dLine": {
                "1033": "function createAngleTable(Jitter_Min_Real, Jitter_Max_Real, dist)"
            },
            "SLine": {
                "1": "function createAngleTable(Jitter_Min_Real, Jitter_Max_Real, dist)"
            }
        },
        {
            "Title": "Local numpoints = math.floor",
            "subTitle": "",
            "dLine": {
                "1034": "local numPoints = math.floor((Jitter_Max_Real - Jitter_Min_Real) / dist) + 1"
            },
            "SLine": {
                "1": "local numPoints = math.floor((Jitter_Max_Real - Jitter_Min_Real) / dist) + 1"
            }
        },
        {
            "Title": "If msafe_angles:getvalue",
            "subTitle": "",
            "dLine": {
                "1039": "if msafe_angles:GetValue() then"
            },
            "SLine": {
                "1": "if msafe_angles:GetValue() then"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "1041": "table.insert(angleTable, angle)"
            },
            "SLine": {
                "1": "table.insert(angleTable, angle)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "1042": "table.insert(evaluationTable, evaluation)"
            },
            "SLine": {
                "1": "table.insert(evaluationTable, evaluation)"
            }
        },
        {
            "Title": "Function randomizevalue",
            "subTitle": "",
            "dLine": {
                "1044": "function randomizeValue(Jitter_Min_Real, Jitter_Max_Real, dist)"
            },
            "SLine": {
                "1": "function randomizeValue(Jitter_Min_Real, Jitter_Max_Real, dist)"
            }
        },
        {
            "Title": "Createangletable",
            "subTitle": "",
            "dLine": {
                "1033": "function createAngleTable(Jitter_Min_Real, Jitter_Max_Real, dist)",
                "1046": "createAngleTable(Jitter_Min_Real, Jitter_Max_Real, dist)"
            },
            "SLine": {
                "1": "createAngleTable(Jitter_Min_Real, Jitter_Max_Real, dist)"
            }
        },
        {
            "Title": "Table.sort",
            "subTitle": "",
            "dLine": {
                "1057": "table.sort(sortedTable, function(a, b) return a.evaluation > b.evaluation end)"
            },
            "SLine": {
                "1": "table.sort(sortedTable, function(a, b) return a.evaluation > b.evaluation end)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "1062": "table.insert(highestRated, sortedTable[i].angle)"
            },
            "SLine": {
                "1": "table.insert(highestRated, sortedTable[i].angle)"
            }
        },
        {
            "Title": "Local randomindex = math.random",
            "subTitle": "",
            "dLine": {
                "1063": "local randomIndex = math.random(1, #highestRated)"
            },
            "SLine": {
                "1": "local randomIndex = math.random(1, #highestRated)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "1068": "table.remove(angleTable, i)"
            },
            "SLine": {
                "1": "table.remove(angleTable, i)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "1069": "table.remove(evaluationTable, i)"
            },
            "SLine": {
                "1": "table.remove(evaluationTable, i)"
            }
        },
        {
            "Title": "Function randomizevalue",
            "subTitle": "",
            "dLine": {
                "1071": "function randomizeValue(jitterMin, jitterMax, dist, gotHit)"
            },
            "SLine": {
                "1": "function randomizeValue(jitterMin, jitterMax, dist, gotHit)"
            }
        },
        {
            "Title": "Createangletable",
            "subTitle": "",
            "dLine": {
                "1072": "createAngleTable(jitterMin, jitterMax, dist)"
            },
            "SLine": {
                "1": "createAngleTable(jitterMin, jitterMax, dist)"
            }
        },
        {
            "Title": "Local function updateyaw",
            "subTitle": "",
            "dLine": {
                "1079": "local function updateYaw(Jitter_Real, Jitter_Fake)"
            },
            "SLine": {
                "1": "local function updateYaw(Jitter_Real, Jitter_Fake)"
            }
        },
        {
            "Title": "Local playerpos = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "1083": "local playerPos = entities.GetLocalPlayer():GetAbsOrigin()"
            },
            "SLine": {
                "1": "local playerPos = entities.GetLocalPlayer():GetAbsOrigin()"
            }
        },
        {
            "Title": "Targetangle = math.deg",
            "subTitle": "",
            "dLine": {
                "1084": "targetAngle = math.deg(math.atan(targetPos.y - playerPos.y, targetPos.x - playerPos.x))"
            },
            "SLine": {
                "1": "targetAngle = math.deg(math.atan(targetPos.y - playerPos.y, targetPos.x - playerPos.x))"
            }
        },
        {
            "Title": "Targetangle = math.floor",
            "subTitle": "",
            "dLine": {
                "1085": "TargetAngle = math.floor(targetAngle - viewAngle)"
            },
            "SLine": {
                "1": "TargetAngle = math.floor(targetAngle - viewAngle)"
            }
        },
        {
            "Title": "If not atenemy:getvalue",
            "subTitle": "",
            "dLine": {
                "1087": "if not atenemy:GetValue() then"
            },
            "SLine": {
                "1": "if not atenemy:GetValue() then"
            }
        },
        {
            "Title": "Yaw = math.floor",
            "subTitle": "",
            "dLine": {
                "1095": "yaw = math.floor(yaw)"
            },
            "SLine": {
                "1": "yaw = math.floor(yaw)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1096": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", yaw)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", yaw)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1102": "gui.SetValue(\"Anti Aim - Custom Yaw (Real)\", yaw)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Yaw (Real)\", yaw)"
            }
        },
        {
            "Title": "If not plocal:isalive",
            "subTitle": "",
            "dLine": {
                "1103": "if not pLocal:IsAlive() then return end"
            },
            "SLine": {
                "1": "if not pLocal:IsAlive() then return end"
            }
        },
        {
            "Title": "Pitchtype1 = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "995": "local pitchtype1 = gui.GetValue(\"Anti Aim - Pitch\")",
                "1104": "pitchtype1 = gui.GetValue(\"Anti Aim - Pitch\")"
            },
            "SLine": {
                "1": "pitchtype1 = gui.GetValue(\"Anti Aim - Pitch\")"
            }
        },
        {
            "Title": "Local plocalorigin = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1105": "local pLocalOrigin = pLocal:GetAbsOrigin() + Vector3(0, 0, 75)"
            },
            "SLine": {
                "1": "local pLocalOrigin = pLocal:GetAbsOrigin() + Vector3(0, 0, 75)"
            }
        },
        {
            "Title": "If mautopriority:getvalue",
            "subTitle": "",
            "dLine": {
                "1111": "if mAutoPriority:GetValue() then"
            },
            "SLine": {
                "1": "if mAutoPriority:GetValue() then"
            }
        },
        {
            "Title": "For _, vplayer in pairs",
            "subTitle": "",
            "dLine": {
                "1112": "for _, vPlayer in pairs(players) do"
            },
            "SLine": {
                "1": "for _, vPlayer in pairs(players) do"
            }
        },
        {
            "Title": "If vplayer ~= nil and vplayer:getteamnumber",
            "subTitle": "",
            "dLine": {
                "1113": "if vPlayer ~= nil and vPlayer:GetTeamNumber() ~= pLocal:GetTeamNumber() then"
            },
            "SLine": {
                "1": "if vPlayer ~= nil and vPlayer:GetTeamNumber() ~= pLocal:GetTeamNumber() then"
            }
        },
        {
            "Title": "If playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "1114": "if playerlist.GetPriority(vPlayer) == 0 then"
            },
            "SLine": {
                "1": "if playerlist.GetPriority(vPlayer) == 0 then"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "1115": "playerlist.SetPriority(vPlayer, 10)"
            },
            "SLine": {
                "1": "playerlist.SetPriority(vPlayer, 10)"
            }
        },
        {
            "Title": "If playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "1116": "if playerlist.GetPriority(vPlayer) == 10 then"
            },
            "SLine": {
                "1": "if playerlist.GetPriority(vPlayer) == 10 then"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "1117": "playerlist.SetPriority(vPlayer, 0)"
            },
            "SLine": {
                "1": "playerlist.SetPriority(vPlayer, 0)"
            }
        },
        {
            "Title": "If mslowwalk:getvalue",
            "subTitle": "",
            "dLine": {
                "1118": "if mslowwalk:GetValue() ~= 100 and input.IsButtonDown(mSKey:GetValue()) then"
            },
            "SLine": {
                "1": "if mslowwalk:GetValue() ~= 100 and input.IsButtonDown(mSKey:GetValue()) then"
            }
        },
        {
            "Title": "Local slowwalk = mslowwalk:getvalue",
            "subTitle": "",
            "dLine": {
                "1119": "local slowwalk = mslowwalk:GetValue() * 0.01"
            },
            "SLine": {
                "1": "local slowwalk = mslowwalk:GetValue() * 0.01"
            }
        },
        {
            "Title": "Usercmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "1120": "userCmd:SetForwardMove(userCmd:GetForwardMove()*slowwalk)"
            },
            "SLine": {
                "1": "userCmd:SetForwardMove(userCmd:GetForwardMove()*slowwalk)"
            }
        },
        {
            "Title": "Usercmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "1121": "userCmd:SetSideMove(userCmd:GetSideMove()*slowwalk)"
            },
            "SLine": {
                "1": "userCmd:SetSideMove(userCmd:GetSideMove()*slowwalk)"
            }
        },
        {
            "Title": "Usercmd:setupmove",
            "subTitle": "",
            "dLine": {
                "1122": "userCmd:SetUpMove(userCmd:GetUpMove()*slowwalk)"
            },
            "SLine": {
                "1": "userCmd:SetUpMove(userCmd:GetUpMove()*slowwalk)"
            }
        },
        {
            "Title": "If usercmd.command_number % mdelay:getvalue",
            "subTitle": "",
            "dLine": {
                "1123": "if userCmd.command_number % mDelay:GetValue() == 0 then"
            },
            "SLine": {
                "1": "if userCmd.command_number % mDelay:GetValue() == 0 then"
            }
        },
        {
            "Title": "Updateyaw",
            "subTitle": "",
            "dLine": {
                "1124": "updateYaw(jitter_Real, jitter_Fake)"
            },
            "SLine": {
                "1": "updateYaw(jitter_Real, jitter_Fake)"
            }
        },
        {
            "Title": "If mlegjitter:getvalue",
            "subTitle": "",
            "dLine": {
                "1125": "if mLegJitter:GetValue() == true then"
            },
            "SLine": {
                "1": "if mLegJitter:GetValue() == true then"
            }
        },
        {
            "Title": "Local vvelocity  = plocal:estimateabsvelocity",
            "subTitle": "",
            "dLine": {
                "1126": "local vVelocity  = pLocal:EstimateAbsVelocity()"
            },
            "SLine": {
                "1": "local vVelocity  = pLocal:EstimateAbsVelocity()"
            }
        },
        {
            "Title": "Usercmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "1129": "userCmd:SetSideMove(mlgstrengh:GetValue())"
            },
            "SLine": {
                "1": "userCmd:SetSideMove(mlgstrengh:GetValue())"
            }
        },
        {
            "Title": "Usercmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "1130": "userCmd:SetSideMove(-mlgstrengh:GetValue())"
            },
            "SLine": {
                "1": "userCmd:SetSideMove(-mlgstrengh:GetValue())"
            }
        },
        {
            "Title": "Usercmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "1132": "userCmd:SetForwardMove(mlgstrengh:GetValue())"
            },
            "SLine": {
                "1": "userCmd:SetForwardMove(mlgstrengh:GetValue())"
            }
        },
        {
            "Title": "Usercmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "1133": "userCmd:SetForwardMove(-mlgstrengh:GetValue())"
            },
            "SLine": {
                "1": "userCmd:SetForwardMove(-mlgstrengh:GetValue())"
            }
        },
        {
            "Title": "Jitter_range_real1 = jitter_range_real:getvalue",
            "subTitle": "",
            "dLine": {
                "997": "local Jitter_Range_Real1 = Jitter_Range_Real:GetValue() / 2",
                "1134": "Jitter_Range_Real1 = Jitter_Range_Real:GetValue() / 2"
            },
            "SLine": {
                "1": "Jitter_Range_Real1 = Jitter_Range_Real:GetValue() / 2"
            }
        },
        {
            "Title": "Local currenttarget1 = getbesttarget",
            "subTitle": "",
            "dLine": {
                "1135": "local currentTarget1 = GetBestTarget(me, pLocalOrigin)"
            },
            "SLine": {
                "1": "local currentTarget1 = GetBestTarget(me, pLocalOrigin)"
            }
        },
        {
            "Title": "Currenttarget = currenttarget1.entity:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1137": "currentTarget = currentTarget1.entity:GetAbsOrigin()"
            },
            "SLine": {
                "1": "currentTarget = currentTarget1.entity:GetAbsOrigin()"
            }
        },
        {
            "Title": "Currenttarget = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1138": "currentTarget = pLocal:GetAbsOrigin()"
            },
            "SLine": {
                "1": "currentTarget = pLocal:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local class = plocal:getpropint",
            "subTitle": "",
            "dLine": {
                "1139": "local class = pLocal:GetPropInt(\"m_iClass\")"
            },
            "SLine": {
                "1": "local class = pLocal:GetPropInt(\"m_iClass\")"
            }
        },
        {
            "Title": "Local aimbottarget = getbesttarget",
            "subTitle": "",
            "dLine": {
                "1140": "local AimbotTarget = GetBestTarget(me)"
            },
            "SLine": {
                "1": "local AimbotTarget = GetBestTarget(me)"
            }
        },
        {
            "Title": "If minfakelag:getvalue",
            "subTitle": "",
            "dLine": {
                "1141": "if MinFakeLag:GetValue() < MaxFakeLag:GetValue() then"
            },
            "SLine": {
                "1": "if MinFakeLag:GetValue() < MaxFakeLag:GetValue() then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1142": "gui.SetValue(\"Fake Lag Value (MS)\", math.random(MinFakeLag:GetValue(), MaxFakeLag:GetValue()))"
            },
            "SLine": {
                "1": "gui.SetValue(\"Fake Lag Value (MS)\", math.random(MinFakeLag:GetValue(), MaxFakeLag:GetValue()))"
            }
        },
        {
            "Title": "Local head_size = mheadsize:getvalue",
            "subTitle": "",
            "dLine": {
                "1143": "local Head_size = mHeadSize:GetValue()"
            },
            "SLine": {
                "1": "local Head_size = mHeadSize:GetValue()"
            }
        },
        {
            "Title": "If atenemy:getvalue",
            "subTitle": "",
            "dLine": {
                "1146": "if atenemy:GetValue() then"
            },
            "SLine": {
                "1": "if atenemy:GetValue() then"
            }
        },
        {
            "Title": "If mhandshield:getvalue",
            "subTitle": "",
            "dLine": {
                "1147": "if mHandShield:GetValue() then"
            },
            "SLine": {
                "1": "if mHandShield:GetValue() then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "1148": "if (userCmd:GetButtons() & IN_ATTACK) == 1 then"
            },
            "SLine": {
                "1": "if (userCmd:GetButtons() & IN_ATTACK) == 1 then"
            }
        },
        {
            "Title": "Jitter_real = randomizevalue",
            "subTitle": "",
            "dLine": {
                "1149": "jitter_Real = randomizeValue(Jitter_Min_Real, Jitter_Max_Real, Head_size)"
            },
            "SLine": {
                "1": "jitter_Real = randomizeValue(Jitter_Min_Real, Jitter_Max_Real, Head_size)"
            }
        },
        {
            "Title": "If plocal:incond",
            "subTitle": "",
            "dLine": {
                "1151": "if pLocal:InCond(1) == true then"
            },
            "SLine": {
                "1": "if pLocal:InCond(1) == true then"
            }
        },
        {
            "Title": "Local number1 = math.random",
            "subTitle": "",
            "dLine": {
                "1153": "local Number1 = math.random(1, 3)"
            },
            "SLine": {
                "1": "local Number1 = math.random(1, 3)"
            }
        },
        {
            "Title": "Jitter_real = randomizevalue",
            "subTitle": "",
            "dLine": {
                "1156": "jitter_Real = randomizeValue(Jitter_Min_Real * 2, Jitter_Max_Real * 2, Head_size)"
            },
            "SLine": {
                "1": "jitter_Real = randomizeValue(Jitter_Min_Real * 2, Jitter_Max_Real * 2, Head_size)"
            }
        },
        {
            "Title": "Local number1 = math.random",
            "subTitle": "",
            "dLine": {
                "1157": "local Number1 = math.random(1, 4)"
            },
            "SLine": {
                "1": "local Number1 = math.random(1, 4)"
            }
        },
        {
            "Title": "Local yawfake = math.random",
            "subTitle": "",
            "dLine": {
                "1159": "local YawFake = math.random(-180, 180)"
            },
            "SLine": {
                "1": "local YawFake = math.random(-180, 180)"
            }
        },
        {
            "Title": "While math.abs",
            "subTitle": "",
            "dLine": {
                "1160": "while math.abs(YawFake - gui.GetValue(\"Anti Aim - Custom Yaw (Real)\")) <= 37 do"
            },
            "SLine": {
                "1": "while math.abs(YawFake - gui.GetValue(\"Anti Aim - Custom Yaw (Real)\")) <= 37 do"
            }
        },
        {
            "Title": "Yawfake = math.random",
            "subTitle": "",
            "dLine": {
                "1159": "local YawFake = math.random(-180, 180)",
                "1161": "YawFake = math.random(-180, 180)"
            },
            "SLine": {
                "1": "YawFake = math.random(-180, 180)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1162": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", YawFake)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", YawFake)"
            }
        },
        {
            "Title": "If randompitchtype:getvalue",
            "subTitle": "",
            "dLine": {
                "1163": "if RandomPitchtype:GetValue() then"
            },
            "SLine": {
                "1": "if RandomPitchtype:GetValue() then"
            }
        },
        {
            "Title": "Local function setminmax",
            "subTitle": "",
            "dLine": {
                "1164": "local function setMinMax(pitchType)"
            },
            "SLine": {
                "1": "local function setMinMax(pitchType)"
            }
        },
        {
            "Title": "Local min, max = setminmax",
            "subTitle": "",
            "dLine": {
                "1171": "local min, max = setMinMax(BEST)"
            },
            "SLine": {
                "1": "local min, max = setMinMax(BEST)"
            }
        },
        {
            "Title": "Min, max = setminmax",
            "subTitle": "",
            "dLine": {
                "1172": "min, max = setMinMax(UNSAFE)"
            },
            "SLine": {
                "1": "min, max = setMinMax(UNSAFE)"
            }
        },
        {
            "Title": "If not downpitch:getvalue",
            "subTitle": "",
            "dLine": {
                "1173": "if not downPitch:GetValue() then"
            },
            "SLine": {
                "1": "if not downPitch:GetValue() then"
            }
        },
        {
            "Title": "Min, max = setminmax",
            "subTitle": "",
            "dLine": {
                "1186": "min, max = setMinMax(pitchType)"
            },
            "SLine": {
                "1": "min, max = setMinMax(pitchType)"
            }
        },
        {
            "Title": "Number = math.random",
            "subTitle": "",
            "dLine": {
                "1187": "number = math.random(min, max)"
            },
            "SLine": {
                "1": "number = math.random(min, max)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1188": "gui.SetValue(\"Anti Aim - Pitch\", 1)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Pitch\", 1)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1190": "gui.SetValue(\"Anti Aim - Pitch\", 3)"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Pitch\", 3)"
            }
        },
        {
            "Title": "If usercmd:getbuttons",
            "subTitle": "",
            "dLine": {
                "1191": "if userCmd:GetButtons(userCmd.buttons | IN_ZOOM) then"
            },
            "SLine": {
                "1": "if userCmd:GetButtons(userCmd.buttons | IN_ZOOM) then"
            }
        },
        {
            "Title": "Offset1 = offset:getvalue",
            "subTitle": "",
            "dLine": {
                "1192": "offset1 = offset:GetValue() - 25"
            },
            "SLine": {
                "1": "offset1 = offset:GetValue() - 25"
            }
        },
        {
            "Title": "Elseif usercmd:getbuttons",
            "subTitle": "",
            "dLine": {
                "1193": "elseif userCmd:GetButtons(userCmd.buttons | ~IN_ZOOM) then"
            },
            "SLine": {
                "1": "elseif userCmd:GetButtons(userCmd.buttons | ~IN_ZOOM) then"
            }
        },
        {
            "Title": "Offset1 = offset:getvalue",
            "subTitle": "",
            "dLine": {
                "1194": "offset1 = offset:GetValue() - 7"
            },
            "SLine": {
                "1": "offset1 = offset:GetValue() - 7"
            }
        },
        {
            "Title": "Local direction = vector3",
            "subTitle": "",
            "dLine": {
                "1195": "local direction = Vector3(0, 0, 0)"
            },
            "SLine": {
                "1": "local direction = Vector3(0, 0, 0)"
            }
        },
        {
            "Title": "Direction = vector3",
            "subTitle": "",
            "dLine": {
                "1201": "direction = Vector3(math.cos(math.rad(yaw)), math.sin(math.rad(yaw)), 0)",
                "1212": "direction = Vector3(math.cos(math.rad(yaw)), math.sin(math.rad(yaw)), 0) + yaw_public_real"
            },
            "SLine": {
                "1": "direction = Vector3(math.cos(math.rad(yaw)), math.sin(math.rad(yaw)), 0)"
            }
        },
        {
            "Title": "Yaw = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "1202": "yaw = gui.GetValue(\"Anti Aim - Custom Yaw (Real)\")"
            },
            "SLine": {
                "1": "yaw = gui.GetValue(\"Anti Aim - Custom Yaw (Real)\")"
            }
        },
        {
            "Title": "Local center = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "1203": "local center = pLocal:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local center = pLocal:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local range = mmindicator:getvalue",
            "subTitle": "",
            "dLine": {
                "1204": "local range = mmIndicator:GetValue()"
            },
            "SLine": {
                "1": "local range = mmIndicator:GetValue()"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1205": "draw.Color( 81, 255, 54, 255 )"
            },
            "SLine": {
                "1": "draw.Color( 81, 255, 54, 255 )"
            }
        },
        {
            "Title": "Screenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "1206": "screenPos = client.WorldToScreen(center)"
            },
            "SLine": {
                "1": "screenPos = client.WorldToScreen(center)"
            }
        },
        {
            "Title": "Local screenpos1 = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "1208": "local screenPos1 = client.WorldToScreen(endPoint)"
            },
            "SLine": {
                "1": "local screenPos1 = client.WorldToScreen(endPoint)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "1209": "draw.Line(screenPos[1], screenPos[2], screenPos1[1], screenPos1[2])"
            },
            "SLine": {
                "1": "draw.Line(screenPos[1], screenPos[2], screenPos1[1], screenPos1[2])"
            }
        },
        {
            "Title": "Direction = vector3",
            "subTitle": "",
            "dLine": {
                "1212": "direction = Vector3(math.cos(math.rad(yaw)), math.sin(math.rad(yaw)), 0) + yaw_public_real"
            },
            "SLine": {
                "1": "direction = Vector3(math.cos(math.rad(yaw)), math.sin(math.rad(yaw)), 0) + yaw_public_real"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1213": "draw.Color( 255, 0, 0, 255 )"
            },
            "SLine": {
                "1": "draw.Color( 255, 0, 0, 255 )"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "1214": "gui.SetValue(\"Anti Aim - Custom Pitch (Real)\", math.random(-90, 90 ))"
            },
            "SLine": {
                "1": "gui.SetValue(\"Anti Aim - Custom Pitch (Real)\", math.random(-90, 90 ))"
            }
        },
        {
            "Title": "If unloadlib ~= nil then unloadlib",
            "subTitle": "",
            "dLine": {
                "1216": "if UnloadLib ~= nil then UnloadLib() end"
            },
            "SLine": {
                "1": "if UnloadLib ~= nil then UnloadLib() end"
            }
        },
        {
            "Title": "Local libloaded, lnxlib = pcall",
            "subTitle": "",
            "dLine": {
                "1217": "local libLoaded, lnxLib = pcall(require, \"LNXlib\")"
            },
            "SLine": {
                "1": "local libLoaded, lnxLib = pcall(require, \"LNXlib\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "1218": "assert(libLoaded, \"LNXlib not found, please install it!\")"
            },
            "SLine": {
                "1": "assert(libLoaded, \"LNXlib not found, please install it!\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "1219": "assert(lnxLib.GetVersion() >= 0.94, \"LNXlib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(lnxLib.GetVersion() >= 0.94, \"LNXlib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Local screenwidth, screenheight = draw.getscreensize",
            "subTitle": "",
            "dLine": {
                "1226": "local ScreenWidth, ScreenHeight = draw.GetScreenSize()"
            },
            "SLine": {
                "1": "local ScreenWidth, ScreenHeight = draw.GetScreenSize()"
            }
        },
        {
            "Title": "Local mousehelper = keyhelper.new",
            "subTitle": "",
            "dLine": {
                "1228": "local MouseHelper = KeyHelper.new(MOUSE_LEFT)"
            },
            "SLine": {
                "1": "local MouseHelper = KeyHelper.new(MOUSE_LEFT)"
            }
        },
        {
            "Title": "Local enterhelper = keyhelper.new",
            "subTitle": "",
            "dLine": {
                "1229": "local EnterHelper = KeyHelper.new(KEY_ENTER)"
            },
            "SLine": {
                "1": "local EnterHelper = KeyHelper.new(KEY_ENTER)"
            }
        },
        {
            "Title": "Local leftarrow = keyhelper.new",
            "subTitle": "",
            "dLine": {
                "1230": "local LeftArrow = KeyHelper.new(KEY_LEFT)"
            },
            "SLine": {
                "1": "local LeftArrow = KeyHelper.new(KEY_LEFT)"
            }
        },
        {
            "Title": "Local rightarrow = keyhelper.new",
            "subTitle": "",
            "dLine": {
                "1231": "local RightArrow = KeyHelper.new(KEY_RIGHT)"
            },
            "SLine": {
                "1": "local RightArrow = KeyHelper.new(KEY_RIGHT)"
            }
        },
        {
            "Title": "Local windowstack = stack.new",
            "subTitle": "",
            "dLine": {
                "1256": "local WindowStack = Stack.new()"
            },
            "SLine": {
                "1": "local WindowStack = Stack.new()"
            }
        },
        {
            "Title": "Local framestack = stack.new",
            "subTitle": "",
            "dLine": {
                "1257": "local FrameStack = Stack.new()"
            },
            "SLine": {
                "1": "local FrameStack = Stack.new()"
            }
        },
        {
            "Title": "Local colorstack = stack.new",
            "subTitle": "",
            "dLine": {
                "1258": "local ColorStack = Stack.new()"
            },
            "SLine": {
                "1": "local ColorStack = Stack.new()"
            }
        },
        {
            "Title": "Local stylestack = stack.new",
            "subTitle": "",
            "dLine": {
                "1259": "local StyleStack = Stack.new()"
            },
            "SLine": {
                "1": "local StyleStack = Stack.new()"
            }
        },
        {
            "Title": "Local function unpackcolor",
            "subTitle": "",
            "dLine": {
                "1260": "local function UnpackColor(color)"
            },
            "SLine": {
                "1": "local function UnpackColor(color)"
            }
        },
        {
            "Title": "Function immenu.getversion",
            "subTitle": "",
            "dLine": {
                "1262": "function ImMenu.GetVersion() return 0.61 end"
            },
            "SLine": {
                "1": "function ImMenu.GetVersion() return 0.61 end"
            }
        },
        {
            "Title": "Function immenu.getstyle",
            "subTitle": "",
            "dLine": {
                "1263": "function ImMenu.GetStyle() return table.readOnly(Style) end"
            },
            "SLine": {
                "1": "function ImMenu.GetStyle() return table.readOnly(Style) end"
            }
        },
        {
            "Title": "Function immenu.getcolors",
            "subTitle": "",
            "dLine": {
                "1264": "function ImMenu.GetColors() return table.readOnly(Colors) end"
            },
            "SLine": {
                "1": "function ImMenu.GetColors() return table.readOnly(Colors) end"
            }
        },
        {
            "Title": "Function immenu.getcurrentwindow",
            "subTitle": "",
            "dLine": {
                "1265": "function ImMenu.GetCurrentWindow() return WindowStack:peek() end"
            },
            "SLine": {
                "1": "function ImMenu.GetCurrentWindow() return WindowStack:peek() end"
            }
        },
        {
            "Title": "Function immenu.getcurrentframe",
            "subTitle": "",
            "dLine": {
                "1266": "function ImMenu.GetCurrentFrame() return FrameStack:peek() end"
            },
            "SLine": {
                "1": "function ImMenu.GetCurrentFrame() return FrameStack:peek() end"
            }
        },
        {
            "Title": "Function immenu.pushcolor",
            "subTitle": "",
            "dLine": {
                "1267": "function ImMenu.PushColor(key, color)"
            },
            "SLine": {
                "1": "function ImMenu.PushColor(key, color)"
            }
        },
        {
            "Title": "Colorstack:push",
            "subTitle": "",
            "dLine": {
                "1268": "ColorStack:push({ Key = key, Value = Colors[key] })"
            },
            "SLine": {
                "1": "ColorStack:push({ Key = key, Value = Colors[key] })"
            }
        },
        {
            "Title": "Function immenu.popcolor",
            "subTitle": "",
            "dLine": {
                "1270": "function ImMenu.PopColor(amount)"
            },
            "SLine": {
                "1": "function ImMenu.PopColor(amount)"
            }
        },
        {
            "Title": "Local color = colorstack:pop",
            "subTitle": "",
            "dLine": {
                "1273": "local color = ColorStack:pop()"
            },
            "SLine": {
                "1": "local color = ColorStack:pop()"
            }
        },
        {
            "Title": "Function immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1275": "function ImMenu.PushStyle(key, style)"
            },
            "SLine": {
                "1": "function ImMenu.PushStyle(key, style)"
            }
        },
        {
            "Title": "Stylestack:push",
            "subTitle": "",
            "dLine": {
                "1276": "StyleStack:push({ Key = key, Value = Style[key] })"
            },
            "SLine": {
                "1": "StyleStack:push({ Key = key, Value = Style[key] })"
            }
        },
        {
            "Title": "Function immenu.popstyle",
            "subTitle": "",
            "dLine": {
                "1278": "function ImMenu.PopStyle(amount)"
            },
            "SLine": {
                "1": "function ImMenu.PopStyle(amount)"
            }
        },
        {
            "Title": "Local style = stylestack:pop",
            "subTitle": "",
            "dLine": {
                "1279": "local style = StyleStack:pop()"
            },
            "SLine": {
                "1": "local style = StyleStack:pop()"
            }
        },
        {
            "Title": "Function immenu.addcolor",
            "subTitle": "",
            "dLine": {
                "1281": "function ImMenu.AddColor(key, value)"
            },
            "SLine": {
                "1": "function ImMenu.AddColor(key, value)"
            }
        },
        {
            "Title": "Function immenu.addstyle",
            "subTitle": "",
            "dLine": {
                "1283": "function ImMenu.AddStyle(key, value)"
            },
            "SLine": {
                "1": "function ImMenu.AddStyle(key, value)"
            }
        },
        {
            "Title": "Function immenu.updatecursor",
            "subTitle": "",
            "dLine": {
                "1285": "function ImMenu.UpdateCursor(w, h)"
            },
            "SLine": {
                "1": "function ImMenu.UpdateCursor(w, h)"
            }
        },
        {
            "Title": "Local frame = immenu.getcurrentframe",
            "subTitle": "",
            "dLine": {
                "1286": "local frame = ImMenu.GetCurrentFrame()"
            },
            "SLine": {
                "1": "local frame = ImMenu.GetCurrentFrame()"
            }
        },
        {
            "Title": "Frame.w = math.max",
            "subTitle": "",
            "dLine": {
                "1290": "frame.W = math.max(frame.W, w)"
            },
            "SLine": {
                "1": "frame.W = math.max(frame.W, w)"
            }
        },
        {
            "Title": "Frame.h = math.max",
            "subTitle": "",
            "dLine": {
                "1291": "frame.H = math.max(frame.H, ImMenu.Cursor.Y - frame.Y)"
            },
            "SLine": {
                "1": "frame.H = math.max(frame.H, ImMenu.Cursor.Y - frame.Y)"
            }
        },
        {
            "Title": "Frame.w = math.max",
            "subTitle": "",
            "dLine": {
                "1294": "frame.W = math.max(frame.W, ImMenu.Cursor.X - frame.X)"
            },
            "SLine": {
                "1": "frame.W = math.max(frame.W, ImMenu.Cursor.X - frame.X)"
            }
        },
        {
            "Title": "Frame.h = math.max",
            "subTitle": "",
            "dLine": {
                "1295": "frame.H = math.max(frame.H, h)"
            },
            "SLine": {
                "1": "frame.H = math.max(frame.H, h)"
            }
        },
        {
            "Title": "Function immenu.interactioncolor",
            "subTitle": "",
            "dLine": {
                "1296": "function ImMenu.InteractionColor(hovered, active)"
            },
            "SLine": {
                "1": "function ImMenu.InteractionColor(hovered, active)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1298": "draw.Color(UnpackColor(Colors.ItemActive))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.ItemActive))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1300": "draw.Color(UnpackColor(Colors.ItemHover))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.ItemHover))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1301": "draw.Color(UnpackColor(Colors.Item))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.Item))"
            }
        },
        {
            "Title": "Function immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1302": "function ImMenu.GetSize(width, height)"
            },
            "SLine": {
                "1": "function ImMenu.GetSize(width, height)"
            }
        },
        {
            "Title": "Function immenu.getinteraction",
            "subTitle": "",
            "dLine": {
                "1307": "function ImMenu.GetInteraction(x, y, width, height, id)"
            },
            "SLine": {
                "1": "function ImMenu.GetInteraction(x, y, width, height, id)"
            }
        },
        {
            "Title": "Local hovered = input.mouseinbounds",
            "subTitle": "",
            "dLine": {
                "1310": "local hovered = Input.MouseInBounds(x, y, x + width, y + height) or id == ImMenu.ActiveItem"
            },
            "SLine": {
                "1": "local hovered = Input.MouseInBounds(x, y, x + width, y + height) or id == ImMenu.ActiveItem"
            }
        },
        {
            "Title": "Local clicked = hovered and ",
            "subTitle": "",
            "dLine": {
                "1311": "local clicked = hovered and (MouseHelper:Pressed() or EnterHelper:Pressed())"
            },
            "SLine": {
                "1": "local clicked = hovered and (MouseHelper:Pressed() or EnterHelper:Pressed())"
            }
        },
        {
            "Title": "Local active = hovered and ",
            "subTitle": "",
            "dLine": {
                "1312": "local active = hovered and (MouseHelper:Down() or EnterHelper:Down())"
            },
            "SLine": {
                "1": "local active = hovered and (MouseHelper:Down() or EnterHelper:Down())"
            }
        },
        {
            "Title": "Function immenu.getlabel",
            "subTitle": "",
            "dLine": {
                "1318": "function ImMenu.GetLabel(text)"
            },
            "SLine": {
                "1": "function ImMenu.GetLabel(text)"
            }
        },
        {
            "Title": "For label in text:gmatch",
            "subTitle": "",
            "dLine": {
                "1319": "for label in text:gmatch(\"(.+)###(.+)\") do"
            },
            "SLine": {
                "1": "for label in text:gmatch(\"(.+)###(.+)\") do"
            }
        },
        {
            "Title": "Function immenu.space",
            "subTitle": "",
            "dLine": {
                "1322": "function ImMenu.Space(size)"
            },
            "SLine": {
                "1": "function ImMenu.Space(size)"
            }
        },
        {
            "Title": "Immenu.updatecursor",
            "subTitle": "",
            "dLine": {
                "1324": "ImMenu.UpdateCursor(size, size)"
            },
            "SLine": {
                "1": "ImMenu.UpdateCursor(size, size)"
            }
        },
        {
            "Title": "Function immenu.separator",
            "subTitle": "",
            "dLine": {
                "1325": "function ImMenu.Separator()"
            },
            "SLine": {
                "1": "function ImMenu.Separator()"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1327": "local width, height = ImMenu.GetSize(250, Style.Spacing * 2)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(250, Style.Spacing * 2)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1328": "draw.Color(UnpackColor(Colors.WindowBorder))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.WindowBorder))"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "1329": "draw.Line(x, y + height // 2, x + width, y + height // 2)"
            },
            "SLine": {
                "1": "draw.Line(x, y + height // 2, x + width, y + height // 2)"
            }
        },
        {
            "Title": "Immenu.updatecursor",
            "subTitle": "",
            "dLine": {
                "1330": "ImMenu.UpdateCursor(width, height)"
            },
            "SLine": {
                "1": "ImMenu.UpdateCursor(width, height)"
            }
        },
        {
            "Title": "Function immenu.beginframe",
            "subTitle": "",
            "dLine": {
                "1331": "function ImMenu.BeginFrame(align)"
            },
            "SLine": {
                "1": "function ImMenu.BeginFrame(align)"
            }
        },
        {
            "Title": "Framestack:push",
            "subTitle": "",
            "dLine": {
                "1333": "FrameStack:push({ X = ImMenu.Cursor.X, Y = ImMenu.Cursor.Y, W = 0, H = 0, A = align })"
            },
            "SLine": {
                "1": "FrameStack:push({ X = ImMenu.Cursor.X, Y = ImMenu.Cursor.Y, W = 0, H = 0, A = align })"
            }
        },
        {
            "Title": "Function immenu.endframe",
            "subTitle": "",
            "dLine": {
                "1336": "function ImMenu.EndFrame()"
            },
            "SLine": {
                "1": "function ImMenu.EndFrame()"
            }
        },
        {
            "Title": "Local frame = framestack:pop",
            "subTitle": "",
            "dLine": {
                "1337": "local frame = FrameStack:pop()"
            },
            "SLine": {
                "1": "local frame = FrameStack:pop()"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1345": "draw.Color(UnpackColor(Colors.FrameBorder))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.FrameBorder))"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "1346": "draw.OutlinedRect(frame.X, frame.Y, frame.X + frame.W, frame.Y + frame.H)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(frame.X, frame.Y, frame.X + frame.W, frame.Y + frame.H)"
            }
        },
        {
            "Title": "Immenu.updatecursor",
            "subTitle": "",
            "dLine": {
                "1347": "ImMenu.UpdateCursor(frame.W, frame.H)"
            },
            "SLine": {
                "1": "ImMenu.UpdateCursor(frame.W, frame.H)"
            }
        },
        {
            "Title": "Function immenu.begin",
            "subTitle": "",
            "dLine": {
                "1349": "function ImMenu.Begin(title, visible)"
            },
            "SLine": {
                "1": "function ImMenu.Begin(title, visible)"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "1358": "draw.SetFont(Style.Font)"
            },
            "SLine": {
                "1": "draw.SetFont(Style.Font)"
            }
        },
        {
            "Title": "Local titletext = immenu.getlabel",
            "subTitle": "",
            "dLine": {
                "1360": "local titleText = ImMenu.GetLabel(title)"
            },
            "SLine": {
                "1": "local titleText = ImMenu.GetLabel(title)"
            }
        },
        {
            "Title": "Local txtwidth, txtheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "1361": "local txtWidth, txtHeight = draw.GetTextSize(titleText)"
            },
            "SLine": {
                "1": "local txtWidth, txtHeight = draw.GetTextSize(titleText)"
            }
        },
        {
            "Title": "Local hovered, clicked, active = immenu.getinteraction",
            "subTitle": "",
            "dLine": {
                "1363": "local hovered, clicked, active = ImMenu.GetInteraction(window.X, window.Y, window.W, titleHeight, title)"
            },
            "SLine": {
                "1": "local hovered, clicked, active = ImMenu.GetInteraction(window.X, window.Y, window.W, titleHeight, title)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1364": "draw.Color(table.unpack(Colors.Title))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(Colors.Title))"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "1365": "draw.OutlinedRect(window.X, window.Y, window.X + window.W, window.Y + window.H)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(window.X, window.Y, window.X + window.W, window.Y + window.H)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1366": "draw.FilledRect(window.X, window.Y, window.X + window.W, window.Y + titleHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(window.X, window.Y, window.X + window.W, window.Y + titleHeight)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1367": "draw.Color(table.unpack(Colors.Text))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(Colors.Text))"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "1368": "draw.Text(window.X + (window.W // 2) - (txtWidth // 2), window.Y + (20 // 2) - (txtHeight // 2), titleText)"
            },
            "SLine": {
                "1": "draw.Text(window.X + (window.W // 2) - (txtWidth // 2), window.Y + (20 // 2) - (txtHeight // 2), titleText)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1369": "draw.Color(table.unpack(Colors.Window))"
            },
            "SLine": {
                "1": "draw.Color(table.unpack(Colors.Window))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1370": "draw.FilledRect(window.X, window.Y + titleHeight, window.X + window.W, window.Y + window.H + titleHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(window.X, window.Y + titleHeight, window.X + window.W, window.Y + window.H + titleHeight)"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "1372": "draw.OutlinedRect(window.X, window.Y, window.X + window.W, window.Y + window.H + titleHeight)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(window.X, window.Y, window.X + window.W, window.Y + window.H + titleHeight)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "1373": "draw.Line(window.X, window.Y + titleHeight, window.X + window.W, window.Y + titleHeight)"
            },
            "SLine": {
                "1": "draw.Line(window.X, window.Y + titleHeight, window.X + window.W, window.Y + titleHeight)"
            }
        },
        {
            "Title": "Local mx, my = table.unpack",
            "subTitle": "",
            "dLine": {
                "1374": "local mX, mY = table.unpack(input.GetMousePos())"
            },
            "SLine": {
                "1": "local mX, mY = table.unpack(input.GetMousePos())"
            }
        },
        {
            "Title": "Window.x = math.clamp",
            "subTitle": "",
            "dLine": {
                "1377": "window.X = math.clamp(mX - DragPos.X, 0, ScreenWidth - window.W)"
            },
            "SLine": {
                "1": "window.X = math.clamp(mX - DragPos.X, 0, ScreenWidth - window.W)"
            }
        },
        {
            "Title": "Window.y = math.clamp",
            "subTitle": "",
            "dLine": {
                "1378": "window.Y = math.clamp(mY - DragPos.Y, 0, ScreenHeight - window.H - titleHeight)"
            },
            "SLine": {
                "1": "window.Y = math.clamp(mY - DragPos.Y, 0, ScreenHeight - window.H - titleHeight)"
            }
        },
        {
            "Title": "Immenu.beginframe",
            "subTitle": "",
            "dLine": {
                "1381": "ImMenu.BeginFrame()"
            },
            "SLine": {
                "1": "ImMenu.BeginFrame()"
            }
        },
        {
            "Title": "Windowstack:push",
            "subTitle": "",
            "dLine": {
                "1383": "WindowStack:push(window)"
            },
            "SLine": {
                "1": "WindowStack:push(window)"
            }
        },
        {
            "Title": "Function immenu.end",
            "subTitle": "",
            "dLine": {
                "1384": "function ImMenu.End()"
            },
            "SLine": {
                "1": "function ImMenu.End()"
            }
        },
        {
            "Title": "Local frame = immenu.endframe",
            "subTitle": "",
            "dLine": {
                "1385": "local frame = ImMenu.EndFrame()"
            },
            "SLine": {
                "1": "local frame = ImMenu.EndFrame()"
            }
        },
        {
            "Title": "Local window = windowstack:pop",
            "subTitle": "",
            "dLine": {
                "1386": "local window = WindowStack:pop()"
            },
            "SLine": {
                "1": "local window = WindowStack:pop()"
            }
        },
        {
            "Title": "Function immenu.text",
            "subTitle": "",
            "dLine": {
                "1389": "function ImMenu.Text(text)"
            },
            "SLine": {
                "1": "function ImMenu.Text(text)"
            }
        },
        {
            "Title": "Local label = immenu.getlabel",
            "subTitle": "",
            "dLine": {
                "1390": "local label = ImMenu.GetLabel(text)"
            },
            "SLine": {
                "1": "local label = ImMenu.GetLabel(text)"
            }
        },
        {
            "Title": "Local txtwidth, txtheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "1391": "local txtWidth, txtHeight = draw.GetTextSize(label)"
            },
            "SLine": {
                "1": "local txtWidth, txtHeight = draw.GetTextSize(label)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1392": "local width, height = ImMenu.GetSize(txtWidth, txtHeight)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(txtWidth, txtHeight)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "1393": "draw.Text(x + (width // 2) - (txtWidth // 2), y + (height // 2) - (txtHeight // 2), label)"
            },
            "SLine": {
                "1": "draw.Text(x + (width // 2) - (txtWidth // 2), y + (height // 2) - (txtHeight // 2), label)"
            }
        },
        {
            "Title": "Function immenu.checkbox",
            "subTitle": "",
            "dLine": {
                "1394": "function ImMenu.Checkbox(text, state)"
            },
            "SLine": {
                "1": "function ImMenu.Checkbox(text, state)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1396": "local width, height = ImMenu.GetSize(boxSize + Style.Spacing + txtWidth, boxSize)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(boxSize + Style.Spacing + txtWidth, boxSize)"
            }
        },
        {
            "Title": "Local hovered, clicked, active = immenu.getinteraction",
            "subTitle": "",
            "dLine": {
                "1397": "local hovered, clicked, active = ImMenu.GetInteraction(x, y, width, height, text)"
            },
            "SLine": {
                "1": "local hovered, clicked, active = ImMenu.GetInteraction(x, y, width, height, text)"
            }
        },
        {
            "Title": "Immenu.interactioncolor",
            "subTitle": "",
            "dLine": {
                "1296": "function ImMenu.InteractionColor(hovered, active)",
                "1398": "ImMenu.InteractionColor(hovered, active)"
            },
            "SLine": {
                "1": "ImMenu.InteractionColor(hovered, active)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1399": "draw.FilledRect(x, y, x + boxSize, y + boxSize)"
            },
            "SLine": {
                "1": "draw.FilledRect(x, y, x + boxSize, y + boxSize)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1401": "draw.Color(UnpackColor(Colors.Border))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.Border))"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "1402": "draw.OutlinedRect(x, y, x + boxSize, y + boxSize)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(x, y, x + boxSize, y + boxSize)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1403": "draw.Color(UnpackColor(Colors.Highlight))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.Highlight))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1404": "draw.FilledRect(x + Style.Spacing, y + Style.Spacing, x + (boxSize - Style.Spacing), y + (boxSize - Style.Spacing))"
            },
            "SLine": {
                "1": "draw.FilledRect(x + Style.Spacing, y + Style.Spacing, x + (boxSize - Style.Spacing), y + (boxSize - Style.Spacing))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "1405": "draw.Color(UnpackColor(Colors.Text))"
            },
            "SLine": {
                "1": "draw.Color(UnpackColor(Colors.Text))"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "1406": "draw.Text(x + boxSize + Style.Spacing, y + (height // 2) - (txtHeight // 2), label)"
            },
            "SLine": {
                "1": "draw.Text(x + boxSize + Style.Spacing, y + (height // 2) - (txtHeight // 2), label)"
            }
        },
        {
            "Title": "Function immenu.button",
            "subTitle": "",
            "dLine": {
                "1409": "function ImMenu.Button(text)"
            },
            "SLine": {
                "1": "function ImMenu.Button(text)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1410": "local width, height = ImMenu.GetSize(txtWidth + Style.Spacing * 2, txtHeight + Style.Spacing * 2)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(txtWidth + Style.Spacing * 2, txtHeight + Style.Spacing * 2)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1411": "draw.FilledRect(x, y, x + width, y + height)"
            },
            "SLine": {
                "1": "draw.FilledRect(x, y, x + width, y + height)"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "1413": "draw.OutlinedRect(x, y, x + width, y + height)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(x, y, x + width, y + height)"
            }
        },
        {
            "Title": "Function immenu.texture",
            "subTitle": "",
            "dLine": {
                "1415": "function ImMenu.Texture(id)"
            },
            "SLine": {
                "1": "function ImMenu.Texture(id)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1416": "local width, height = ImMenu.GetSize(draw.GetTextureSize(id))"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(draw.GetTextureSize(id))"
            }
        },
        {
            "Title": "Draw.texturedrect",
            "subTitle": "",
            "dLine": {
                "1417": "draw.TexturedRect(id, x, y, x + width, y + height)"
            },
            "SLine": {
                "1": "draw.TexturedRect(id, x, y, x + width, y + height)"
            }
        },
        {
            "Title": "Function immenu.slider",
            "subTitle": "",
            "dLine": {
                "1419": "function ImMenu.Slider(text, value, min, max, step)"
            },
            "SLine": {
                "1": "function ImMenu.Slider(text, value, min, max, step)"
            }
        },
        {
            "Title": "Local label = string.format",
            "subTitle": "",
            "dLine": {
                "1421": "local label = string.format(\"%s: %s\", ImMenu.GetLabel(text), value)"
            },
            "SLine": {
                "1": "local label = string.format(\"%s: %s\", ImMenu.GetLabel(text), value)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1422": "local width, height = ImMenu.GetSize(250, txtHeight + Style.Spacing * 2)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(250, txtHeight + Style.Spacing * 2)"
            }
        },
        {
            "Title": "Local sliderwidth = math.floor",
            "subTitle": "",
            "dLine": {
                "1423": "local sliderWidth = math.floor(width * (value - min) / (max - min))"
            },
            "SLine": {
                "1": "local sliderWidth = math.floor(width * (value - min) / (max - min))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1424": "draw.FilledRect(x, y, x + sliderWidth, y + height)"
            },
            "SLine": {
                "1": "draw.FilledRect(x, y, x + sliderWidth, y + height)"
            }
        },
        {
            "Title": "Local percent = math.clamp",
            "subTitle": "",
            "dLine": {
                "1426": "local percent = math.clamp((mX - x) / width, 0, 1)"
            },
            "SLine": {
                "1": "local percent = math.clamp((mX - x) / width, 0, 1)"
            }
        },
        {
            "Title": "Value = math.round",
            "subTitle": "",
            "dLine": {
                "1427": "value = math.round((min + (max - min) * percent) / step) * step"
            },
            "SLine": {
                "1": "value = math.round((min + (max - min) * percent) / step) * step"
            }
        },
        {
            "Title": "If leftarrow:pressed",
            "subTitle": "",
            "dLine": {
                "1428": "if LeftArrow:Pressed() then"
            },
            "SLine": {
                "1": "if LeftArrow:Pressed() then"
            }
        },
        {
            "Title": "Value = math.max",
            "subTitle": "",
            "dLine": {
                "1429": "value = math.max(value - step, min)"
            },
            "SLine": {
                "1": "value = math.max(value - step, min)"
            }
        },
        {
            "Title": "Elseif rightarrow:pressed",
            "subTitle": "",
            "dLine": {
                "1430": "elseif RightArrow:Pressed() then"
            },
            "SLine": {
                "1": "elseif RightArrow:Pressed() then"
            }
        },
        {
            "Title": "Value = math.min",
            "subTitle": "",
            "dLine": {
                "1431": "value = math.min(value + step, max)"
            },
            "SLine": {
                "1": "value = math.min(value + step, max)"
            }
        },
        {
            "Title": "Function immenu.progress",
            "subTitle": "",
            "dLine": {
                "1433": "function ImMenu.Progress(value, min, max)"
            },
            "SLine": {
                "1": "function ImMenu.Progress(value, min, max)"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1434": "local width, height = ImMenu.GetSize(250, 15)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(250, 15)"
            }
        },
        {
            "Title": "Local progresswidth = math.floor",
            "subTitle": "",
            "dLine": {
                "1435": "local progressWidth = math.floor(width * (value - min) / (max - min))"
            },
            "SLine": {
                "1": "local progressWidth = math.floor(width * (value - min) / (max - min))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "1436": "draw.FilledRect(x, y, x + progressWidth, y + height)"
            },
            "SLine": {
                "1": "draw.FilledRect(x, y, x + progressWidth, y + height)"
            }
        },
        {
            "Title": "Function immenu.option",
            "subTitle": "",
            "dLine": {
                "1437": "function ImMenu.Option(selected, options)"
            },
            "SLine": {
                "1": "function ImMenu.Option(selected, options)"
            }
        },
        {
            "Title": "Local txtwidth, txtheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "1438": "local txtWidth, txtHeight = draw.GetTextSize(\"#\")"
            },
            "SLine": {
                "1": "local txtWidth, txtHeight = draw.GetTextSize(\"#\")"
            }
        },
        {
            "Title": "Local width, height = immenu.getsize",
            "subTitle": "",
            "dLine": {
                "1440": "local width, height = ImMenu.GetSize(250, txtHeight)"
            },
            "SLine": {
                "1": "local width, height = ImMenu.GetSize(250, txtHeight)"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1441": "ImMenu.PushStyle(\"ItemSize\", { btnSize, btnSize })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { btnSize, btnSize })"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1442": "ImMenu.PushStyle(\"FramePadding\", 0)"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"FramePadding\", 0)"
            }
        },
        {
            "Title": "Immenu.beginframe",
            "subTitle": "",
            "dLine": {
                "1443": "ImMenu.BeginFrame(1)"
            },
            "SLine": {
                "1": "ImMenu.BeginFrame(1)"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "1444": "if ImMenu.Button(\"<###\" .. tostring(options)) then"
            },
            "SLine": {
                "1": "if ImMenu.Button(\"<###\" .. tostring(options)) then"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1446": "ImMenu.PushStyle(\"ItemSize\", { width - (2 * btnSize) - (2 * Style.Spacing), height })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { width - (2 * btnSize) - (2 * Style.Spacing), height })"
            }
        },
        {
            "Title": "Immenu.text",
            "subTitle": "",
            "dLine": {
                "1447": "ImMenu.Text(tostring(options[selected]))"
            },
            "SLine": {
                "1": "ImMenu.Text(tostring(options[selected]))"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "1448": "if ImMenu.Button(\">###\" .. tostring(options)) then"
            },
            "SLine": {
                "1": "if ImMenu.Button(\">###\" .. tostring(options)) then"
            }
        },
        {
            "Title": "Immenu.popstyle",
            "subTitle": "",
            "dLine": {
                "1450": "ImMenu.PopStyle(2)"
            },
            "SLine": {
                "1": "ImMenu.PopStyle(2)"
            }
        },
        {
            "Title": "Function immenu.list",
            "subTitle": "",
            "dLine": {
                "1452": "function ImMenu.List(text, items)"
            },
            "SLine": {
                "1": "function ImMenu.List(text, items)"
            }
        },
        {
            "Title": "Local txtwidth, txtheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "1453": "local txtWidth, txtHeight = draw.GetTextSize(text)"
            },
            "SLine": {
                "1": "local txtWidth, txtHeight = draw.GetTextSize(text)"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1454": "ImMenu.PushStyle(\"ItemSize\", { width, height })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { width, height })"
            }
        },
        {
            "Title": "Immenu.text",
            "subTitle": "",
            "dLine": {
                "1389": "function ImMenu.Text(text)",
                "1455": "ImMenu.Text(text)"
            },
            "SLine": {
                "1": "ImMenu.Text(text)"
            }
        },
        {
            "Title": "For _, item in ipairs",
            "subTitle": "",
            "dLine": {
                "1456": "for _, item in ipairs(items) do"
            },
            "SLine": {
                "1": "for _, item in ipairs(items) do"
            }
        },
        {
            "Title": "Immenu.button",
            "subTitle": "",
            "dLine": {
                "1457": "ImMenu.Button(tostring(item))",
                "1462": "if ImMenu.Button(tostring(item)) then"
            },
            "SLine": {
                "1": "ImMenu.Button(tostring(item))"
            }
        },
        {
            "Title": "Function immenu.tabcontrol",
            "subTitle": "",
            "dLine": {
                "1458": "function ImMenu.TabControl(tabs, currentTab)"
            },
            "SLine": {
                "1": "function ImMenu.TabControl(tabs, currentTab)"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1459": "ImMenu.PushStyle(\"ItemSize\", { 100, 25 })"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"ItemSize\", { 100, 25 })"
            }
        },
        {
            "Title": "Immenu.pushstyle",
            "subTitle": "",
            "dLine": {
                "1460": "ImMenu.PushStyle(\"Spacing\", 0)"
            },
            "SLine": {
                "1": "ImMenu.PushStyle(\"Spacing\", 0)"
            }
        },
        {
            "Title": "For i, item in ipairs",
            "subTitle": "",
            "dLine": {
                "1461": "for i, item in ipairs(tabs) do"
            },
            "SLine": {
                "1": "for i, item in ipairs(tabs) do"
            }
        },
        {
            "Title": "If immenu.button",
            "subTitle": "",
            "dLine": {
                "1462": "if ImMenu.Button(tostring(item)) then"
            },
            "SLine": {
                "1": "if ImMenu.Button(tostring(item)) then"
            }
        },
        {
            "Title": "Immenu.popstyle",
            "subTitle": "",
            "dLine": {
                "1464": "ImMenu.PopStyle(3)"
            },
            "SLine": {
                "1": "ImMenu.PopStyle(3)"
            }
        },
        {
            "Title": "Lnxlib.ui.notify.simple",
            "subTitle": "",
            "dLine": {
                "1466": "lnxLib.UI.Notify.Simple(\"ImMenu loaded\", string.format(\"Version: %.2f\", ImMenu.GetVersion()))"
            },
            "SLine": {
                "1": "lnxLib.UI.Notify.Simple(\"ImMenu loaded\", string.format(\"Version: %.2f\", ImMenu.GetVersion()))"
            }
        },
        {
            "Title": "Local libloaded, lib = pcall",
            "subTitle": "",
            "dLine": {
                "1471": "local libLoaded, Lib = pcall(require, \"LNXlib\")"
            },
            "SLine": {
                "1": "local libLoaded, Lib = pcall(require, \"LNXlib\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "1472": "assert(Lib.GetVersion() >= 0.89, \"LNXlib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(Lib.GetVersion() >= 0.89, \"LNXlib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Local key = keyhelper.new",
            "subTitle": "",
            "dLine": {
                "1474": "local key = KeyHelper.new(KEY_J)"
            },
            "SLine": {
                "1": "local key = KeyHelper.new(KEY_J)"
            }
        },
        {
            "Title": "Local taunttimer = timer.new",
            "subTitle": "",
            "dLine": {
                "1475": "local tauntTimer = Timer.new()"
            },
            "SLine": {
                "1": "local tauntTimer = Timer.new()"
            }
        },
        {
            "Title": "Local function onusercmd",
            "subTitle": "",
            "dLine": {
                "1476": "local function OnUserCmd(userCmd)"
            },
            "SLine": {
                "1": "local function OnUserCmd(userCmd)"
            }
        },
        {
            "Title": "Local localplayer = wplayer.getlocal",
            "subTitle": "",
            "dLine": {
                "1477": "local localPlayer = WPlayer.GetLocal()"
            },
            "SLine": {
                "1": "local localPlayer = WPlayer.GetLocal()"
            }
        },
        {
            "Title": "If not localplayer:isalive",
            "subTitle": "",
            "dLine": {
                "711": "if not localPlayer:IsAlive() then",
                "1478": "if not localPlayer:IsAlive()"
            },
            "SLine": {
                "1": "if not localPlayer:IsAlive()"
            }
        },
        {
            "Title": "Or not key:down",
            "subTitle": "",
            "dLine": {
                "1479": "or not key:Down()"
            },
            "SLine": {
                "1": "or not key:Down()"
            }
        },
        {
            "Title": "Or engine.isgameuivisible",
            "subTitle": "",
            "dLine": {
                "127": "if engine.Con_IsVisible() or engine.IsGameUIVisible() then",
                "834": "if not pLocal or engine.IsGameUIVisible() then return end",
                "1480": "or engine.IsGameUIVisible()"
            },
            "SLine": {
                "1": "or engine.IsGameUIVisible()"
            }
        },
        {
            "Title": "Local weapon = localplayer:getactiveweapon",
            "subTitle": "",
            "dLine": {
                "1482": "local weapon = localPlayer:GetActiveWeapon()"
            },
            "SLine": {
                "1": "local weapon = localPlayer:GetActiveWeapon()"
            }
        },
        {
            "Title": "If weapon:isshootingweapon",
            "subTitle": "",
            "dLine": {
                "1483": "if weapon:IsShootingWeapon() or weapon:IsMeleeWeapon() then return end"
            },
            "SLine": {
                "1": "if weapon:IsShootingWeapon() or weapon:IsMeleeWeapon() then return end"
            }
        },
        {
            "Title": "Usercmd:setbuttons",
            "subTitle": "",
            "dLine": {
                "1484": "userCmd:SetButtons(userCmd:GetButtons() | IN_ATTACK)"
            },
            "SLine": {
                "1": "userCmd:SetButtons(userCmd:GetButtons() | IN_ATTACK)"
            }
        },
        {
            "Title": "If taunttimer:run",
            "subTitle": "",
            "dLine": {
                "1485": "if tauntTimer:Run(0.5) then"
            },
            "SLine": {
                "1": "if tauntTimer:Run(0.5) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "1486": "client.Command(\"taunt\", true)"
            },
            "SLine": {
                "1": "client.Command(\"taunt\", true)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "1487": "callbacks.Unregister(\"CreateMove\", \"LNX_IF_UserCmd\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"LNX_IF_UserCmd\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "1488": "callbacks.Register(\"CreateMove\", \"LNX_IF_UserCmd\", OnUserCmd)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"LNX_IF_UserCmd\", OnUserCmd)"
            }
        },
        {
            "Title": "Local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = ",
            "subTitle": "",
            "dLine": {
                "1489": "local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)"
            },
            "SLine": {
                "1": "local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)"
            }
        },
        {
            "Title": "Register = function",
            "subTitle": "",
            "dLine": {
                "1495": "register = function(name, body)"
            },
            "SLine": {
                "1": "register = function(name, body)"
            }
        },
        {
            "Title": "Require = function",
            "subTitle": "",
            "dLine": {
                "1498": "require = function(name)"
            },
            "SLine": {
                "1": "require = function(name)"
            }
        },
        {
            "Title": "Local identifier = type",
            "subTitle": "",
            "dLine": {
                "1503": "local identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)"
            },
            "SLine": {
                "1": "local identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)"
            }
        },
        {
            "Title": "Error",
            "subTitle": "throws error with message",
            "dLine": {
                "1504": "error('Tried to require ' .. identifier .. ', but no such module has been registered')"
            },
            "SLine": {
                "1": "error('Tried to require ' .. identifier .. ', but no such module has been registered')"
            }
        },
        {
            "Title": "Return superrequire",
            "subTitle": "",
            "dLine": {
                "1505": "return superRequire(name)"
            },
            "SLine": {
                "1": "return superRequire(name)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1512": "__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "1514": "require(\"lnxLib/Global/Global\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/Global\")"
            }
        },
        {
            "Title": "Tf2 = require",
            "subTitle": "",
            "dLine": {
                "1516": "TF2 = require(\"lnxLib/TF2/TF2\"),"
            },
            "SLine": {
                "1": "TF2 = require(\"lnxLib/TF2/TF2\"),"
            }
        },
        {
            "Title": "Ui = require",
            "subTitle": "",
            "dLine": {
                "1517": "UI = require(\"lnxLib/UI/UI\"),"
            },
            "SLine": {
                "1": "UI = require(\"lnxLib/UI/UI\"),"
            }
        },
        {
            "Title": "Utils = require",
            "subTitle": "",
            "dLine": {
                "1518": "Utils = require(\"lnxLib/Utils/Utils\"),"
            },
            "SLine": {
                "1": "Utils = require(\"lnxLib/Utils/Utils\"),"
            }
        },
        {
            "Title": "Function lnxlib.getversion",
            "subTitle": "",
            "dLine": {
                "1519": "function lnxLib.GetVersion()"
            },
            "SLine": {
                "1": "function lnxLib.GetVersion()"
            }
        },
        {
            "Title": "Function unloadlib",
            "subTitle": "",
            "dLine": {
                "1521": "function UnloadLib()"
            },
            "SLine": {
                "1": "function UnloadLib()"
            }
        },
        {
            "Title": "Lnxlib.utils.unloadpackages",
            "subTitle": "",
            "dLine": {
                "1522": "lnxLib.Utils.UnloadPackages(\"lnxLib\")"
            },
            "SLine": {
                "1": "lnxLib.Utils.UnloadPackages(\"lnxLib\")"
            }
        },
        {
            "Title": "Lnxlib.utils.unloadpackages",
            "subTitle": "",
            "dLine": {
                "1523": "lnxLib.Utils.UnloadPackages(\"LNXlib\")"
            },
            "SLine": {
                "1": "lnxLib.Utils.UnloadPackages(\"LNXlib\")"
            }
        },
        {
            "Title": "Printc",
            "subTitle": "",
            "dLine": {
                "1524": "printc(75, 210, 55, 255, string.format(\"lnxLib Loaded (v%.3f)\", lnxLib.GetVersion()))"
            },
            "SLine": {
                "1": "printc(75, 210, 55, 255, string.format(\"lnxLib Loaded (v%.3f)\", lnxLib.GetVersion()))"
            }
        },
        {
            "Title": "Lnxlib.ui.notify.simple",
            "subTitle": "",
            "dLine": {
                "1525": "lnxLib.UI.Notify.Simple(\"lnxLib loaded\", string.format(\"Version: %.3f\", lnxLib.GetVersion()))"
            },
            "SLine": {
                "1": "lnxLib.UI.Notify.Simple(\"lnxLib loaded\", string.format(\"Version: %.3f\", lnxLib.GetVersion()))"
            }
        },
        {
            "Title": "Internal.cleanup",
            "subTitle": "",
            "dLine": {
                "1526": "Internal.Cleanup()",
                "2677": "function Internal.Cleanup()"
            },
            "SLine": {
                "1": "Internal.Cleanup()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1528": "__bundle_register(\"lnxLib/Utils/Utils\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Utils\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Conversion = require",
            "subTitle": "",
            "dLine": {
                "1530": "Conversion = require(\"lnxLib/Utils/Conversion\"),"
            },
            "SLine": {
                "1": "Conversion = require(\"lnxLib/Utils/Conversion\"),"
            }
        },
        {
            "Title": "Filesystem = require",
            "subTitle": "",
            "dLine": {
                "1531": "FileSystem = require(\"lnxLib/Utils/FileSystem\"),"
            },
            "SLine": {
                "1": "FileSystem = require(\"lnxLib/Utils/FileSystem\"),"
            }
        },
        {
            "Title": "Web = require",
            "subTitle": "",
            "dLine": {
                "1532": "Web = require(\"lnxLib/Utils/Web\"),"
            },
            "SLine": {
                "1": "Web = require(\"lnxLib/Utils/Web\"),"
            }
        },
        {
            "Title": "Input = require",
            "subTitle": "",
            "dLine": {
                "1533": "Input = require(\"lnxLib/Utils/Input\"),"
            },
            "SLine": {
                "1": "Input = require(\"lnxLib/Utils/Input\"),"
            }
        },
        {
            "Title": "Keyhelper = require",
            "subTitle": "",
            "dLine": {
                "1534": "KeyHelper = require(\"lnxLib/Utils/KeyHelper\"),"
            },
            "SLine": {
                "1": "KeyHelper = require(\"lnxLib/Utils/KeyHelper\"),"
            }
        },
        {
            "Title": "Keyvalues = require",
            "subTitle": "",
            "dLine": {
                "1535": "KeyValues = require(\"lnxLib/Utils/KeyValues\"),"
            },
            "SLine": {
                "1": "KeyValues = require(\"lnxLib/Utils/KeyValues\"),"
            }
        },
        {
            "Title": "Logger = require",
            "subTitle": "",
            "dLine": {
                "1536": "Logger = require(\"lnxLib/Utils/Logger\"),"
            },
            "SLine": {
                "1": "Logger = require(\"lnxLib/Utils/Logger\"),"
            }
        },
        {
            "Title": "Math = require",
            "subTitle": "",
            "dLine": {
                "1537": "Math = require(\"lnxLib/Utils/Math\"),"
            },
            "SLine": {
                "1": "Math = require(\"lnxLib/Utils/Math\"),"
            }
        },
        {
            "Title": "Timer = require",
            "subTitle": "",
            "dLine": {
                "1538": "Timer = require(\"lnxLib/Utils/Timer\"),"
            },
            "SLine": {
                "1": "Timer = require(\"lnxLib/Utils/Timer\"),"
            }
        },
        {
            "Title": "Config = require",
            "subTitle": "",
            "dLine": {
                "1539": "Config = require(\"lnxLib/Utils/Config\"),"
            },
            "SLine": {
                "1": "Config = require(\"lnxLib/Utils/Config\"),"
            }
        },
        {
            "Title": "Commands = require",
            "subTitle": "",
            "dLine": {
                "1540": "Commands = require(\"lnxLib/Utils/Commands\")"
            },
            "SLine": {
                "1": "Commands = require(\"lnxLib/Utils/Commands\")"
            }
        },
        {
            "Title": "Function utils.sanitize",
            "subTitle": "",
            "dLine": {
                "1541": "function Utils.Sanitize(str)"
            },
            "SLine": {
                "1": "function Utils.Sanitize(str)"
            }
        },
        {
            "Title": "Str = string.gsub",
            "subTitle": "",
            "dLine": {
                "1542": "str = string.gsub(str, \"[%p%c]\", \"\")"
            },
            "SLine": {
                "1": "str = string.gsub(str, \"[%p%c]\", \"\")"
            }
        },
        {
            "Title": "Str = string.gsub",
            "subTitle": "",
            "dLine": {
                "1543": "str = string.gsub(str, '\"', \"'\")"
            },
            "SLine": {
                "1": "str = string.gsub(str, '\"', \"'\")"
            }
        },
        {
            "Title": "Function utils.rainbow",
            "subTitle": "",
            "dLine": {
                "1545": "function Utils.Rainbow(offset)"
            },
            "SLine": {
                "1": "function Utils.Rainbow(offset)"
            }
        },
        {
            "Title": "Local r = math.floor",
            "subTitle": "",
            "dLine": {
                "1546": "local r = math.floor(math.sin(offset + 0) * 127 + 128)"
            },
            "SLine": {
                "1": "local r = math.floor(math.sin(offset + 0) * 127 + 128)"
            }
        },
        {
            "Title": "Local g = math.floor",
            "subTitle": "",
            "dLine": {
                "1547": "local g = math.floor(math.sin(offset + 2) * 127 + 128)"
            },
            "SLine": {
                "1": "local g = math.floor(math.sin(offset + 2) * 127 + 128)"
            }
        },
        {
            "Title": "Local b = math.floor",
            "subTitle": "",
            "dLine": {
                "1548": "local b = math.floor(math.sin(offset + 4) * 127 + 128)"
            },
            "SLine": {
                "1": "local b = math.floor(math.sin(offset + 4) * 127 + 128)"
            }
        },
        {
            "Title": "Function utils.unloadpackages",
            "subTitle": "",
            "dLine": {
                "1550": "function Utils.UnloadPackages(libName)"
            },
            "SLine": {
                "1": "function Utils.UnloadPackages(libName)"
            }
        },
        {
            "Title": "For name, _ in pairs",
            "subTitle": "",
            "dLine": {
                "1552": "for name, _ in pairs(package.loaded) do"
            },
            "SLine": {
                "1": "for name, _ in pairs(package.loaded) do"
            }
        },
        {
            "Title": "If string.find",
            "subTitle": "",
            "dLine": {
                "1553": "if string.find(name, libName) then"
            },
            "SLine": {
                "1": "if string.find(name, libName) then"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "1554": "print(string.format(\"Unloading package '%s'...\", name))"
            },
            "SLine": {
                "1": "print(string.format(\"Unloading package '%s'...\", name))"
            }
        },
        {
            "Title": "Warn",
            "subTitle": "",
            "dLine": {
                "1557": "warn(string.format(\"All packages of '%s' have been unloaded!\", libName))"
            },
            "SLine": {
                "1": "warn(string.format(\"All packages of '%s' have been unloaded!\", libName))"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1560": "__bundle_register(\"lnxLib/Utils/Commands\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Commands\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Function commands.register",
            "subTitle": "",
            "dLine": {
                "1564": "function Commands.Register(name, callback)"
            },
            "SLine": {
                "1": "function Commands.Register(name, callback)"
            }
        },
        {
            "Title": "Warn",
            "subTitle": "",
            "dLine": {
                "1566": "warn(string.format(\"Command '%s' already exists and will be overwritten!\", name))"
            },
            "SLine": {
                "1": "warn(string.format(\"Command '%s' already exists and will be overwritten!\", name))"
            }
        },
        {
            "Title": "Function commands.unregister",
            "subTitle": "",
            "dLine": {
                "1568": "function Commands.Unregister(name)"
            },
            "SLine": {
                "1": "function Commands.Unregister(name)"
            }
        },
        {
            "Title": "Local function onstringcmd",
            "subTitle": "",
            "dLine": {
                "1570": "local function OnStringCmd(stringCmd)"
            },
            "SLine": {
                "1": "local function OnStringCmd(stringCmd)"
            }
        },
        {
            "Title": "Local args = deque.new",
            "subTitle": "",
            "dLine": {
                "1571": "local args = Deque.new(string.split(stringCmd:Get(), \" \"))"
            },
            "SLine": {
                "1": "local args = Deque.new(string.split(stringCmd:Get(), \" \"))"
            }
        },
        {
            "Title": "Local cmd = args:popfront",
            "subTitle": "",
            "dLine": {
                "1572": "local cmd = args:popFront()"
            },
            "SLine": {
                "1": "local cmd = args:popFront()"
            }
        },
        {
            "Title": "Stringcmd:set",
            "subTitle": "",
            "dLine": {
                "1574": "stringCmd:Set(\"\")"
            },
            "SLine": {
                "1": "stringCmd:Set(\"\")"
            }
        },
        {
            "Title": "Internal.registercallback",
            "subTitle": "",
            "dLine": {
                "1576": "Internal.RegisterCallback(\"SendStringCmd\", OnStringCmd, \"Utils\", \"Commands\")"
            },
            "SLine": {
                "1": "Internal.RegisterCallback(\"SendStringCmd\", OnStringCmd, \"Utils\", \"Commands\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1578": "__bundle_register(\"lnxLib/Utils/Config\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Config\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local filesystem = require",
            "subTitle": "",
            "dLine": {
                "1579": "local FileSystem = require(\"lnxLib/Utils/FileSystem\")"
            },
            "SLine": {
                "1": "local FileSystem = require(\"lnxLib/Utils/FileSystem\")"
            }
        },
        {
            "Title": "Local json = require",
            "subTitle": "",
            "dLine": {
                "1580": "local Json = require(\"lnxLib/Libs/dkjson\")"
            },
            "SLine": {
                "1": "local Json = require(\"lnxLib/Libs/dkjson\")"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "1587": "setmetatable(Config, Config)"
            },
            "SLine": {
                "1": "setmetatable(Config, Config)"
            }
        },
        {
            "Title": "Local configfolder = filesystem.getworkdir",
            "subTitle": "",
            "dLine": {
                "1589": "local ConfigFolder = FileSystem.GetWorkDir() .. \"/Configs/\""
            },
            "SLine": {
                "1": "local ConfigFolder = FileSystem.GetWorkDir() .. \"/Configs/\""
            }
        },
        {
            "Title": "Function config.new",
            "subTitle": "",
            "dLine": {
                "1590": "function Config.new(name)"
            },
            "SLine": {
                "1": "function Config.new(name)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "1591": "local self = setmetatable({}, Config)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Config)"
            }
        },
        {
            "Title": "Self:load",
            "subTitle": "",
            "dLine": {
                "1596": "self:Load()",
                "1614": "if self.AutoLoad then self:Load() end"
            },
            "SLine": {
                "1": "self:Load()"
            }
        },
        {
            "Title": "Function config:getpath",
            "subTitle": "",
            "dLine": {
                "1598": "function Config:GetPath()"
            },
            "SLine": {
                "1": "function Config:GetPath()"
            }
        },
        {
            "Title": "If not filesystem.exists",
            "subTitle": "",
            "dLine": {
                "1599": "if not FileSystem.Exists(ConfigFolder) then"
            },
            "SLine": {
                "1": "if not FileSystem.Exists(ConfigFolder) then"
            }
        },
        {
            "Title": "Filesystem.createdirectory",
            "subTitle": "",
            "dLine": {
                "1600": "filesystem.CreateDirectory(ConfigFolder)"
            },
            "SLine": {
                "1": "filesystem.CreateDirectory(ConfigFolder)"
            }
        },
        {
            "Title": "Function config:load",
            "subTitle": "",
            "dLine": {
                "1602": "function Config:Load()"
            },
            "SLine": {
                "1": "function Config:Load()"
            }
        },
        {
            "Title": "Local configpath = self:getpath",
            "subTitle": "",
            "dLine": {
                "1603": "local configPath = self:GetPath()"
            },
            "SLine": {
                "1": "local configPath = self:GetPath()"
            }
        },
        {
            "Title": "If not filesystem.exists",
            "subTitle": "",
            "dLine": {
                "1604": "if not FileSystem.Exists(configPath) then return false end"
            },
            "SLine": {
                "1": "if not FileSystem.Exists(configPath) then return false end"
            }
        },
        {
            "Title": "Local content = filesystem.read",
            "subTitle": "",
            "dLine": {
                "1605": "local content = FileSystem.Read(self:GetPath())"
            },
            "SLine": {
                "1": "local content = FileSystem.Read(self:GetPath())"
            }
        },
        {
            "Title": "Self._content = json.decode",
            "subTitle": "",
            "dLine": {
                "1606": "self._Content = Json.decode(content, 1, nil)"
            },
            "SLine": {
                "1": "self._Content = Json.decode(content, 1, nil)"
            }
        },
        {
            "Title": "Function config:delete",
            "subTitle": "",
            "dLine": {
                "1608": "function Config:Delete()"
            },
            "SLine": {
                "1": "function Config:Delete()"
            }
        },
        {
            "Title": "Return filesystem.delete",
            "subTitle": "",
            "dLine": {
                "1609": "return FileSystem.Delete(configPath)"
            },
            "SLine": {
                "1": "return FileSystem.Delete(configPath)"
            }
        },
        {
            "Title": "Function config:save",
            "subTitle": "",
            "dLine": {
                "1610": "function Config:Save()"
            },
            "SLine": {
                "1": "function Config:Save()"
            }
        },
        {
            "Title": "Local content = json.encode",
            "subTitle": "",
            "dLine": {
                "1611": "local content = Json.encode(self._Content, { indent = true })"
            },
            "SLine": {
                "1": "local content = Json.encode(self._Content, { indent = true })"
            }
        },
        {
            "Title": "Return filesystem.write",
            "subTitle": "",
            "dLine": {
                "1612": "return FileSystem.Write(self:GetPath(), content)"
            },
            "SLine": {
                "1": "return FileSystem.Write(self:GetPath(), content)"
            }
        },
        {
            "Title": "Function config:setvalue",
            "subTitle": "",
            "dLine": {
                "1613": "function Config:SetValue(key, value)"
            },
            "SLine": {
                "1": "function Config:SetValue(key, value)"
            }
        },
        {
            "Title": "If self.autoload then self:load",
            "subTitle": "",
            "dLine": {
                "1614": "if self.AutoLoad then self:Load() end"
            },
            "SLine": {
                "1": "if self.AutoLoad then self:Load() end"
            }
        },
        {
            "Title": "If self.autosave then self:save",
            "subTitle": "",
            "dLine": {
                "1616": "if self.AutoSave then self:Save() end"
            },
            "SLine": {
                "1": "if self.AutoSave then self:Save() end"
            }
        },
        {
            "Title": "Function config:getvalue",
            "subTitle": "",
            "dLine": {
                "1617": "function Config:GetValue(key, default)"
            },
            "SLine": {
                "1": "function Config:GetValue(key, default)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1622": "__bundle_register(\"lnxLib/Libs/dkjson\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Libs/dkjson\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Pcall ",
            "subTitle": "",
            "dLine": {
                "1663": "pcall (function()"
            },
            "SLine": {
                "1": "pcall (function()"
            }
        },
        {
            "Title": "If k == 'n' and type",
            "subTitle": "",
            "dLine": {
                "1669": "if k == 'n' and type(v) == 'number' then"
            },
            "SLine": {
                "1": "if k == 'n' and type(v) == 'number' then"
            }
        },
        {
            "Title": "If type",
            "subTitle": "",
            "dLine": {
                "1673": "if type(k) ~= 'number' or k < 1 or floor(k) ~= k then"
            },
            "SLine": {
                "1": "if type(k) ~= 'number' or k < 1 or floor(k) ~= k then"
            }
        },
        {
            "Title": "Local function replace",
            "subTitle": "",
            "dLine": {
                "1718": "local function replace(str, o, n)"
            },
            "SLine": {
                "1": "local function replace(str, o, n)"
            }
        },
        {
            "Title": "Return strsub",
            "subTitle": "",
            "dLine": {
                "1721": "return strsub(str, 1, i-1) .. n .. strsub(str, j+1, -1)"
            },
            "SLine": {
                "1": "return strsub(str, 1, i-1) .. n .. strsub(str, j+1, -1)"
            }
        },
        {
            "Title": "Decpoint = strmatch",
            "subTitle": "",
            "dLine": {
                "1724": "decpoint = strmatch(tostring(0.5), \"([^05+])\")"
            },
            "SLine": {
                "1": "decpoint = strmatch(tostring(0.5), \"([^05+])\")"
            }
        },
        {
            "Title": "Numfilter = \"[^0-9%-%+ee\" .. gsub",
            "subTitle": "",
            "dLine": {
                "1725": "numfilter = \"[^0-9%-%+eE\" .. gsub(decpoint, \"[%^%$%(%)%%%.%[%]%*%+%-%?]\", \"%%%0\") .. \"]+\""
            },
            "SLine": {
                "1": "numfilter = \"[^0-9%-%+eE\" .. gsub(decpoint, \"[%^%$%(%)%%%.%[%]%*%+%-%?]\", \"%%%0\") .. \"]+\""
            }
        },
        {
            "Title": "Updatedecpoint",
            "subTitle": "",
            "dLine": {
                "1726": "updatedecpoint()"
            },
            "SLine": {
                "1": "updatedecpoint()"
            }
        },
        {
            "Title": "Return replace",
            "subTitle": "",
            "dLine": {
                "1728": "return replace(fsub(tostring(num), numfilter, \"\"), decpoint, \".\")"
            },
            "SLine": {
                "1": "return replace(fsub(tostring(num), numfilter, \"\"), decpoint, \".\")"
            }
        },
        {
            "Title": "Local num = tonumber",
            "subTitle": "",
            "dLine": {
                "1730": "local num = tonumber(replace(str, \".\", decpoint))"
            },
            "SLine": {
                "1": "local num = tonumber(replace(str, \".\", decpoint))"
            }
        },
        {
            "Title": "Num = tonumber",
            "subTitle": "",
            "dLine": {
                "1730": "local num = tonumber(replace(str, \".\", decpoint))",
                "1732": "num = tonumber(replace(str, \".\", decpoint))"
            },
            "SLine": {
                "1": "num = tonumber(replace(str, \".\", decpoint))"
            }
        },
        {
            "Title": "Local function appendcustom",
            "subTitle": "",
            "dLine": {
                "1756": "local function appendcustom(res, buffer, state)"
            },
            "SLine": {
                "1": "local function appendcustom(res, buffer, state)"
            }
        },
        {
            "Title": "Local function exception",
            "subTitle": "",
            "dLine": {
                "1760": "local function exception(reason, value, state, buffer, buflen, defaultmessage)"
            },
            "SLine": {
                "1": "local function exception(reason, value, state, buffer, buflen, defaultmessage)"
            }
        },
        {
            "Title": "Return appendcustom",
            "subTitle": "",
            "dLine": {
                "1768": "return appendcustom(ret, buffer, state)"
            },
            "SLine": {
                "1": "return appendcustom(ret, buffer, state)"
            }
        },
        {
            "Title": "Function json.encodeexception",
            "subTitle": "",
            "dLine": {
                "1769": "function json.encodeexception(reason, value, state, defaultmessage)"
            },
            "SLine": {
                "1": "function json.encodeexception(reason, value, state, defaultmessage)"
            }
        },
        {
            "Title": "Return quotestring",
            "subTitle": "",
            "dLine": {
                "1770": "return quotestring(\"<\" .. defaultmessage .. \">\")"
            },
            "SLine": {
                "1": "return quotestring(\"<\" .. defaultmessage .. \">\")"
            }
        },
        {
            "Title": "Return exception",
            "subTitle": "",
            "dLine": {
                "1778": "return exception('reference cycle', value, state, buffer, buflen)"
            },
            "SLine": {
                "1": "return exception('reference cycle', value, state, buffer, buflen)"
            }
        },
        {
            "Title": "If not ret then return exception",
            "subTitle": "",
            "dLine": {
                "1781": "if not ret then return exception('custom encoder failed', value, state, buffer, buflen, msg) end"
            },
            "SLine": {
                "1": "if not ret then return exception('custom encoder failed', value, state, buffer, buflen, msg) end"
            }
        },
        {
            "Title": "Buflen = appendcustom",
            "subTitle": "",
            "dLine": {
                "1783": "buflen = appendcustom(ret, buffer, state)"
            },
            "SLine": {
                "1": "buflen = appendcustom(ret, buffer, state)"
            }
        },
        {
            "Title": "Return strchar ",
            "subTitle": "",
            "dLine": {
                "1872": "return strchar (0xc0 + floor(value/0x40),"
            },
            "SLine": {
                "1": "return strchar (0xc0 + floor(value/0x40),"
            }
        },
        {
            "Title": "0x80 + ",
            "subTitle": "",
            "dLine": {
                "1873": "0x80 + (floor(value) % 0x40))"
            },
            "SLine": {
                "1": "0x80 + (floor(value) % 0x40))"
            }
        },
        {
            "Title": "Return strchar ",
            "subTitle": "",
            "dLine": {
                "1875": "return strchar (0xe0 + floor(value/0x1000),"
            },
            "SLine": {
                "1": "return strchar (0xe0 + floor(value/0x1000),"
            }
        },
        {
            "Title": "0x80 + ",
            "subTitle": "",
            "dLine": {
                "1876": "0x80 + (floor(value/0x40) % 0x40),"
            },
            "SLine": {
                "1": "0x80 + (floor(value/0x40) % 0x40),"
            }
        },
        {
            "Title": "Return strchar ",
            "subTitle": "",
            "dLine": {
                "1877": "return strchar (0xf0 + floor(value/0x40000),"
            },
            "SLine": {
                "1": "return strchar (0xf0 + floor(value/0x40000),"
            }
        },
        {
            "Title": "0x80 + ",
            "subTitle": "",
            "dLine": {
                "1878": "0x80 + (floor(value/0x1000) % 0x40),"
            },
            "SLine": {
                "1": "0x80 + (floor(value/0x1000) % 0x40),"
            }
        },
        {
            "Title": "Local function optionalmetatables",
            "subTitle": "",
            "dLine": {
                "1963": "local function optionalmetatables(...)"
            },
            "SLine": {
                "1": "local function optionalmetatables(...)"
            }
        },
        {
            "Title": "If select",
            "subTitle": "",
            "dLine": {
                "1964": "if select(\"#\", ...) > 0 then"
            },
            "SLine": {
                "1": "if select(\"#\", ...) > 0 then"
            }
        },
        {
            "Title": "Local objectmeta, arraymeta = optionalmetatables",
            "subTitle": "",
            "dLine": {
                "1968": "local objectmeta, arraymeta = optionalmetatables(...)"
            },
            "SLine": {
                "1": "local objectmeta, arraymeta = optionalmetatables(...)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1971": "__bundle_register(\"lnxLib/Utils/FileSystem\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/FileSystem\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local workdir = engine.getgamedir",
            "subTitle": "",
            "dLine": {
                "1974": "local WorkDir = engine.GetGameDir() .. \"/../lnxLib/\""
            },
            "SLine": {
                "1": "local WorkDir = engine.GetGameDir() .. \"/../lnxLib/\""
            }
        },
        {
            "Title": "Function filesystem.read",
            "subTitle": "",
            "dLine": {
                "1975": "function FileSystem.Read(path)"
            },
            "SLine": {
                "1": "function FileSystem.Read(path)"
            }
        },
        {
            "Title": "Local file = io.open",
            "subTitle": "",
            "dLine": {
                "1976": "local file = io.open(path, \"rb\")"
            },
            "SLine": {
                "1": "local file = io.open(path, \"rb\")"
            }
        },
        {
            "Title": "File:close",
            "subTitle": "",
            "dLine": {
                "1979": "file:close()",
                "1988": "if file then file:close() end"
            },
            "SLine": {
                "1": "file:close()"
            }
        },
        {
            "Title": "Function filesystem.write",
            "subTitle": "",
            "dLine": {
                "1981": "function FileSystem.Write(path, content)"
            },
            "SLine": {
                "1": "function FileSystem.Write(path, content)"
            }
        },
        {
            "Title": "Local file = io.open",
            "subTitle": "",
            "dLine": {
                "1982": "local file = io.open(path, \"wb\")"
            },
            "SLine": {
                "1": "local file = io.open(path, \"wb\")"
            }
        },
        {
            "Title": "File:write",
            "subTitle": "",
            "dLine": {
                "1984": "file:write(content)"
            },
            "SLine": {
                "1": "file:write(content)"
            }
        },
        {
            "Title": "Function filesystem.delete",
            "subTitle": "",
            "dLine": {
                "1985": "function FileSystem.Delete(path)"
            },
            "SLine": {
                "1": "function FileSystem.Delete(path)"
            }
        },
        {
            "Title": "Return os.remove",
            "subTitle": "",
            "dLine": {
                "1986": "return os.remove(path)"
            },
            "SLine": {
                "1": "return os.remove(path)"
            }
        },
        {
            "Title": "Function filesystem.exists",
            "subTitle": "",
            "dLine": {
                "1987": "function FileSystem.Exists(path)"
            },
            "SLine": {
                "1": "function FileSystem.Exists(path)"
            }
        },
        {
            "Title": "If file then file:close",
            "subTitle": "",
            "dLine": {
                "1988": "if file then file:close() end"
            },
            "SLine": {
                "1": "if file then file:close() end"
            }
        },
        {
            "Title": "Function filesystem.getworkdir",
            "subTitle": "",
            "dLine": {
                "1990": "function FileSystem.GetWorkDir()"
            },
            "SLine": {
                "1": "function FileSystem.GetWorkDir()"
            }
        },
        {
            "Title": "If not filesystem.exists",
            "subTitle": "",
            "dLine": {
                "1991": "if not FileSystem.Exists(WorkDir) then"
            },
            "SLine": {
                "1": "if not FileSystem.Exists(WorkDir) then"
            }
        },
        {
            "Title": "Filesystem.createdirectory",
            "subTitle": "",
            "dLine": {
                "1992": "filesystem.CreateDirectory(WorkDir)"
            },
            "SLine": {
                "1": "filesystem.CreateDirectory(WorkDir)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "1995": "__bundle_register(\"lnxLib/Utils/Timer\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Timer\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "1999": "setmetatable(Timer, Timer)"
            },
            "SLine": {
                "1": "setmetatable(Timer, Timer)"
            }
        },
        {
            "Title": "Function timer.new",
            "subTitle": "",
            "dLine": {
                "2000": "function Timer.new()"
            },
            "SLine": {
                "1": "function Timer.new()"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2001": "local self = setmetatable({}, Timer)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Timer)"
            }
        },
        {
            "Title": "Function timer:_check",
            "subTitle": "",
            "dLine": {
                "2003": "function Timer:_Check(delta)"
            },
            "SLine": {
                "1": "function Timer:_Check(delta)"
            }
        },
        {
            "Title": "Return globals.curtime",
            "subTitle": "",
            "dLine": {
                "2004": "return globals.CurTime() - self._LastTime >= delta"
            },
            "SLine": {
                "1": "return globals.CurTime() - self._LastTime >= delta"
            }
        },
        {
            "Title": "Function timer:run",
            "subTitle": "",
            "dLine": {
                "2005": "function Timer:Run(interval)"
            },
            "SLine": {
                "1": "function Timer:Run(interval)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2006": "if (self:_Check(interval)) then"
            },
            "SLine": {
                "1": "if (self:_Check(interval)) then"
            }
        },
        {
            "Title": "Self._lasttime = globals.curtime",
            "subTitle": "",
            "dLine": {
                "2007": "self._LastTime = globals.CurTime()"
            },
            "SLine": {
                "1": "self._LastTime = globals.CurTime()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2009": "__bundle_register(\"lnxLib/Utils/Math\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Math\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local function isnan",
            "subTitle": "",
            "dLine": {
                "2013": "local function isNaN(x) return x ~= x end"
            },
            "SLine": {
                "1": "local function isNaN(x) return x ~= x end"
            }
        },
        {
            "Title": "Function math.normalizeangle",
            "subTitle": "",
            "dLine": {
                "2014": "function Math.NormalizeAngle(angle)"
            },
            "SLine": {
                "1": "function Math.NormalizeAngle(angle)"
            }
        },
        {
            "Title": "Function math.remapvalclamped",
            "subTitle": "",
            "dLine": {
                "2020": "function Math.RemapValClamped(val, A, B, C, D)"
            },
            "SLine": {
                "1": "function Math.RemapValClamped(val, A, B, C, D)"
            }
        },
        {
            "Title": "Cval = math.clamp",
            "subTitle": "",
            "dLine": {
                "2024": "cVal = math.clamp(cVal, 0, 1)"
            },
            "SLine": {
                "1": "cVal = math.clamp(cVal, 0, 1)"
            }
        },
        {
            "Title": "Function math.positionangles",
            "subTitle": "",
            "dLine": {
                "2026": "function Math.PositionAngles(source, dest)"
            },
            "SLine": {
                "1": "function Math.PositionAngles(source, dest)"
            }
        },
        {
            "Title": "Local pitch = math.atan",
            "subTitle": "",
            "dLine": {
                "2028": "local pitch = math.atan(delta.z / delta:Length2D()) * M_RADPI"
            },
            "SLine": {
                "1": "local pitch = math.atan(delta.z / delta:Length2D()) * M_RADPI"
            }
        },
        {
            "Title": "Local yaw = math.atan",
            "subTitle": "",
            "dLine": {
                "2029": "local yaw = math.atan(delta.y / delta.x) * M_RADPI"
            },
            "SLine": {
                "1": "local yaw = math.atan(delta.y / delta.x) * M_RADPI"
            }
        },
        {
            "Title": "If isnan",
            "subTitle": "",
            "dLine": {
                "2032": "if isNaN(pitch) then pitch = 0 end"
            },
            "SLine": {
                "1": "if isNaN(pitch) then pitch = 0 end"
            }
        },
        {
            "Title": "If isnan",
            "subTitle": "",
            "dLine": {
                "2033": "if isNaN(yaw) then yaw = 0 end"
            },
            "SLine": {
                "1": "if isNaN(yaw) then yaw = 0 end"
            }
        },
        {
            "Title": "Return eulerangles",
            "subTitle": "",
            "dLine": {
                "2034": "return EulerAngles(pitch, yaw, 0)"
            },
            "SLine": {
                "1": "return EulerAngles(pitch, yaw, 0)"
            }
        },
        {
            "Title": "Function math.anglefov",
            "subTitle": "",
            "dLine": {
                "2035": "function Math.AngleFov(vFrom, vTo)"
            },
            "SLine": {
                "1": "function Math.AngleFov(vFrom, vTo)"
            }
        },
        {
            "Title": "Local vsrc = vfrom:forward",
            "subTitle": "",
            "dLine": {
                "2036": "local vSrc = vFrom:Forward()"
            },
            "SLine": {
                "1": "local vSrc = vFrom:Forward()"
            }
        },
        {
            "Title": "Local vdst = vto:forward",
            "subTitle": "",
            "dLine": {
                "2037": "local vDst = vTo:Forward()"
            },
            "SLine": {
                "1": "local vDst = vTo:Forward()"
            }
        },
        {
            "Title": "Local fov = math.deg",
            "subTitle": "",
            "dLine": {
                "2038": "local fov = math.deg(math.acos(vDst:Dot(vSrc) / vDst:LengthSqr()))"
            },
            "SLine": {
                "1": "local fov = math.deg(math.acos(vDst:Dot(vSrc) / vDst:LengthSqr()))"
            }
        },
        {
            "Title": "If isnan",
            "subTitle": "",
            "dLine": {
                "2039": "if isNaN(fov) then fov = 0 end"
            },
            "SLine": {
                "1": "if isNaN(fov) then fov = 0 end"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2042": "__bundle_register(\"lnxLib/Utils/Logger\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Logger\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2048": "setmetatable(Logger, Logger)"
            },
            "SLine": {
                "1": "setmetatable(Logger, Logger)"
            }
        },
        {
            "Title": "Function logger.new",
            "subTitle": "",
            "dLine": {
                "2049": "function Logger.new(name)"
            },
            "SLine": {
                "1": "function Logger.new(name)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2050": "local self = setmetatable({}, Logger)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Logger)"
            }
        },
        {
            "Title": "For mode, data in pairs",
            "subTitle": "",
            "dLine": {
                "2058": "for mode, data in pairs(logModes) do"
            },
            "SLine": {
                "1": "for mode, data in pairs(logModes) do"
            }
        },
        {
            "Title": "Rawset",
            "subTitle": "",
            "dLine": {
                "2059": "rawset(Logger, mode, function(self, ...)"
            },
            "SLine": {
                "1": "rawset(Logger, mode, function(self, ...)"
            }
        },
        {
            "Title": "Local msg = string.format",
            "subTitle": "",
            "dLine": {
                "2061": "local msg = string.format(...)"
            },
            "SLine": {
                "1": "local msg = string.format(...)"
            }
        },
        {
            "Title": "Local r, g, b = table.unpack",
            "subTitle": "",
            "dLine": {
                "2062": "local r, g, b = table.unpack(data.Color)"
            },
            "SLine": {
                "1": "local r, g, b = table.unpack(data.Color)"
            }
        },
        {
            "Title": "Local time = os.date",
            "subTitle": "",
            "dLine": {
                "2064": "local time = os.date(\"%H:%M:%S\")"
            },
            "SLine": {
                "1": "local time = os.date(\"%H:%M:%S\")"
            }
        },
        {
            "Title": "Local logmsg = string.format",
            "subTitle": "",
            "dLine": {
                "2065": "local logMsg = string.format(\"[%-6s%s] %s: %s\", mode, time, name, msg)"
            },
            "SLine": {
                "1": "local logMsg = string.format(\"[%-6s%s] %s: %s\", mode, time, name, msg)"
            }
        },
        {
            "Title": "Printc",
            "subTitle": "",
            "dLine": {
                "2066": "printc(r, g, b, 255, logMsg)"
            },
            "SLine": {
                "1": "printc(r, g, b, 255, logMsg)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2068": "__bundle_register(\"lnxLib/Utils/KeyValues\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/KeyValues\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local function serializekv",
            "subTitle": "",
            "dLine": {
                "2071": "local function SerializeKV(name, data, indent)"
            },
            "SLine": {
                "1": "local function SerializeKV(name, data, indent)"
            }
        },
        {
            "Title": "For key, value in pairs",
            "subTitle": "",
            "dLine": {
                "2073": "for key, value in pairs(data) do"
            },
            "SLine": {
                "1": "for key, value in pairs(data) do"
            }
        },
        {
            "Title": "If type",
            "subTitle": "",
            "dLine": {
                "2074": "if type(value) == \"table\" then"
            },
            "SLine": {
                "1": "if type(value) == \"table\" then"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "2075": "table.insert(bodyData, SerializeKV(key, value, indent .. \"\\t\"))"
            },
            "SLine": {
                "1": "table.insert(bodyData, SerializeKV(key, value, indent .. \"\\t\"))"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "2076": "table.insert(bodyData, string.format(\"\\t%s\\\"%s\\\"\\t\\\"%s\\\"\", indent, key, value))"
            },
            "SLine": {
                "1": "table.insert(bodyData, string.format(\"\\t%s\\\"%s\\\"\\t\\\"%s\\\"\", indent, key, value))"
            }
        },
        {
            "Title": "Local body = table.concat",
            "subTitle": "",
            "dLine": {
                "2077": "local body = table.concat(bodyData, \"\\n\")"
            },
            "SLine": {
                "1": "local body = table.concat(bodyData, \"\\n\")"
            }
        },
        {
            "Title": "Return string.format",
            "subTitle": "",
            "dLine": {
                "2078": "return string.format(\"%s\\\"%s\\\"\\n%s{\\n%s\\n%s}\", indent, name, indent, body, indent)"
            },
            "SLine": {
                "1": "return string.format(\"%s\\\"%s\\\"\\n%s{\\n%s\\n%s}\", indent, name, indent, body, indent)"
            }
        },
        {
            "Title": "Function keyvalues.serialize",
            "subTitle": "",
            "dLine": {
                "2079": "function KeyValues.Serialize(name, data)"
            },
            "SLine": {
                "1": "function KeyValues.Serialize(name, data)"
            }
        },
        {
            "Title": "Return serializekv",
            "subTitle": "",
            "dLine": {
                "2081": "return SerializeKV(name, data, \"\")"
            },
            "SLine": {
                "1": "return SerializeKV(name, data, \"\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2083": "__bundle_register(\"lnxLib/Utils/KeyHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/KeyHelper\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2088": "setmetatable(KeyHelper, KeyHelper)"
            },
            "SLine": {
                "1": "setmetatable(KeyHelper, KeyHelper)"
            }
        },
        {
            "Title": "Function keyhelper.new",
            "subTitle": "",
            "dLine": {
                "2089": "function KeyHelper.new(key)"
            },
            "SLine": {
                "1": "function KeyHelper.new(key)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2090": "local self = setmetatable({}, KeyHelper)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, KeyHelper)"
            }
        },
        {
            "Title": "Function keyhelper:down",
            "subTitle": "",
            "dLine": {
                "2093": "function KeyHelper:Down()"
            },
            "SLine": {
                "1": "function KeyHelper:Down()"
            }
        },
        {
            "Title": "Local isdown = input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "2094": "local isDown = input.IsButtonDown(self.Key)"
            },
            "SLine": {
                "1": "local isDown = input.IsButtonDown(self.Key)"
            }
        },
        {
            "Title": "Function keyhelper:pressed",
            "subTitle": "",
            "dLine": {
                "2096": "function KeyHelper:Pressed()"
            },
            "SLine": {
                "1": "function KeyHelper:Pressed()"
            }
        },
        {
            "Title": "Self._laststate = self:down",
            "subTitle": "",
            "dLine": {
                "2098": "self._LastState = self:Down()"
            },
            "SLine": {
                "1": "self._LastState = self:Down()"
            }
        },
        {
            "Title": "Function keyhelper:released",
            "subTitle": "",
            "dLine": {
                "2100": "function KeyHelper:Released()"
            },
            "SLine": {
                "1": "function KeyHelper:Released()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2104": "__bundle_register(\"lnxLib/Utils/Input\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Input\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local function d",
            "subTitle": "",
            "dLine": {
                "2155": "local function D(x) return x, x end"
            },
            "SLine": {
                "1": "local function D(x) return x, x end"
            }
        },
        {
            "Title": "For i = 1, 10 do keynames[i], keyvalues[i] = d",
            "subTitle": "",
            "dLine": {
                "2156": "for i = 1, 10 do KeyNames[i], KeyValues[i] = D(tostring(i - 1)) end"
            },
            "SLine": {
                "1": "for i = 1, 10 do KeyNames[i], KeyValues[i] = D(tostring(i - 1)) end"
            }
        },
        {
            "Title": "For i = 11, 36 do keynames[i], keyvalues[i] = d",
            "subTitle": "",
            "dLine": {
                "2157": "for i = 11, 36 do KeyNames[i], KeyValues[i] = D(string.char(i + 54)) end"
            },
            "SLine": {
                "1": "for i = 11, 36 do KeyNames[i], KeyValues[i] = D(string.char(i + 54)) end"
            }
        },
        {
            "Title": "For i = 37, 46 do keynames[i], keyvalues[i] = \"kp_\" .. ",
            "subTitle": "",
            "dLine": {
                "2158": "for i = 37, 46 do KeyNames[i], KeyValues[i] = \"KP_\" .. (i - 37), tostring(i - 37) end"
            },
            "SLine": {
                "1": "for i = 37, 46 do KeyNames[i], KeyValues[i] = \"KP_\" .. (i - 37), tostring(i - 37) end"
            }
        },
        {
            "Title": "Function input.getkeyname",
            "subTitle": "",
            "dLine": {
                "2160": "function Input.GetKeyName(key)"
            },
            "SLine": {
                "1": "function Input.GetKeyName(key)"
            }
        },
        {
            "Title": "Function input.keytochar",
            "subTitle": "",
            "dLine": {
                "2162": "function Input.KeyToChar(key)"
            },
            "SLine": {
                "1": "function Input.KeyToChar(key)"
            }
        },
        {
            "Title": "Function input.chartokey",
            "subTitle": "",
            "dLine": {
                "2164": "function Input.CharToKey(char)"
            },
            "SLine": {
                "1": "function Input.CharToKey(char)"
            }
        },
        {
            "Title": "Return table.find",
            "subTitle": "",
            "dLine": {
                "2165": "return table.find(KeyValues, string.upper(char))"
            },
            "SLine": {
                "1": "return table.find(KeyValues, string.upper(char))"
            }
        },
        {
            "Title": "Function input.getpressedkey",
            "subTitle": "",
            "dLine": {
                "2166": "function Input.GetPressedKey()"
            },
            "SLine": {
                "1": "function Input.GetPressedKey()"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "2168": "if input.IsButtonDown(i) then return i end"
            },
            "SLine": {
                "1": "if input.IsButtonDown(i) then return i end"
            }
        },
        {
            "Title": "Function input.getpressedkeys",
            "subTitle": "",
            "dLine": {
                "2169": "function Input.GetPressedKeys()"
            },
            "SLine": {
                "1": "function Input.GetPressedKeys()"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "2171": "if input.IsButtonDown(i) then table.insert(keys, i) end"
            },
            "SLine": {
                "1": "if input.IsButtonDown(i) then table.insert(keys, i) end"
            }
        },
        {
            "Title": "Function input.mouseinbounds",
            "subTitle": "",
            "dLine": {
                "2173": "function Input.MouseInBounds(x, y, x2, y2)"
            },
            "SLine": {
                "1": "function Input.MouseInBounds(x, y, x2, y2)"
            }
        },
        {
            "Title": "Local mx, my = table.unpack",
            "subTitle": "",
            "dLine": {
                "2174": "local mx, my = table.unpack(input.GetMousePos())"
            },
            "SLine": {
                "1": "local mx, my = table.unpack(input.GetMousePos())"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2177": "__bundle_register(\"lnxLib/Utils/Web\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Web\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local function s",
            "subTitle": "",
            "dLine": {
                "2179": "local function S(str)"
            },
            "SLine": {
                "1": "local function S(str)"
            }
        },
        {
            "Title": "Return \"\\\"\" .. str:gsub",
            "subTitle": "",
            "dLine": {
                "2180": "return \"\\\"\" .. str:gsub(\"\\\"\", \"'\") .. \"\\\"\""
            },
            "SLine": {
                "1": "return \"\\\"\" .. str:gsub(\"\\\"\", \"'\") .. \"\\\"\""
            }
        },
        {
            "Title": "Function web.download",
            "subTitle": "",
            "dLine": {
                "2182": "function Web.Download(url, path)"
            },
            "SLine": {
                "1": "function Web.Download(url, path)"
            }
        },
        {
            "Title": "Os.execute",
            "subTitle": "",
            "dLine": {
                "2183": "os.execute(\"curl -o \" .. S(path) .. \""
            },
            "SLine": {
                "1": "os.execute(\"curl -o \" .. S(path) .. \""
            }
        },
        {
            "Title": "Function web.get",
            "subTitle": "",
            "dLine": {
                "2184": "function Web.Get(url)"
            },
            "SLine": {
                "1": "function Web.Get(url)"
            }
        },
        {
            "Title": "Local handle = io.popen",
            "subTitle": "",
            "dLine": {
                "2185": "local handle = io.popen(\"curl -s -L \" .. S(url) .. \"\")"
            },
            "SLine": {
                "1": "local handle = io.popen(\"curl -s -L \" .. S(url) .. \"\")"
            }
        },
        {
            "Title": "Local content = handle:read",
            "subTitle": "",
            "dLine": {
                "2187": "local content = handle:read(\"*a\")"
            },
            "SLine": {
                "1": "local content = handle:read(\"*a\")"
            }
        },
        {
            "Title": "Handle:close",
            "subTitle": "",
            "dLine": {
                "2188": "handle:close()"
            },
            "SLine": {
                "1": "handle:close()"
            }
        },
        {
            "Title": "Function web.post",
            "subTitle": "",
            "dLine": {
                "2189": "function Web.Post(url, data)"
            },
            "SLine": {
                "1": "function Web.Post(url, data)"
            }
        },
        {
            "Title": "Local handle = io.popen",
            "subTitle": "",
            "dLine": {
                "2190": "local handle = io.popen(\"curl -s -L -d \" .. S(data) .. \" \" .. S(url))"
            },
            "SLine": {
                "1": "local handle = io.popen(\"curl -s -L -d \" .. S(data) .. \" \" .. S(url))"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2192": "__bundle_register(\"lnxLib/Utils/Conversion\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Utils/Conversion\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Function conversion.id3_to_id64",
            "subTitle": "",
            "dLine": {
                "2195": "function Conversion.ID3_to_ID64(steamID3)"
            },
            "SLine": {
                "1": "function Conversion.ID3_to_ID64(steamID3)"
            }
        },
        {
            "Title": "If tonumber",
            "subTitle": "",
            "dLine": {
                "2196": "if tonumber(steamID3) then"
            },
            "SLine": {
                "1": "if tonumber(steamID3) then"
            }
        },
        {
            "Title": "Return tostring",
            "subTitle": "",
            "dLine": {
                "2197": "return tostring(tonumber(steamID3) + 0x110000100000000)"
            },
            "SLine": {
                "1": "return tostring(tonumber(steamID3) + 0x110000100000000)"
            }
        },
        {
            "Title": "Elseif steamid3:match",
            "subTitle": "",
            "dLine": {
                "2198": "elseif steamID3:match(\"(%[U:1:%d+%])\") then"
            },
            "SLine": {
                "1": "elseif steamID3:match(\"(%[U:1:%d+%])\") then"
            }
        },
        {
            "Title": "Return tostring",
            "subTitle": "",
            "dLine": {
                "2199": "return tostring(tonumber(steamID3:match(\"%[U:1:(%d+)%]\")) + 0x110000100000000)"
            },
            "SLine": {
                "1": "return tostring(tonumber(steamID3:match(\"%[U:1:(%d+)%]\")) + 0x110000100000000)"
            }
        },
        {
            "Title": "Function conversion.id64_to_id3",
            "subTitle": "",
            "dLine": {
                "2201": "function Conversion.ID64_to_ID3(steamID64)"
            },
            "SLine": {
                "1": "function Conversion.ID64_to_ID3(steamID64)"
            }
        },
        {
            "Title": "If not tonumber",
            "subTitle": "",
            "dLine": {
                "2202": "if not tonumber(steamID64) then"
            },
            "SLine": {
                "1": "if not tonumber(steamID64) then"
            }
        },
        {
            "Title": "Local steamid = tonumber",
            "subTitle": "",
            "dLine": {
                "2203": "local steamID = tonumber(steamID64)"
            },
            "SLine": {
                "1": "local steamID = tonumber(steamID64)"
            }
        },
        {
            "Title": "Return ",
            "subTitle": "",
            "dLine": {
                "2206": "return (\"[U:1:%d]\"):format(steamID - 0x110000100000000)"
            },
            "SLine": {
                "1": "return (\"[U:1:%d]\"):format(steamID - 0x110000100000000)"
            }
        },
        {
            "Title": "Function conversion.hex_to_rgb",
            "subTitle": "",
            "dLine": {
                "2207": "function Conversion.Hex_to_RGB(pHex)"
            },
            "SLine": {
                "1": "function Conversion.Hex_to_RGB(pHex)"
            }
        },
        {
            "Title": "Local r = tonumber",
            "subTitle": "",
            "dLine": {
                "2208": "local r = tonumber(string.sub(pHex, 1, 2), 16)"
            },
            "SLine": {
                "1": "local r = tonumber(string.sub(pHex, 1, 2), 16)"
            }
        },
        {
            "Title": "Local g = tonumber",
            "subTitle": "",
            "dLine": {
                "2209": "local g = tonumber(string.sub(pHex, 3, 4), 16)"
            },
            "SLine": {
                "1": "local g = tonumber(string.sub(pHex, 3, 4), 16)"
            }
        },
        {
            "Title": "Local b = tonumber",
            "subTitle": "",
            "dLine": {
                "2210": "local b = tonumber(string.sub(pHex, 5, 6), 16)"
            },
            "SLine": {
                "1": "local b = tonumber(string.sub(pHex, 5, 6), 16)"
            }
        },
        {
            "Title": "Function conversion.rgb_to_hex",
            "subTitle": "",
            "dLine": {
                "2211": "function Conversion.RGB_to_Hex(r, g, b)"
            },
            "SLine": {
                "1": "function Conversion.RGB_to_Hex(r, g, b)"
            }
        },
        {
            "Title": "Return string.format",
            "subTitle": "",
            "dLine": {
                "2212": "return string.format(\"%02x%02x%02x\", r, g, b)"
            },
            "SLine": {
                "1": "return string.format(\"%02x%02x%02x\", r, g, b)"
            }
        },
        {
            "Title": "Function conversion.hsv_to_rgb",
            "subTitle": "",
            "dLine": {
                "2213": "function Conversion.HSV_to_RGB(h, s, v)"
            },
            "SLine": {
                "1": "function Conversion.HSV_to_RGB(h, s, v)"
            }
        },
        {
            "Title": "Local i = math.floor",
            "subTitle": "",
            "dLine": {
                "2215": "local i = math.floor(h * 6);"
            },
            "SLine": {
                "1": "local i = math.floor(h * 6);"
            }
        },
        {
            "Title": "Return math.floor",
            "subTitle": "",
            "dLine": {
                "2233": "return math.floor(r * 255), math.floor(g * 255), math.floor(b * 255)"
            },
            "SLine": {
                "1": "return math.floor(r * 255), math.floor(g * 255), math.floor(b * 255)"
            }
        },
        {
            "Title": "Function conversion.rgb_to_hsv",
            "subTitle": "",
            "dLine": {
                "2234": "function Conversion.RGB_to_HSV(r, g, b)"
            },
            "SLine": {
                "1": "function Conversion.RGB_to_HSV(r, g, b)"
            }
        },
        {
            "Title": "Local max, min = math.max",
            "subTitle": "",
            "dLine": {
                "2236": "local max, min = math.max(r, g, b), math.min(r, g, b)"
            },
            "SLine": {
                "1": "local max, min = math.max(r, g, b), math.min(r, g, b)"
            }
        },
        {
            "Title": "Function conversion.time_to_ticks",
            "subTitle": "",
            "dLine": {
                "2255": "function Conversion.Time_to_Ticks(time)"
            },
            "SLine": {
                "1": "function Conversion.Time_to_Ticks(time)"
            }
        },
        {
            "Title": "Return math.floor",
            "subTitle": "",
            "dLine": {
                "2256": "return math.floor(0.5 + time / globals.TickInterval())"
            },
            "SLine": {
                "1": "return math.floor(0.5 + time / globals.TickInterval())"
            }
        },
        {
            "Title": "Function conversion.ticks_to_time",
            "subTitle": "",
            "dLine": {
                "2257": "function Conversion.Ticks_to_Time(ticks)"
            },
            "SLine": {
                "1": "function Conversion.Ticks_to_Time(ticks)"
            }
        },
        {
            "Title": "Return ticks * globals.tickinterval",
            "subTitle": "",
            "dLine": {
                "2258": "return ticks * globals.TickInterval()"
            },
            "SLine": {
                "1": "return ticks * globals.TickInterval()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2260": "__bundle_register(\"lnxLib/UI/UI\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/UI/UI\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Fonts = require",
            "subTitle": "",
            "dLine": {
                "2262": "Fonts = require(\"lnxLib/UI/Fonts\"),"
            },
            "SLine": {
                "1": "Fonts = require(\"lnxLib/UI/Fonts\"),"
            }
        },
        {
            "Title": "Textures = require",
            "subTitle": "",
            "dLine": {
                "2263": "Textures = require(\"lnxLib/UI/Textures\"),"
            },
            "SLine": {
                "1": "Textures = require(\"lnxLib/UI/Textures\"),"
            }
        },
        {
            "Title": "Notify = require",
            "subTitle": "",
            "dLine": {
                "2264": "Notify = require(\"lnxLib/UI/Notify\")"
            },
            "SLine": {
                "1": "Notify = require(\"lnxLib/UI/Notify\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2266": "__bundle_register(\"lnxLib/UI/Notify\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/UI/Notify\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local fonts = require",
            "subTitle": "",
            "dLine": {
                "2270": "local Fonts = require(\"lnxLib/UI/Fonts\")"
            },
            "SLine": {
                "1": "local Fonts = require(\"lnxLib/UI/Fonts\")"
            }
        },
        {
            "Title": "Function notify.push",
            "subTitle": "",
            "dLine": {
                "2278": "function Notify.Push(data)"
            },
            "SLine": {
                "1": "function Notify.Push(data)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2279": "assert(type(data) == \"table\", \"Notify.Push: data must be a table\")"
            },
            "SLine": {
                "1": "assert(type(data) == \"table\", \"Notify.Push: data must be a table\")"
            }
        },
        {
            "Title": "Data.starttime = globals.realtime",
            "subTitle": "",
            "dLine": {
                "2282": "data.StartTime = globals.RealTime()"
            },
            "SLine": {
                "1": "data.StartTime = globals.RealTime()"
            }
        },
        {
            "Title": "Function notify.alert",
            "subTitle": "",
            "dLine": {
                "2286": "function Notify.Alert(title, duration)"
            },
            "SLine": {
                "1": "function Notify.Alert(title, duration)"
            }
        },
        {
            "Title": "Function notify.simple",
            "subTitle": "",
            "dLine": {
                "2290": "function Notify.Simple(title, msg, duration)"
            },
            "SLine": {
                "1": "function Notify.Simple(title, msg, duration)"
            }
        },
        {
            "Title": "Function notify.pop",
            "subTitle": "",
            "dLine": {
                "2292": "function Notify.Pop(id)"
            },
            "SLine": {
                "1": "function Notify.Pop(id)"
            }
        },
        {
            "Title": "For id, note in pairs",
            "subTitle": "",
            "dLine": {
                "2297": "for id, note in pairs(notifications) do"
            },
            "SLine": {
                "1": "for id, note in pairs(notifications) do"
            }
        },
        {
            "Title": "Local deltatime = globals.realtime",
            "subTitle": "",
            "dLine": {
                "2298": "local deltaTime = globals.RealTime() - note.StartTime"
            },
            "SLine": {
                "1": "local deltaTime = globals.RealTime() - note.StartTime"
            }
        },
        {
            "Title": "Local fadealpha = math.floor",
            "subTitle": "",
            "dLine": {
                "2306": "local fadeAlpha = math.floor(fadeStep * 255)"
            },
            "SLine": {
                "1": "local fadeAlpha = math.floor(fadeStep * 255)"
            }
        },
        {
            "Title": "Currenty = currenty - math.floor",
            "subTitle": "",
            "dLine": {
                "2307": "currentY = currentY - math.floor((1 - fadeStep) * Size.H)"
            },
            "SLine": {
                "1": "currentY = currentY - math.floor((1 - fadeStep) * Size.H)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "2308": "draw.Color(35, 50, 60, fadeAlpha)"
            },
            "SLine": {
                "1": "draw.Color(35, 50, 60, fadeAlpha)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "2309": "draw.FilledRect(Offset.X, currentY, Offset.X + Size.W, currentY + Size.H)"
            },
            "SLine": {
                "1": "draw.FilledRect(Offset.X, currentY, Offset.X + Size.W, currentY + Size.H)"
            }
        },
        {
            "Title": "Local barwidth = math.floor",
            "subTitle": "",
            "dLine": {
                "2310": "local barWidth = math.floor(Size.W * (deltaTime / note.Duration))"
            },
            "SLine": {
                "1": "local barWidth = math.floor(Size.W * (deltaTime / note.Duration))"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "2311": "draw.Color(255, 255, 255, 150)"
            },
            "SLine": {
                "1": "draw.Color(255, 255, 255, 150)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "2312": "draw.FilledRect(Offset.X, currentY, Offset.X + barWidth, currentY + 5)"
            },
            "SLine": {
                "1": "draw.FilledRect(Offset.X, currentY, Offset.X + barWidth, currentY + 5)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "2313": "draw.Color(245, 245, 245, fadeAlpha)"
            },
            "SLine": {
                "1": "draw.Color(245, 245, 245, fadeAlpha)"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "2314": "draw.SetFont(Fonts.SegoeTitle)"
            },
            "SLine": {
                "1": "draw.SetFont(Fonts.SegoeTitle)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "2316": "draw.Text(Offset.X + Padding.X, currentY + Padding.Y, note.Title)"
            },
            "SLine": {
                "1": "draw.Text(Offset.X + Padding.X, currentY + Padding.Y, note.Title)"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "2317": "draw.SetFont(Fonts.Segoe)"
            },
            "SLine": {
                "1": "draw.SetFont(Fonts.Segoe)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "2319": "draw.Text(Offset.X + Padding.X, currentY + Padding.Y + 20, note.Content)"
            },
            "SLine": {
                "1": "draw.Text(Offset.X + Padding.X, currentY + Padding.Y + 20, note.Content)"
            }
        },
        {
            "Title": "Internal.registercallback",
            "subTitle": "",
            "dLine": {
                "2321": "Internal.RegisterCallback(\"Draw\", OnDraw, \"UI\", \"Notify\")"
            },
            "SLine": {
                "1": "Internal.RegisterCallback(\"Draw\", OnDraw, \"UI\", \"Notify\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2323": "__bundle_register(\"lnxLib/UI/Fonts\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/UI/Fonts\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Verdana = draw.createfont",
            "subTitle": "",
            "dLine": {
                "2325": "Verdana = draw.CreateFont(\"Verdana\", 14, 510),"
            },
            "SLine": {
                "1": "Verdana = draw.CreateFont(\"Verdana\", 14, 510),"
            }
        },
        {
            "Title": "Segoe = draw.createfont",
            "subTitle": "",
            "dLine": {
                "2326": "Segoe = draw.CreateFont(\"Segoe UI\", 14, 510),"
            },
            "SLine": {
                "1": "Segoe = draw.CreateFont(\"Segoe UI\", 14, 510),"
            }
        },
        {
            "Title": "Segoetitle = draw.createfont",
            "subTitle": "",
            "dLine": {
                "2327": "SegoeTitle = draw.CreateFont(\"Segoe UI\", 24, 700),"
            },
            "SLine": {
                "1": "SegoeTitle = draw.CreateFont(\"Segoe UI\", 24, 700),"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2329": "__bundle_register(\"lnxLib/UI/Textures\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/UI/Textures\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "For i = 0, 255 do bytemap[i] = string.char",
            "subTitle": "",
            "dLine": {
                "2332": "for i = 0, 255 do byteMap[i] = string.char(i) end"
            },
            "SLine": {
                "1": "for i = 0, 255 do byteMap[i] = string.char(i) end"
            }
        },
        {
            "Title": "Local r, g, b, a = table.unpack",
            "subTitle": "",
            "dLine": {
                "2334": "local r, g, b, a = table.unpack(color)"
            },
            "SLine": {
                "1": "local r, g, b, a = table.unpack(color)"
            }
        },
        {
            "Title": "Local function unpacksize",
            "subTitle": "",
            "dLine": {
                "2337": "local function UnpackSize(size)"
            },
            "SLine": {
                "1": "local function UnpackSize(size)"
            }
        },
        {
            "Title": "Local w, h = table.unpack",
            "subTitle": "",
            "dLine": {
                "2338": "local w, h = table.unpack(size)"
            },
            "SLine": {
                "1": "local w, h = table.unpack(size)"
            }
        },
        {
            "Title": "Local function gettextureid",
            "subTitle": "",
            "dLine": {
                "2341": "local function GetTextureID(name, ...)"
            },
            "SLine": {
                "1": "local function GetTextureID(name, ...)"
            }
        },
        {
            "Title": "Return table.concat",
            "subTitle": "",
            "dLine": {
                "2342": "return table.concat({name, ...})"
            },
            "SLine": {
                "1": "return table.concat({name, ...})"
            }
        },
        {
            "Title": "Local function createtexture",
            "subTitle": "",
            "dLine": {
                "2343": "local function CreateTexture(id, width, height, data)"
            },
            "SLine": {
                "1": "local function CreateTexture(id, width, height, data)"
            }
        },
        {
            "Title": "Local binarydata = table.concat",
            "subTitle": "",
            "dLine": {
                "2344": "local binaryData = table.concat(data)"
            },
            "SLine": {
                "1": "local binaryData = table.concat(data)"
            }
        },
        {
            "Title": "Local texture = draw.createtexturergba",
            "subTitle": "",
            "dLine": {
                "2345": "local texture = draw.CreateTextureRGBA(binaryData, width, height)"
            },
            "SLine": {
                "1": "local texture = draw.CreateTextureRGBA(binaryData, width, height)"
            }
        },
        {
            "Title": "Function textures.lineargradient",
            "subTitle": "",
            "dLine": {
                "2348": "function Textures.LinearGradient(startColor, endColor, size)"
            },
            "SLine": {
                "1": "function Textures.LinearGradient(startColor, endColor, size)"
            }
        },
        {
            "Title": "Local sr, sg, sb, sa = unpackcolor",
            "subTitle": "",
            "dLine": {
                "2349": "local sR, sG, sB, sA = UnpackColor(startColor)"
            },
            "SLine": {
                "1": "local sR, sG, sB, sA = UnpackColor(startColor)"
            }
        },
        {
            "Title": "Local er, eg, eb, ea = unpackcolor",
            "subTitle": "",
            "dLine": {
                "2350": "local eR, eG, eB, eA = UnpackColor(endColor)"
            },
            "SLine": {
                "1": "local eR, eG, eB, eA = UnpackColor(endColor)"
            }
        },
        {
            "Title": "Local w, h = unpacksize",
            "subTitle": "",
            "dLine": {
                "2351": "local w, h = UnpackSize(size)"
            },
            "SLine": {
                "1": "local w, h = UnpackSize(size)"
            }
        },
        {
            "Title": "Local id = gettextureid",
            "subTitle": "",
            "dLine": {
                "2352": "local id = GetTextureID(\"LG\", sR, sG, sB, sA, eR, eG, eB, eA, w, h)"
            },
            "SLine": {
                "1": "local id = GetTextureID(\"LG\", sR, sG, sB, sA, eR, eG, eB, eA, w, h)"
            }
        },
        {
            "Title": "Return createtexture",
            "subTitle": "",
            "dLine": {
                "2366": "return CreateTexture(id, w, h, data)"
            },
            "SLine": {
                "1": "return CreateTexture(id, w, h, data)"
            }
        },
        {
            "Title": "Function textures.circle",
            "subTitle": "",
            "dLine": {
                "2367": "function Textures.Circle(radius, color)"
            },
            "SLine": {
                "1": "function Textures.Circle(radius, color)"
            }
        },
        {
            "Title": "Local r, g, b, a = unpackcolor",
            "subTitle": "",
            "dLine": {
                "2368": "local r, g, b, a = UnpackColor(color)"
            },
            "SLine": {
                "1": "local r, g, b, a = UnpackColor(color)"
            }
        },
        {
            "Title": "Local id = gettextureid",
            "subTitle": "",
            "dLine": {
                "2369": "local id = GetTextureID(\"C\", r, g, b, a, radius)"
            },
            "SLine": {
                "1": "local id = GetTextureID(\"C\", r, g, b, a, radius)"
            }
        },
        {
            "Title": "Local dist = math.sqrt",
            "subTitle": "",
            "dLine": {
                "2374": "local dist = math.sqrt(dx * dx + dy * dy)"
            },
            "SLine": {
                "1": "local dist = math.sqrt(dx * dx + dy * dy)"
            }
        },
        {
            "Title": "Return createtexture",
            "subTitle": "",
            "dLine": {
                "2384": "return CreateTexture(id, diameter, diameter, data)"
            },
            "SLine": {
                "1": "return CreateTexture(id, diameter, diameter, data)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2386": "__bundle_register(\"lnxLib/TF2/TF2\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/TF2\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Helpers = require",
            "subTitle": "",
            "dLine": {
                "2388": "Helpers = require(\"lnxLib/TF2/Helpers\"),"
            },
            "SLine": {
                "1": "Helpers = require(\"lnxLib/TF2/Helpers\"),"
            }
        },
        {
            "Title": "Globals = require",
            "subTitle": "",
            "dLine": {
                "2389": "Globals = require(\"lnxLib/TF2/Globals\"),"
            },
            "SLine": {
                "1": "Globals = require(\"lnxLib/TF2/Globals\"),"
            }
        },
        {
            "Title": "Wplayer = require",
            "subTitle": "",
            "dLine": {
                "2390": "WPlayer = require(\"lnxLib/TF2/Wrappers/WPlayer\"),"
            },
            "SLine": {
                "1": "WPlayer = require(\"lnxLib/TF2/Wrappers/WPlayer\"),"
            }
        },
        {
            "Title": "Wentity = require",
            "subTitle": "",
            "dLine": {
                "2391": "WEntity = require(\"lnxLib/TF2/Wrappers/WEntity\"),"
            },
            "SLine": {
                "1": "WEntity = require(\"lnxLib/TF2/Wrappers/WEntity\"),"
            }
        },
        {
            "Title": "Wweapon = require",
            "subTitle": "",
            "dLine": {
                "2392": "WWeapon = require(\"lnxLib/TF2/Wrappers/WWeapon\"),"
            },
            "SLine": {
                "1": "WWeapon = require(\"lnxLib/TF2/Wrappers/WWeapon\"),"
            }
        },
        {
            "Title": "Wplayerresource = require",
            "subTitle": "",
            "dLine": {
                "2393": "WPlayerResource = require(\"lnxLib/TF2/Wrappers/WPlayerResource\")"
            },
            "SLine": {
                "1": "WPlayerResource = require(\"lnxLib/TF2/Wrappers/WPlayerResource\")"
            }
        },
        {
            "Title": "Function tf2.exit",
            "subTitle": "",
            "dLine": {
                "2394": "function TF2.Exit()"
            },
            "SLine": {
                "1": "function TF2.Exit()"
            }
        },
        {
            "Title": "Os.exit",
            "subTitle": "",
            "dLine": {
                "2395": "os.exit()"
            },
            "SLine": {
                "1": "os.exit()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2397": "__bundle_register(\"lnxLib/TF2/Wrappers/WPlayerResource\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Wrappers/WPlayerResource\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local wentity = require",
            "subTitle": "",
            "dLine": {
                "2399": "local WEntity = require(\"lnxLib/TF2/Wrappers/WEntity\")"
            },
            "SLine": {
                "1": "local WEntity = require(\"lnxLib/TF2/Wrappers/WEntity\")"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2402": "setmetatable(WPlayerResource, WEntity)"
            },
            "SLine": {
                "1": "setmetatable(WPlayerResource, WEntity)"
            }
        },
        {
            "Title": "Function wplayerresource.fromentity",
            "subTitle": "",
            "dLine": {
                "2403": "function WPlayerResource.FromEntity(entity)"
            },
            "SLine": {
                "1": "function WPlayerResource.FromEntity(entity)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2404": "assert(entity, \"WPlayerResource.FromEntity: entity is nil\")"
            },
            "SLine": {
                "1": "assert(entity, \"WPlayerResource.FromEntity: entity is nil\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2405": "local self = setmetatable({}, WPlayerResource)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, WPlayerResource)"
            }
        },
        {
            "Title": "Self:setentity",
            "subTitle": "",
            "dLine": {
                "2406": "self:SetEntity(entity)"
            },
            "SLine": {
                "1": "self:SetEntity(entity)"
            }
        },
        {
            "Title": "Function wplayerresource.get",
            "subTitle": "",
            "dLine": {
                "2407": "function WPlayerResource.Get()"
            },
            "SLine": {
                "1": "function WPlayerResource.Get()"
            }
        },
        {
            "Title": "Local pr = entities.getplayerresources",
            "subTitle": "",
            "dLine": {
                "2408": "local pr = entities.GetPlayerResources()"
            },
            "SLine": {
                "1": "local pr = entities.GetPlayerResources()"
            }
        },
        {
            "Title": "Return pr ~= nil and wplayerresource.fromentity",
            "subTitle": "",
            "dLine": {
                "2409": "return pr ~= nil and WPlayerResource.FromEntity(pr) or nil"
            },
            "SLine": {
                "1": "return pr ~= nil and WPlayerResource.FromEntity(pr) or nil"
            }
        },
        {
            "Title": "Function wplayerresource:getping",
            "subTitle": "",
            "dLine": {
                "2410": "function WPlayerResource:GetPing(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPing(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2411": "return self:GetPropDataTableInt(\"m_iPing\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPing\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getscore",
            "subTitle": "",
            "dLine": {
                "2412": "function WPlayerResource:GetScore(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetScore(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2413": "return self:GetPropDataTableInt(\"m_iScore\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iScore\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getdeaths",
            "subTitle": "",
            "dLine": {
                "2414": "function WPlayerResource:GetDeaths(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetDeaths(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2415": "return self:GetPropDataTableInt(\"m_iDeaths\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iDeaths\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getconnected",
            "subTitle": "",
            "dLine": {
                "2416": "function WPlayerResource:GetConnected(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetConnected(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablebool",
            "subTitle": "",
            "dLine": {
                "2417": "return self:GetPropDataTableBool(\"m_bConnected\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableBool(\"m_bConnected\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getteam",
            "subTitle": "",
            "dLine": {
                "2418": "function WPlayerResource:GetTeam(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetTeam(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2419": "return self:GetPropDataTableInt(\"m_iTeam\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iTeam\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getalive",
            "subTitle": "",
            "dLine": {
                "2420": "function WPlayerResource:GetAlive(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetAlive(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablebool",
            "subTitle": "",
            "dLine": {
                "2421": "return self:GetPropDataTableBool(\"m_bAlive\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableBool(\"m_bAlive\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:gethealth",
            "subTitle": "",
            "dLine": {
                "2422": "function WPlayerResource:GetHealth(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetHealth(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2423": "return self:GetPropDataTableInt(\"m_iHealth\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iHealth\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getaccountid",
            "subTitle": "",
            "dLine": {
                "2424": "function WPlayerResource:GetAccountID(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetAccountID(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2425": "return self:GetPropDataTableInt(\"m_iAccountID\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iAccountID\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getvalid",
            "subTitle": "",
            "dLine": {
                "2426": "function WPlayerResource:GetValid(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetValid(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablebool",
            "subTitle": "",
            "dLine": {
                "2427": "return self:GetPropDataTableBool(\"m_bValid\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableBool(\"m_bValid\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getuserid",
            "subTitle": "",
            "dLine": {
                "2428": "function WPlayerResource:GetUserID(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetUserID(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2429": "return self:GetPropDataTableInt(\"m_iUserID\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iUserID\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:gettotalscore",
            "subTitle": "",
            "dLine": {
                "2430": "function WPlayerResource:GetTotalScore(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetTotalScore(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2431": "return self:GetPropDataTableInt(\"m_iTotalScore\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iTotalScore\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getmaxhealth",
            "subTitle": "",
            "dLine": {
                "2432": "function WPlayerResource:GetMaxHealth(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetMaxHealth(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2433": "return self:GetPropDataTableInt(\"m_iMaxHealth\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iMaxHealth\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getmaxbuffedhealth",
            "subTitle": "",
            "dLine": {
                "2434": "function WPlayerResource:GetMaxBuffedHealth(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetMaxBuffedHealth(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2435": "return self:GetPropDataTableInt(\"m_iMaxBuffedHealth\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iMaxBuffedHealth\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getplayerclass",
            "subTitle": "",
            "dLine": {
                "2436": "function WPlayerResource:GetPlayerClass(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPlayerClass(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2437": "return self:GetPropDataTableInt(\"m_iPlayerClass\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPlayerClass\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getarenaspectator",
            "subTitle": "",
            "dLine": {
                "2438": "function WPlayerResource:GetArenaSpectator(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetArenaSpectator(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablebool",
            "subTitle": "",
            "dLine": {
                "2439": "return self:GetPropDataTableBool(\"m_bArenaSpectator\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableBool(\"m_bArenaSpectator\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getactivedominations",
            "subTitle": "",
            "dLine": {
                "2440": "function WPlayerResource:GetActiveDominations(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetActiveDominations(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2441": "return self:GetPropDataTableInt(\"m_iActiveDominations\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iActiveDominations\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getnextrespawntime",
            "subTitle": "",
            "dLine": {
                "2442": "function WPlayerResource:GetNextRespawnTime(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetNextRespawnTime(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablefloat",
            "subTitle": "",
            "dLine": {
                "2443": "return self:GetPropDataTableFloat(\"m_flNextRespawnTime\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableFloat(\"m_flNextRespawnTime\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getchargelevel",
            "subTitle": "",
            "dLine": {
                "2444": "function WPlayerResource:GetChargeLevel(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetChargeLevel(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2445": "return self:GetPropDataTableInt(\"m_iChargeLevel\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iChargeLevel\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getdamage",
            "subTitle": "",
            "dLine": {
                "2446": "function WPlayerResource:GetDamage(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetDamage(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2447": "return self:GetPropDataTableInt(\"m_iDamage\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iDamage\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getdamageassist",
            "subTitle": "",
            "dLine": {
                "2448": "function WPlayerResource:GetDamageAssist(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetDamageAssist(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2449": "return self:GetPropDataTableInt(\"m_iDamageAssist\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iDamageAssist\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getdamageboss",
            "subTitle": "",
            "dLine": {
                "2450": "function WPlayerResource:GetDamageBoss(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetDamageBoss(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2451": "return self:GetPropDataTableInt(\"m_iDamageBoss\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iDamageBoss\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:gethealing",
            "subTitle": "",
            "dLine": {
                "2452": "function WPlayerResource:GetHealing(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetHealing(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2453": "return self:GetPropDataTableInt(\"m_iHealing\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iHealing\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:gethealingassist",
            "subTitle": "",
            "dLine": {
                "2454": "function WPlayerResource:GetHealingAssist(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetHealingAssist(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2455": "return self:GetPropDataTableInt(\"m_iHealingAssist\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iHealingAssist\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getdamageblocked",
            "subTitle": "",
            "dLine": {
                "2456": "function WPlayerResource:GetDamageBlocked(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetDamageBlocked(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2457": "return self:GetPropDataTableInt(\"m_iDamageBlocked\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iDamageBlocked\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getcurrencycollected",
            "subTitle": "",
            "dLine": {
                "2458": "function WPlayerResource:GetCurrencyCollected(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetCurrencyCollected(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2459": "return self:GetPropDataTableInt(\"m_iCurrencyCollected\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iCurrencyCollected\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getbonuspoints",
            "subTitle": "",
            "dLine": {
                "2460": "function WPlayerResource:GetBonusPoints(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetBonusPoints(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2461": "return self:GetPropDataTableInt(\"m_iBonusPoints\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iBonusPoints\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getplayerlevel",
            "subTitle": "",
            "dLine": {
                "2462": "function WPlayerResource:GetPlayerLevel(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPlayerLevel(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2463": "return self:GetPropDataTableInt(\"m_iPlayerLevel\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPlayerLevel\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getstreaks",
            "subTitle": "",
            "dLine": {
                "2464": "function WPlayerResource:GetStreaks(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetStreaks(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2465": "return self:GetPropDataTableInt(\"m_iStreaks\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iStreaks\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getupgraderefundcredits",
            "subTitle": "",
            "dLine": {
                "2466": "function WPlayerResource:GetUpgradeRefundCredits(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetUpgradeRefundCredits(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2467": "return self:GetPropDataTableInt(\"m_iUpgradeRefundCredits\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iUpgradeRefundCredits\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getbuybackcredits",
            "subTitle": "",
            "dLine": {
                "2468": "function WPlayerResource:GetBuybackCredits(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetBuybackCredits(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2469": "return self:GetPropDataTableInt(\"m_iBuybackCredits\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iBuybackCredits\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getpartyleaderredteamindex",
            "subTitle": "",
            "dLine": {
                "2470": "function WPlayerResource:GetPartyLeaderRedTeamIndex(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPartyLeaderRedTeamIndex(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2471": "return self:GetPropDataTableInt(\"m_iPartyLeaderRedTeamIndex\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPartyLeaderRedTeamIndex\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getpartyleaderblueteamindex",
            "subTitle": "",
            "dLine": {
                "2472": "function WPlayerResource:GetPartyLeaderBlueTeamIndex(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPartyLeaderBlueTeamIndex(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2473": "return self:GetPropDataTableInt(\"m_iPartyLeaderBlueTeamIndex\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPartyLeaderBlueTeamIndex\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:geteventteamstatus",
            "subTitle": "",
            "dLine": {
                "2474": "function WPlayerResource:GetEventTeamStatus(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetEventTeamStatus(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2475": "return self:GetPropDataTableInt(\"m_iEventTeamStatus\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iEventTeamStatus\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getplayerclasswhenkilled",
            "subTitle": "",
            "dLine": {
                "2476": "function WPlayerResource:GetPlayerClassWhenKilled(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetPlayerClassWhenKilled(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2477": "return self:GetPropDataTableInt(\"m_iPlayerClassWhenKilled\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iPlayerClassWhenKilled\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getconnectionstate",
            "subTitle": "",
            "dLine": {
                "2478": "function WPlayerResource:GetConnectionState(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetConnectionState(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatableint",
            "subTitle": "",
            "dLine": {
                "2479": "return self:GetPropDataTableInt(\"m_iConnectionState\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableInt(\"m_iConnectionState\")[index + 1]"
            }
        },
        {
            "Title": "Function wplayerresource:getconnecttime",
            "subTitle": "",
            "dLine": {
                "2480": "function WPlayerResource:GetConnectTime(index)"
            },
            "SLine": {
                "1": "function WPlayerResource:GetConnectTime(index)"
            }
        },
        {
            "Title": "Return self:getpropdatatablefloat",
            "subTitle": "",
            "dLine": {
                "2481": "return self:GetPropDataTableFloat(\"m_flConnectTime\")[index + 1]"
            },
            "SLine": {
                "1": "return self:GetPropDataTableFloat(\"m_flConnectTime\")[index + 1]"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2483": "__bundle_register(\"lnxLib/TF2/Wrappers/WEntity\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Wrappers/WEntity\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local helpers = require",
            "subTitle": "",
            "dLine": {
                "2485": "local Helpers = require(\"lnxLib/TF2/Helpers\")"
            },
            "SLine": {
                "1": "local Helpers = require(\"lnxLib/TF2/Helpers\")"
            }
        },
        {
            "Title": "__index = function",
            "subTitle": "",
            "dLine": {
                "2490": "__index = function(self, key, ...)"
            },
            "SLine": {
                "1": "__index = function(self, key, ...)"
            }
        },
        {
            "Title": "Return function",
            "subTitle": "",
            "dLine": {
                "2491": "return function(t, ...)"
            },
            "SLine": {
                "1": "return function(t, ...)"
            }
        },
        {
            "Title": "Local entity = rawget",
            "subTitle": "",
            "dLine": {
                "2492": "local entity = rawget(t, \"Entity\")"
            },
            "SLine": {
                "1": "local entity = rawget(t, \"Entity\")"
            }
        },
        {
            "Title": "Function wentity.fromentity",
            "subTitle": "",
            "dLine": {
                "2494": "function WEntity.FromEntity(entity)"
            },
            "SLine": {
                "1": "function WEntity.FromEntity(entity)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2495": "assert(entity, \"WEntity.FromEntity: entity is nil\")"
            },
            "SLine": {
                "1": "assert(entity, \"WEntity.FromEntity: entity is nil\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2496": "local self = setmetatable({}, WEntity)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, WEntity)"
            }
        },
        {
            "Title": "Function wentity:setentity",
            "subTitle": "",
            "dLine": {
                "2497": "function WEntity:SetEntity(entity)"
            },
            "SLine": {
                "1": "function WEntity:SetEntity(entity)"
            }
        },
        {
            "Title": "Function wentity:unwrap",
            "subTitle": "",
            "dLine": {
                "2499": "function WEntity:Unwrap()"
            },
            "SLine": {
                "1": "function WEntity:Unwrap()"
            }
        },
        {
            "Title": "Function wentity:equals",
            "subTitle": "",
            "dLine": {
                "2501": "function WEntity:Equals(other)"
            },
            "SLine": {
                "1": "function WEntity:Equals(other)"
            }
        },
        {
            "Title": "Return self:getindex",
            "subTitle": "",
            "dLine": {
                "2502": "return self:GetIndex() == other:GetIndex()"
            },
            "SLine": {
                "1": "return self:GetIndex() == other:GetIndex()"
            }
        },
        {
            "Title": "Function wentity:getsimulationtime",
            "subTitle": "",
            "dLine": {
                "2503": "function WEntity:GetSimulationTime()"
            },
            "SLine": {
                "1": "function WEntity:GetSimulationTime()"
            }
        },
        {
            "Title": "Return self:getpropfloat",
            "subTitle": "",
            "dLine": {
                "2504": "return self:GetPropFloat(\"m_flSimulationTime\")"
            },
            "SLine": {
                "1": "return self:GetPropFloat(\"m_flSimulationTime\")"
            }
        },
        {
            "Title": "Function wentity:extrapolate",
            "subTitle": "",
            "dLine": {
                "2505": "function WEntity:Extrapolate(t)"
            },
            "SLine": {
                "1": "function WEntity:Extrapolate(t)"
            }
        },
        {
            "Title": "Return self:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2506": "return self:GetAbsOrigin() + self:EstimateAbsVelocity() * t"
            },
            "SLine": {
                "1": "return self:GetAbsOrigin() + self:EstimateAbsVelocity() * t"
            }
        },
        {
            "Title": "Function wentity:isvisible",
            "subTitle": "",
            "dLine": {
                "2507": "function WEntity:IsVisible(fromEntity)"
            },
            "SLine": {
                "1": "function WEntity:IsVisible(fromEntity)"
            }
        },
        {
            "Title": "Return helpers.vispos",
            "subTitle": "",
            "dLine": {
                "2508": "return Helpers.VisPos(self, fromEntity:GetAbsOrigin(), self:GetAbsOrigin())"
            },
            "SLine": {
                "1": "return Helpers.VisPos(self, fromEntity:GetAbsOrigin(), self:GetAbsOrigin())"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2510": "__bundle_register(\"lnxLib/TF2/Helpers\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Helpers\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local function computemove",
            "subTitle": "",
            "dLine": {
                "2513": "local function ComputeMove(userCmd, a, b)"
            },
            "SLine": {
                "1": "local function ComputeMove(userCmd, a, b)"
            }
        },
        {
            "Title": "Local cpitch, cyaw, croll = usercmd:getviewangles",
            "subTitle": "",
            "dLine": {
                "2514": "local cPitch, cYaw, cRoll = userCmd:GetViewAngles()"
            },
            "SLine": {
                "1": "local cPitch, cYaw, cRoll = userCmd:GetViewAngles()"
            }
        },
        {
            "Title": "Function helpers.walkto",
            "subTitle": "",
            "dLine": {
                "2515": "function Helpers.WalkTo(userCmd, localPlayer, destination)"
            },
            "SLine": {
                "1": "function Helpers.WalkTo(userCmd, localPlayer, destination)"
            }
        },
        {
            "Title": "Local localpos = localplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2516": "local localPos = localPlayer:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local localPos = localPlayer:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local result = computemove",
            "subTitle": "",
            "dLine": {
                "2517": "local result = ComputeMove(userCmd, localPos, destination)"
            },
            "SLine": {
                "1": "local result = ComputeMove(userCmd, localPos, destination)"
            }
        },
        {
            "Title": "Usercmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "2518": "userCmd:SetForwardMove(result.x)"
            },
            "SLine": {
                "1": "userCmd:SetForwardMove(result.x)"
            }
        },
        {
            "Title": "Usercmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "2519": "userCmd:SetSideMove(result.y)"
            },
            "SLine": {
                "1": "userCmd:SetSideMove(result.y)"
            }
        },
        {
            "Title": "Function helpers.canshoot",
            "subTitle": "",
            "dLine": {
                "2520": "function Helpers.CanShoot(weapon)"
            },
            "SLine": {
                "1": "function Helpers.CanShoot(weapon)"
            }
        },
        {
            "Title": "Local lplayer = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "2521": "local lPlayer = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local lPlayer = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "If weapon:ismeleeweapon",
            "subTitle": "",
            "dLine": {
                "2522": "if weapon:IsMeleeWeapon() then return false end"
            },
            "SLine": {
                "1": "if weapon:IsMeleeWeapon() then return false end"
            }
        },
        {
            "Title": "Local nextprimaryattack = weapon:getpropfloat",
            "subTitle": "",
            "dLine": {
                "2523": "local nextPrimaryAttack = weapon:GetPropFloat(\"LocalActiveWeaponData\", \"m_flNextPrimaryAttack\")"
            },
            "SLine": {
                "1": "local nextPrimaryAttack = weapon:GetPropFloat(\"LocalActiveWeaponData\", \"m_flNextPrimaryAttack\")"
            }
        },
        {
            "Title": "Local nextattack = lplayer:getpropfloat",
            "subTitle": "",
            "dLine": {
                "2524": "local nextAttack = lPlayer:GetPropFloat(\"bcc_localdata\", \"m_flNextAttack\")"
            },
            "SLine": {
                "1": "local nextAttack = lPlayer:GetPropFloat(\"bcc_localdata\", \"m_flNextAttack\")"
            }
        },
        {
            "Title": "Function helpers.vispos",
            "subTitle": "",
            "dLine": {
                "2525": "function Helpers.VisPos(target, from, to)"
            },
            "SLine": {
                "1": "function Helpers.VisPos(target, from, to)"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "2526": "local trace = engine.TraceLine(from, to, MASK_SHOT | CONTENTS_GRATE)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(from, to, MASK_SHOT | CONTENTS_GRATE)"
            }
        },
        {
            "Title": "Function helpers.getbbox",
            "subTitle": "",
            "dLine": {
                "2528": "function Helpers.GetBBox(player)"
            },
            "SLine": {
                "1": "function Helpers.GetBBox(player)"
            }
        },
        {
            "Title": "Local padding = vector3",
            "subTitle": "",
            "dLine": {
                "2529": "local padding = Vector3(0, 0, 10)"
            },
            "SLine": {
                "1": "local padding = Vector3(0, 0, 10)"
            }
        },
        {
            "Title": "Local headpos = player:geteyepos",
            "subTitle": "",
            "dLine": {
                "2530": "local headPos = player:GetEyePos() + padding"
            },
            "SLine": {
                "1": "local headPos = player:GetEyePos() + padding"
            }
        },
        {
            "Title": "Local feetpos = player:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2531": "local feetPos = player:GetAbsOrigin() - padding"
            },
            "SLine": {
                "1": "local feetPos = player:GetAbsOrigin() - padding"
            }
        },
        {
            "Title": "Local headscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2532": "local headScreenPos = client.WorldToScreen(headPos)"
            },
            "SLine": {
                "1": "local headScreenPos = client.WorldToScreen(headPos)"
            }
        },
        {
            "Title": "Local feetscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2533": "local feetScreenPos = client.WorldToScreen(feetPos)"
            },
            "SLine": {
                "1": "local feetScreenPos = client.WorldToScreen(feetPos)"
            }
        },
        {
            "Title": "Local height = math.abs",
            "subTitle": "",
            "dLine": {
                "2535": "local height = math.abs(headScreenPos[2] - feetScreenPos[2])"
            },
            "SLine": {
                "1": "local height = math.abs(headScreenPos[2] - feetScreenPos[2])"
            }
        },
        {
            "Title": "X = math.floor",
            "subTitle": "",
            "dLine": {
                "2538": "x = math.floor(headScreenPos[1] - width * 0.5),"
            },
            "SLine": {
                "1": "x = math.floor(headScreenPos[1] - width * 0.5),"
            }
        },
        {
            "Title": "Y = math.floor",
            "subTitle": "",
            "dLine": {
                "2539": "y = math.floor(headScreenPos[2]),"
            },
            "SLine": {
                "1": "y = math.floor(headScreenPos[2]),"
            }
        },
        {
            "Title": "W = math.floor",
            "subTitle": "",
            "dLine": {
                "2540": "w = math.floor(width),"
            },
            "SLine": {
                "1": "w = math.floor(width),"
            }
        },
        {
            "Title": "H = math.floor",
            "subTitle": "",
            "dLine": {
                "2541": "h = math.floor(height)"
            },
            "SLine": {
                "1": "h = math.floor(height)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2543": "__bundle_register(\"lnxLib/TF2/Wrappers/WWeapon\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Wrappers/WWeapon\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2546": "setmetatable(WWeapon, WEntity)"
            },
            "SLine": {
                "1": "setmetatable(WWeapon, WEntity)"
            }
        },
        {
            "Title": "Function wweapon.fromentity",
            "subTitle": "",
            "dLine": {
                "2547": "function WWeapon.FromEntity(entity)"
            },
            "SLine": {
                "1": "function WWeapon.FromEntity(entity)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2548": "assert(entity, \"WWeapon.FromEntity: entity is nil\")"
            },
            "SLine": {
                "1": "assert(entity, \"WWeapon.FromEntity: entity is nil\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2549": "assert(entity:IsWeapon(), \"WWeapon.FromEntity: entity is not a weapon\")"
            },
            "SLine": {
                "1": "assert(entity:IsWeapon(), \"WWeapon.FromEntity: entity is not a weapon\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2550": "local self = setmetatable({}, WWeapon)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, WWeapon)"
            }
        },
        {
            "Title": "Function wweapon:getowner",
            "subTitle": "",
            "dLine": {
                "2551": "function WWeapon:GetOwner()"
            },
            "SLine": {
                "1": "function WWeapon:GetOwner()"
            }
        },
        {
            "Title": "Return self:getpropentity",
            "subTitle": "",
            "dLine": {
                "2552": "return self:GetPropEntity(\"m_hOwner\")"
            },
            "SLine": {
                "1": "return self:GetPropEntity(\"m_hOwner\")"
            }
        },
        {
            "Title": "Function wweapon:getdefindex",
            "subTitle": "",
            "dLine": {
                "2553": "function WWeapon:GetDefIndex()"
            },
            "SLine": {
                "1": "function WWeapon:GetDefIndex()"
            }
        },
        {
            "Title": "Return self:getpropint",
            "subTitle": "",
            "dLine": {
                "2554": "return self:GetPropInt(\"m_iItemDefinitionIndex\")"
            },
            "SLine": {
                "1": "return self:GetPropInt(\"m_iItemDefinitionIndex\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2556": "__bundle_register(\"lnxLib/TF2/Wrappers/WPlayer\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Wrappers/WPlayer\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local wweapon = require",
            "subTitle": "",
            "dLine": {
                "2558": "local WWeapon = require(\"lnxLib/TF2/Wrappers/WWeapon\")"
            },
            "SLine": {
                "1": "local WWeapon = require(\"lnxLib/TF2/Wrappers/WWeapon\")"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2561": "setmetatable(WPlayer, WEntity)"
            },
            "SLine": {
                "1": "setmetatable(WPlayer, WEntity)"
            }
        },
        {
            "Title": "Function wplayer.fromentity",
            "subTitle": "",
            "dLine": {
                "2562": "function WPlayer.FromEntity(entity)"
            },
            "SLine": {
                "1": "function WPlayer.FromEntity(entity)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2563": "assert(entity, \"WPlayer.FromEntity: entity is nil\")"
            },
            "SLine": {
                "1": "assert(entity, \"WPlayer.FromEntity: entity is nil\")"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "2564": "assert(entity:IsPlayer(), \"WPlayer.FromEntity: entity is not a player\")"
            },
            "SLine": {
                "1": "assert(entity:IsPlayer(), \"WPlayer.FromEntity: entity is not a player\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2565": "local self = setmetatable({}, WPlayer)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, WPlayer)"
            }
        },
        {
            "Title": "Function wplayer.getlocal",
            "subTitle": "",
            "dLine": {
                "2566": "function WPlayer.GetLocal()"
            },
            "SLine": {
                "1": "function WPlayer.GetLocal()"
            }
        },
        {
            "Title": "Local lp = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "2567": "local lp = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local lp = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Return lp ~= nil and wplayer.fromentity",
            "subTitle": "",
            "dLine": {
                "2568": "return lp ~= nil and WPlayer.FromEntity(lp) or nil"
            },
            "SLine": {
                "1": "return lp ~= nil and WPlayer.FromEntity(lp) or nil"
            }
        },
        {
            "Title": "Function wplayer:isonground",
            "subTitle": "",
            "dLine": {
                "2569": "function WPlayer:IsOnGround()"
            },
            "SLine": {
                "1": "function WPlayer:IsOnGround()"
            }
        },
        {
            "Title": "Local pflags = self:getpropint",
            "subTitle": "",
            "dLine": {
                "2570": "local pFlags = self:GetPropInt(\"m_fFlags\")"
            },
            "SLine": {
                "1": "local pFlags = self:GetPropInt(\"m_fFlags\")"
            }
        },
        {
            "Title": "Function wplayer:getactiveweapon",
            "subTitle": "",
            "dLine": {
                "2571": "function WPlayer:GetActiveWeapon()"
            },
            "SLine": {
                "1": "function WPlayer:GetActiveWeapon()"
            }
        },
        {
            "Title": "Return wweapon.fromentity",
            "subTitle": "",
            "dLine": {
                "2572": "return WWeapon.FromEntity(self:GetPropEntity(\"m_hActiveWeapon\"))"
            },
            "SLine": {
                "1": "return WWeapon.FromEntity(self:GetPropEntity(\"m_hActiveWeapon\"))"
            }
        },
        {
            "Title": "Function wplayer:getobservermode",
            "subTitle": "",
            "dLine": {
                "2573": "function WPlayer:GetObserverMode()"
            },
            "SLine": {
                "1": "function WPlayer:GetObserverMode()"
            }
        },
        {
            "Title": "Return self:getpropint",
            "subTitle": "",
            "dLine": {
                "2574": "return self:GetPropInt(\"m_iObserverMode\")"
            },
            "SLine": {
                "1": "return self:GetPropInt(\"m_iObserverMode\")"
            }
        },
        {
            "Title": "Function wplayer:getobservertarget",
            "subTitle": "",
            "dLine": {
                "2575": "function WPlayer:GetObserverTarget()"
            },
            "SLine": {
                "1": "function WPlayer:GetObserverTarget()"
            }
        },
        {
            "Title": "Return wplayer.fromentity",
            "subTitle": "",
            "dLine": {
                "2576": "return WPlayer.FromEntity(self:GetPropEntity(\"m_hObserverTarget\"))"
            },
            "SLine": {
                "1": "return WPlayer.FromEntity(self:GetPropEntity(\"m_hObserverTarget\"))"
            }
        },
        {
            "Title": "Function wplayer:gethitboxpos",
            "subTitle": "",
            "dLine": {
                "2577": "function WPlayer:GetHitboxPos(hitboxID)"
            },
            "SLine": {
                "1": "function WPlayer:GetHitboxPos(hitboxID)"
            }
        },
        {
            "Title": "Local hitbox = self:gethitboxes",
            "subTitle": "",
            "dLine": {
                "2578": "local hitbox = self:GetHitboxes()[hitboxID]"
            },
            "SLine": {
                "1": "local hitbox = self:GetHitboxes()[hitboxID]"
            }
        },
        {
            "Title": "If not hitbox then return vector3",
            "subTitle": "",
            "dLine": {
                "2579": "if not hitbox then return Vector3(0, 0, 0) end"
            },
            "SLine": {
                "1": "if not hitbox then return Vector3(0, 0, 0) end"
            }
        },
        {
            "Title": "Function wplayer:getviewoffset",
            "subTitle": "",
            "dLine": {
                "2580": "function WPlayer:GetViewOffset()"
            },
            "SLine": {
                "1": "function WPlayer:GetViewOffset()"
            }
        },
        {
            "Title": "Return self:getpropvector",
            "subTitle": "",
            "dLine": {
                "2581": "return self:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            },
            "SLine": {
                "1": "return self:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            }
        },
        {
            "Title": "Function wplayer:geteyepos",
            "subTitle": "",
            "dLine": {
                "2582": "function WPlayer:GetEyePos()"
            },
            "SLine": {
                "1": "function WPlayer:GetEyePos()"
            }
        },
        {
            "Title": "Return self:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2583": "return self:GetAbsOrigin() + self:GetViewOffset()"
            },
            "SLine": {
                "1": "return self:GetAbsOrigin() + self:GetViewOffset()"
            }
        },
        {
            "Title": "Function wplayer:geteyeangles",
            "subTitle": "",
            "dLine": {
                "2584": "function WPlayer:GetEyeAngles()"
            },
            "SLine": {
                "1": "function WPlayer:GetEyeAngles()"
            }
        },
        {
            "Title": "Local angles = self:getpropvector",
            "subTitle": "",
            "dLine": {
                "2585": "local angles = self:GetPropVector(\"tfnonlocaldata\", \"m_angEyeAngles[0]\")"
            },
            "SLine": {
                "1": "local angles = self:GetPropVector(\"tfnonlocaldata\", \"m_angEyeAngles[0]\")"
            }
        },
        {
            "Title": "Return eulerangles",
            "subTitle": "",
            "dLine": {
                "2586": "return EulerAngles(angles.x, angles.y, angles.z)"
            },
            "SLine": {
                "1": "return EulerAngles(angles.x, angles.y, angles.z)"
            }
        },
        {
            "Title": "Function wplayer:getviewpos",
            "subTitle": "",
            "dLine": {
                "2587": "function WPlayer:GetViewPos()"
            },
            "SLine": {
                "1": "function WPlayer:GetViewPos()"
            }
        },
        {
            "Title": "Local eyepos = self:geteyepos",
            "subTitle": "",
            "dLine": {
                "2588": "local eyePos = self:GetEyePos()"
            },
            "SLine": {
                "1": "local eyePos = self:GetEyePos()"
            }
        },
        {
            "Title": "Local targetpos = eyepos + self:geteyeangles",
            "subTitle": "",
            "dLine": {
                "2589": "local targetPos = eyePos + self:GetEyeAngles():Forward() * 8192"
            },
            "SLine": {
                "1": "local targetPos = eyePos + self:GetEyeAngles():Forward() * 8192"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "2590": "local trace = engine.TraceLine(eyePos, targetPos, MASK_SHOT)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(eyePos, targetPos, MASK_SHOT)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2593": "__bundle_register(\"lnxLib/TF2/Globals\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/TF2/Globals\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Internal.registercallback",
            "subTitle": "",
            "dLine": {
                "2600": "Internal.RegisterCallback(\"CreateMove\", OnCreateMove, \"TF2\", \"Globals\")"
            },
            "SLine": {
                "1": "Internal.RegisterCallback(\"CreateMove\", OnCreateMove, \"TF2\", \"Globals\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2602": "__bundle_register(\"lnxLib/Global/Global\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/Global\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "2603": "require(\"lnxLib/Global/Extensions\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/Extensions\")"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "2604": "require(\"lnxLib/Global/Internal\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/Internal\")"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "2605": "require(\"lnxLib/Global/Stack\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/Stack\")"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "2606": "require(\"lnxLib/Global/Deque\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/Deque\")"
            }
        },
        {
            "Title": "Require",
            "subTitle": "",
            "dLine": {
                "2607": "require(\"lnxLib/Global/DelayedCall\")"
            },
            "SLine": {
                "1": "require(\"lnxLib/Global/DelayedCall\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2608": "__bundle_register(\"lnxLib/Global/DelayedCall\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/DelayedCall\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Function _g.delayedcall",
            "subTitle": "",
            "dLine": {
                "2611": "function _G.DelayedCall(delay, func)"
            },
            "SLine": {
                "1": "function _G.DelayedCall(delay, func)"
            }
        },
        {
            "Title": "Time = globals.realtime",
            "subTitle": "",
            "dLine": {
                "2613": "time = globals.RealTime() + delay,"
            },
            "SLine": {
                "1": "time = globals.RealTime() + delay,"
            }
        },
        {
            "Title": "Local curtime = globals.realtime",
            "subTitle": "",
            "dLine": {
                "2615": "local curTime = globals.RealTime()"
            },
            "SLine": {
                "1": "local curTime = globals.RealTime()"
            }
        },
        {
            "Title": "For i, call in ipairs",
            "subTitle": "",
            "dLine": {
                "2616": "for i, call in ipairs(delayedCalls) do"
            },
            "SLine": {
                "1": "for i, call in ipairs(delayedCalls) do"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "2618": "table.remove(delayedCalls, i)"
            },
            "SLine": {
                "1": "table.remove(delayedCalls, i)"
            }
        },
        {
            "Title": "Call.func",
            "subTitle": "",
            "dLine": {
                "2619": "call.func()"
            },
            "SLine": {
                "1": "call.func()"
            }
        },
        {
            "Title": "Internal.registercallback",
            "subTitle": "",
            "dLine": {
                "2620": "Internal.RegisterCallback(\"Draw\", OnDraw, \"DelayedCall\")"
            },
            "SLine": {
                "1": "Internal.RegisterCallback(\"Draw\", OnDraw, \"DelayedCall\")"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2621": "__bundle_register(\"lnxLib/Global/Deque\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/Deque\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2627": "setmetatable(Deque, Deque)"
            },
            "SLine": {
                "1": "setmetatable(Deque, Deque)"
            }
        },
        {
            "Title": "Function deque.new",
            "subTitle": "",
            "dLine": {
                "2628": "function Deque.new(items)"
            },
            "SLine": {
                "1": "function Deque.new(items)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2629": "local self = setmetatable({}, Deque)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Deque)"
            }
        },
        {
            "Title": "Function deque:pushfront",
            "subTitle": "",
            "dLine": {
                "2632": "function Deque:pushFront(item)"
            },
            "SLine": {
                "1": "function Deque:pushFront(item)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "2633": "table.insert(self._items, 1, item)"
            },
            "SLine": {
                "1": "table.insert(self._items, 1, item)"
            }
        },
        {
            "Title": "Function deque:pushback",
            "subTitle": "",
            "dLine": {
                "2635": "function Deque:pushBack(item)"
            },
            "SLine": {
                "1": "function Deque:pushBack(item)"
            }
        },
        {
            "Title": "Function deque:popfront",
            "subTitle": "",
            "dLine": {
                "2637": "function Deque:popFront()"
            },
            "SLine": {
                "1": "function Deque:popFront()"
            }
        },
        {
            "Title": "Return table.remove",
            "subTitle": "",
            "dLine": {
                "2639": "return table.remove(self._items, 1)"
            },
            "SLine": {
                "1": "return table.remove(self._items, 1)"
            }
        },
        {
            "Title": "Function deque:popback",
            "subTitle": "",
            "dLine": {
                "2640": "function Deque:popBack()"
            },
            "SLine": {
                "1": "function Deque:popBack()"
            }
        },
        {
            "Title": "Return table.remove",
            "subTitle": "",
            "dLine": {
                "2641": "return table.remove(self._items)"
            },
            "SLine": {
                "1": "return table.remove(self._items)"
            }
        },
        {
            "Title": "Function deque:peekfront",
            "subTitle": "",
            "dLine": {
                "2642": "function Deque:peekFront()"
            },
            "SLine": {
                "1": "function Deque:peekFront()"
            }
        },
        {
            "Title": "Function deque:peekback",
            "subTitle": "",
            "dLine": {
                "2644": "function Deque:peekBack()"
            },
            "SLine": {
                "1": "function Deque:peekBack()"
            }
        },
        {
            "Title": "Function deque:empty",
            "subTitle": "",
            "dLine": {
                "2646": "function Deque:empty()"
            },
            "SLine": {
                "1": "function Deque:empty()"
            }
        },
        {
            "Title": "Function deque:clear",
            "subTitle": "",
            "dLine": {
                "2648": "function Deque:clear()"
            },
            "SLine": {
                "1": "function Deque:clear()"
            }
        },
        {
            "Title": "Function deque:size",
            "subTitle": "",
            "dLine": {
                "2651": "function Deque:size()"
            },
            "SLine": {
                "1": "function Deque:size()"
            }
        },
        {
            "Title": "Function deque:items",
            "subTitle": "",
            "dLine": {
                "2653": "function Deque:items()"
            },
            "SLine": {
                "1": "function Deque:items()"
            }
        },
        {
            "Title": "Return table.readonly",
            "subTitle": "",
            "dLine": {
                "2654": "return table.readOnly(self._items)"
            },
            "SLine": {
                "1": "return table.readOnly(self._items)"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2655": "__bundle_register(\"lnxLib/Global/Stack\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/Stack\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "2659": "setmetatable(Stack, Stack)"
            },
            "SLine": {
                "1": "setmetatable(Stack, Stack)"
            }
        },
        {
            "Title": "Function stack.new",
            "subTitle": "",
            "dLine": {
                "2660": "function Stack.new(items)"
            },
            "SLine": {
                "1": "function Stack.new(items)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "2661": "local self = setmetatable({}, Stack)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Stack)"
            }
        },
        {
            "Title": "Function stack:push",
            "subTitle": "",
            "dLine": {
                "2662": "function Stack:push(item)"
            },
            "SLine": {
                "1": "function Stack:push(item)"
            }
        },
        {
            "Title": "Function stack:pop",
            "subTitle": "",
            "dLine": {
                "2663": "function Stack:pop()"
            },
            "SLine": {
                "1": "function Stack:pop()"
            }
        },
        {
            "Title": "Function stack:peek",
            "subTitle": "",
            "dLine": {
                "2664": "function Stack:peek()"
            },
            "SLine": {
                "1": "function Stack:peek()"
            }
        },
        {
            "Title": "Function stack:empty",
            "subTitle": "",
            "dLine": {
                "2665": "function Stack:empty()"
            },
            "SLine": {
                "1": "function Stack:empty()"
            }
        },
        {
            "Title": "Function stack:clear",
            "subTitle": "",
            "dLine": {
                "2666": "function Stack:clear()"
            },
            "SLine": {
                "1": "function Stack:clear()"
            }
        },
        {
            "Title": "Function stack:size",
            "subTitle": "",
            "dLine": {
                "2667": "function Stack:size()"
            },
            "SLine": {
                "1": "function Stack:size()"
            }
        },
        {
            "Title": "Function stack:items",
            "subTitle": "",
            "dLine": {
                "2668": "function Stack:items()"
            },
            "SLine": {
                "1": "function Stack:items()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2669": "__bundle_register(\"lnxLib/Global/Internal\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/Internal\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Local oldinternal = rawget",
            "subTitle": "",
            "dLine": {
                "2671": "local oldInternal = rawget(_G, \"Internal\")"
            },
            "SLine": {
                "1": "local oldInternal = rawget(_G, \"Internal\")"
            }
        },
        {
            "Title": "Function internal.registercallback",
            "subTitle": "",
            "dLine": {
                "2673": "function Internal.RegisterCallback(id, callback, ...)"
            },
            "SLine": {
                "1": "function Internal.RegisterCallback(id, callback, ...)"
            }
        },
        {
            "Title": "Local name = table.concat",
            "subTitle": "",
            "dLine": {
                "2674": "local name = table.concat({\"lnxLib\", ..., id}, \".\")"
            },
            "SLine": {
                "1": "local name = table.concat({\"lnxLib\", ..., id}, \".\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "2675": "callbacks.Unregister(id, name)"
            },
            "SLine": {
                "1": "callbacks.Unregister(id, name)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "2676": "callbacks.Register(id, name, callback)"
            },
            "SLine": {
                "1": "callbacks.Register(id, name, callback)"
            }
        },
        {
            "Title": "Function internal.cleanup",
            "subTitle": "",
            "dLine": {
                "2677": "function Internal.Cleanup()"
            },
            "SLine": {
                "1": "function Internal.Cleanup()"
            }
        },
        {
            "Title": "__bundle_register",
            "subTitle": "",
            "dLine": {
                "2679": "__bundle_register(\"lnxLib/Global/Extensions\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            },
            "SLine": {
                "1": "__bundle_register(\"lnxLib/Global/Extensions\", function(require, _LOADED, __bundle_register, __bundle_modules)"
            }
        },
        {
            "Title": "Function math.clamp",
            "subTitle": "",
            "dLine": {
                "2681": "function math.clamp(n, low, high)"
            },
            "SLine": {
                "1": "function math.clamp(n, low, high)"
            }
        },
        {
            "Title": "Return math.min",
            "subTitle": "",
            "dLine": {
                "2682": "return math.min(math.max(n, low), high)",
                "3143": "local function Clamp(n, low, high) return math.min(math.max(n, low), high) end"
            },
            "SLine": {
                "1": "return math.min(math.max(n, low), high)"
            }
        },
        {
            "Title": "Function math.round",
            "subTitle": "",
            "dLine": {
                "2683": "function math.round(n)"
            },
            "SLine": {
                "1": "function math.round(n)"
            }
        },
        {
            "Title": "Return math.floor",
            "subTitle": "",
            "dLine": {
                "2684": "return math.floor(n + 0.5)"
            },
            "SLine": {
                "1": "return math.floor(n + 0.5)"
            }
        },
        {
            "Title": "Function math.lerp",
            "subTitle": "",
            "dLine": {
                "2685": "function math.lerp(a, b, t)"
            },
            "SLine": {
                "1": "function math.lerp(a, b, t)"
            }
        },
        {
            "Title": "Function table.readonly",
            "subTitle": "",
            "dLine": {
                "2687": "function table.readOnly(t)"
            },
            "SLine": {
                "1": "function table.readOnly(t)"
            }
        },
        {
            "Title": "__newindex = function",
            "subTitle": "",
            "dLine": {
                "2691": "__newindex = function(u, k, v)"
            },
            "SLine": {
                "1": "__newindex = function(u, k, v)"
            }
        },
        {
            "Title": "Error",
            "subTitle": "throws error with message",
            "dLine": {
                "2692": "error(\"Attempt to modify read-only table\", 2)"
            },
            "SLine": {
                "1": "error(\"Attempt to modify read-only table\", 2)"
            }
        },
        {
            "Title": "Function table.find",
            "subTitle": "",
            "dLine": {
                "2694": "function table.find(t, value)"
            },
            "SLine": {
                "1": "function table.find(t, value)"
            }
        },
        {
            "Title": "For k, v in pairs",
            "subTitle": "",
            "dLine": {
                "2695": "for k, v in pairs(t) do"
            },
            "SLine": {
                "1": "for k, v in pairs(t) do"
            }
        },
        {
            "Title": "Function table.contains",
            "subTitle": "",
            "dLine": {
                "2697": "function table.contains(t, value)"
            },
            "SLine": {
                "1": "function table.contains(t, value)"
            }
        },
        {
            "Title": "Return table.find",
            "subTitle": "",
            "dLine": {
                "2698": "return table.find(t, value) ~= nil"
            },
            "SLine": {
                "1": "return table.find(t, value) ~= nil"
            }
        },
        {
            "Title": "Function string.split",
            "subTitle": "",
            "dLine": {
                "2699": "function string.split(str, delimiter)"
            },
            "SLine": {
                "1": "function string.split(str, delimiter)"
            }
        },
        {
            "Title": "Local delim_from, delim_to = string.find",
            "subTitle": "",
            "dLine": {
                "2702": "local delim_from, delim_to = string.find(str, delimiter, from)"
            },
            "SLine": {
                "1": "local delim_from, delim_to = string.find(str, delimiter, from)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "2704": "table.insert(result, string.sub(str, from, delim_from - 1))"
            },
            "SLine": {
                "1": "table.insert(result, string.sub(str, from, delim_from - 1))"
            }
        },
        {
            "Title": "Delim_from, delim_to = string.find",
            "subTitle": "",
            "dLine": {
                "2702": "local delim_from, delim_to = string.find(str, delimiter, from)",
                "2706": "delim_from, delim_to = string.find(str, delimiter, from)"
            },
            "SLine": {
                "1": "delim_from, delim_to = string.find(str, delimiter, from)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "2707": "table.insert(result, string.sub(str, from))"
            },
            "SLine": {
                "1": "table.insert(result, string.sub(str, from))"
            }
        },
        {
            "Title": "Return __bundle_require",
            "subTitle": "",
            "dLine": {
                "2709": "return __bundle_require(\"__root\")"
            },
            "SLine": {
                "1": "return __bundle_require(\"__root\")"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "2735": "local menu = MenuLib.Create(\"Misc Tools\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Misc Tools\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local mautoweapon       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2736": "local mAutoweapon       = menu:AddComponent(MenuLib.Checkbox(\"low health esp\",      true))"
            },
            "SLine": {
                "1": "local mAutoweapon       = menu:AddComponent(MenuLib.Checkbox(\"low health esp\",      true))"
            }
        },
        {
            "Title": "Local mwswitchoptions   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2737": "local mWswitchoptions   = menu:AddComponent(MenuLib.MultiCombo(\"^Settings\",             autoswitch_options, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mWswitchoptions   = menu:AddComponent(MenuLib.MultiCombo(\"^Settings\",             autoswitch_options, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local mcrossbowhealth   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2738": "local mcrossbowhealth   = menu:AddComponent(MenuLib.Slider(\"crossbow min health\",    1, 100, 92))"
            },
            "SLine": {
                "1": "local mcrossbowhealth   = menu:AddComponent(MenuLib.Slider(\"crossbow min health\",    1, 100, 92))"
            }
        },
        {
            "Title": "Local mautoweapondist   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2739": "local mAutoWeaponDist   = menu:AddComponent(MenuLib.Slider(\"melee Switch Distance\",    0, 400, 77))"
            },
            "SLine": {
                "1": "local mAutoWeaponDist   = menu:AddComponent(MenuLib.Slider(\"melee Switch Distance\",    0, 400, 77))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2740": "menu:AddComponent(MenuLib.Button(\"Disable Weapon Sway\", function()"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Button(\"Disable Weapon Sway\", function()"
            }
        },
        {
            "Title": "Local mretrystunned     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2742": "local mRetryStunned     = menu:AddComponent(MenuLib.Checkbox(\"suicide when stunned\",     true))"
            },
            "SLine": {
                "1": "local mRetryStunned     = menu:AddComponent(MenuLib.Checkbox(\"suicide when stunned\",     true))"
            }
        },
        {
            "Title": "Local wflip             = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2743": "local WFlip             = menu:AddComponent(MenuLib.Checkbox(\"Auto Weapon Flip\",       true))"
            },
            "SLine": {
                "1": "local WFlip             = menu:AddComponent(MenuLib.Checkbox(\"Auto Weapon Flip\",       true))"
            }
        },
        {
            "Title": "Local mmedicfinder      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2744": "local mMedicFinder      = menu:AddComponent(MenuLib.Checkbox(\"Medic Finder\",           true))"
            },
            "SLine": {
                "1": "local mMedicFinder      = menu:AddComponent(MenuLib.Checkbox(\"Medic Finder\",           true))"
            }
        },
        {
            "Title": "Local mlegitspec        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2745": "local mLegitSpec        = menu:AddComponent(MenuLib.Checkbox(\"Legit when Spectated\",   false))"
            },
            "SLine": {
                "1": "local mLegitSpec        = menu:AddComponent(MenuLib.Checkbox(\"Legit when Spectated\",   false))"
            }
        },
        {
            "Title": "Local mlegitspecfp      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2746": "local mLegitSpecFP      = menu:AddComponent(MenuLib.Checkbox(\"^Firstperson Only\",      false))"
            },
            "SLine": {
                "1": "local mLegitSpecFP      = menu:AddComponent(MenuLib.Checkbox(\"^Firstperson Only\",      false))"
            }
        },
        {
            "Title": "Local mlegjitter        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2747": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\",             false))"
            },
            "SLine": {
                "1": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\",             false))"
            }
        },
        {
            "Title": "Local mrocketlines      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2748": "local mRocketLines      = menu:AddComponent(MenuLib.Checkbox(\"Rocket Lines\",           false))"
            },
            "SLine": {
                "1": "local mRocketLines      = menu:AddComponent(MenuLib.Checkbox(\"Rocket Lines\",           false))"
            }
        },
        {
            "Title": "Local mextendfreeze     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2749": "local mExtendFreeze     = menu:AddComponent(MenuLib.Checkbox(\"inffinite spectator time\", false))"
            },
            "SLine": {
                "1": "local mExtendFreeze     = menu:AddComponent(MenuLib.Checkbox(\"inffinite spectator time\", false))"
            }
        },
        {
            "Title": "Local msandwitchex      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2750": "local msandwitchex      = menu:AddComponent(MenuLib.Checkbox(\"inffinite sandwich exploid\", false))"
            },
            "SLine": {
                "1": "local msandwitchex      = menu:AddComponent(MenuLib.Checkbox(\"inffinite sandwich exploid\", false))"
            }
        },
        {
            "Title": "Local mretrylowhp       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2751": "local mRetryLowHP       = menu:AddComponent(MenuLib.Checkbox(\"Retry When Low HP\",      false))"
            },
            "SLine": {
                "1": "local mRetryLowHP       = menu:AddComponent(MenuLib.Checkbox(\"Retry When Low HP\",      false))"
            }
        },
        {
            "Title": "Local mretrylowhpvalue  = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2752": "local mRetryLowHPValue  = menu:AddComponent(MenuLib.Slider(\"Retry HP\",                 1, 299, 30))"
            },
            "SLine": {
                "1": "local mRetryLowHPValue  = menu:AddComponent(MenuLib.Slider(\"Retry HP\",                 1, 299, 30))"
            }
        },
        {
            "Title": "Local mautofl           = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2753": "local mAutoFL           = menu:AddComponent(MenuLib.Checkbox(\"Auto Fake Latency\",      false))"
            },
            "SLine": {
                "1": "local mAutoFL           = menu:AddComponent(MenuLib.Checkbox(\"Auto Fake Latency\",      false))"
            }
        },
        {
            "Title": "Local mautofldist       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2754": "local mAutoFLDist       = menu:AddComponent(MenuLib.Slider(\"AFL Activation Distance\",    100, 700, 530))"
            },
            "SLine": {
                "1": "local mAutoFLDist       = menu:AddComponent(MenuLib.Slider(\"AFL Activation Distance\",    100, 700, 530))"
            }
        },
        {
            "Title": "Local mautoflfar        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2755": "local mAutoFLFar        = menu:AddComponent(MenuLib.Slider(\"AFL Far Value\",         0, 1000, 777))"
            },
            "SLine": {
                "1": "local mAutoFLFar        = menu:AddComponent(MenuLib.Slider(\"AFL Far Value\",         0, 1000, 777))"
            }
        },
        {
            "Title": "Local mautoflnear       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2756": "local mAutoFLNear       = menu:AddComponent(MenuLib.Slider(\"AFL Close Value\",        0, 1000, 477))"
            },
            "SLine": {
                "1": "local mAutoFLNear       = menu:AddComponent(MenuLib.Slider(\"AFL Close Value\",        0, 1000, 477))"
            }
        },
        {
            "Title": "Local mrandpingvalue    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2757": "local mRandPingValue    = menu:AddComponent(MenuLib.Slider(\"Ping Randomness\",          0, 15, 0))"
            },
            "SLine": {
                "1": "local mRandPingValue    = menu:AddComponent(MenuLib.Slider(\"Ping Randomness\",          0, 15, 0))"
            }
        },
        {
            "Title": "Local mrandlag          = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2758": "local mRandLag          = menu:AddComponent(MenuLib.Checkbox(\"Random Fakelag\",         false))"
            },
            "SLine": {
                "1": "local mRandLag          = menu:AddComponent(MenuLib.Checkbox(\"Random Fakelag\",         false))"
            }
        },
        {
            "Title": "Local mrandlagvalue     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2759": "local mRandLagValue     = menu:AddComponent(MenuLib.Slider(\"Fakelag Randomness\",       1, 200, 77))"
            },
            "SLine": {
                "1": "local mRandLagValue     = menu:AddComponent(MenuLib.Slider(\"Fakelag Randomness\",       1, 200, 77))"
            }
        },
        {
            "Title": "Local mrandlagmin       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2760": "local mRandLagMin       = menu:AddComponent(MenuLib.Slider(\"Fakelag Min\",              1, 314, 247))"
            },
            "SLine": {
                "1": "local mRandLagMin       = menu:AddComponent(MenuLib.Slider(\"Fakelag Min\",              1, 314, 247))"
            }
        },
        {
            "Title": "Local mrandlagmax       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "2761": "local mRandLagMax       = menu:AddComponent(MenuLib.Slider(\"Fakelag Max\",              2, 315, 315))"
            },
            "SLine": {
                "1": "local mRandLagMax       = menu:AddComponent(MenuLib.Slider(\"Fakelag Max\",              2, 315, 315))"
            }
        },
        {
            "Title": "Local function resettempoptions",
            "subTitle": "",
            "dLine": {
                "2763": "local function ResetTempOptions()"
            },
            "SLine": {
                "1": "local function ResetTempOptions()"
            }
        },
        {
            "Title": "For k, v in pairs",
            "subTitle": "",
            "dLine": {
                "2764": "for k, v in pairs(TempOptions) do"
            },
            "SLine": {
                "1": "for k, v in pairs(TempOptions) do"
            }
        },
        {
            "Title": "Local function setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2766": "local function SetOptionTemp(option, value)"
            },
            "SLine": {
                "1": "local function SetOptionTemp(option, value)"
            }
        },
        {
            "Title": "Local guivalue = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "2767": "local guiValue = gui.GetValue(option)"
            },
            "SLine": {
                "1": "local guiValue = gui.GetValue(option)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2769": "gui.SetValue(option, value)"
            },
            "SLine": {
                "1": "gui.SetValue(option, value)"
            }
        },
        {
            "Title": "Local function checktempoptions",
            "subTitle": "",
            "dLine": {
                "2775": "local function CheckTempOptions()"
            },
            "SLine": {
                "1": "local function CheckTempOptions()"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2777": "gui.SetValue(k, v.Value)"
            },
            "SLine": {
                "1": "gui.SetValue(k, v.Value)"
            }
        },
        {
            "Title": "Resettempoptions",
            "subTitle": "",
            "dLine": {
                "2763": "local function ResetTempOptions()",
                "2779": "ResetTempOptions()"
            },
            "SLine": {
                "1": "ResetTempOptions()"
            }
        },
        {
            "Title": "Local cmdbuttons = pcmd:getbuttons",
            "subTitle": "",
            "dLine": {
                "2780": "local cmdButtons = pCmd:GetButtons()"
            },
            "SLine": {
                "1": "local cmdButtons = pCmd:GetButtons()"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "2782": "and (vVelocity:Length2D() < 10) then"
            },
            "SLine": {
                "1": "and (vVelocity:Length2D() < 10) then"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "2784": "pCmd:SetSideMove(9)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(9)"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "2785": "pCmd:SetSideMove(-9)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(-9)"
            }
        },
        {
            "Title": "If mfaststop:getvalue",
            "subTitle": "",
            "dLine": {
                "2786": "if mFastStop:GetValue() == true then"
            },
            "SLine": {
                "1": "if mFastStop:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2787": "if (pLocal:IsAlive()) and (pCmd.forwardmove == 0)"
            },
            "SLine": {
                "1": "if (pLocal:IsAlive()) and (pCmd.forwardmove == 0)"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "2789": "and (vVelocity:Length2D() > 10) then"
            },
            "SLine": {
                "1": "and (vVelocity:Length2D() > 10) then"
            }
        },
        {
            "Title": "Local fsx, fsy, fsz = vvelocity:unpack",
            "subTitle": "",
            "dLine": {
                "2790": "local fsx, fsy, fsz = vVelocity:Unpack()"
            },
            "SLine": {
                "1": "local fsx, fsy, fsz = vVelocity:Unpack()"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "2791": "print(fsx, fsy, fsz)"
            },
            "SLine": {
                "1": "print(fsx, fsy, fsz)"
            }
        },
        {
            "Title": "Pcmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "2793": "pCmd:SetForwardMove(fsx)"
            },
            "SLine": {
                "1": "pCmd:SetForwardMove(fsx)"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "2794": "pCmd:SetSideMove(fsy)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(fsy)"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "2795": "print(\"Success! X:\" .. fsx .. \" Y:\" .. fsy .. \" Z:\" .. fsz)"
            },
            "SLine": {
                "1": "print(\"Success! X:\" .. fsx .. \" Y:\" .. fsy .. \" Z:\" .. fsz)"
            }
        },
        {
            "Title": "If mretrylowhp:getvalue",
            "subTitle": "",
            "dLine": {
                "2796": "if mRetryLowHP:GetValue() == true then"
            },
            "SLine": {
                "1": "if mRetryLowHP:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2797": "if (pLocal:IsAlive()) and (pLocal:GetHealth() > 0"
            },
            "SLine": {
                "1": "if (pLocal:IsAlive()) and (pLocal:GetHealth() > 0"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "2798": "and (pLocal:GetHealth()) <= mRetryLowHPValue:GetValue()) then"
            },
            "SLine": {
                "1": "and (pLocal:GetHealth()) <= mRetryLowHPValue:GetValue()) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "2799": "client.Command(\"retry\", true)"
            },
            "SLine": {
                "1": "client.Command(\"retry\", true)"
            }
        },
        {
            "Title": "If mextendfreeze:getvalue",
            "subTitle": "",
            "dLine": {
                "2800": "if mExtendFreeze:GetValue() == true then"
            },
            "SLine": {
                "1": "if mExtendFreeze:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2801": "if (pLocal:IsAlive() == false) and (globals.RealTime() > (LastExtenFreeze + 2)) then"
            },
            "SLine": {
                "1": "if (pLocal:IsAlive() == false) and (globals.RealTime() > (LastExtenFreeze + 2)) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "2802": "client.Command(\"extendfreeze\", true)"
            },
            "SLine": {
                "1": "client.Command(\"extendfreeze\", true)"
            }
        },
        {
            "Title": "Lastextenfreeze = globals.realtime",
            "subTitle": "",
            "dLine": {
                "2803": "LastExtenFreeze = globals.RealTime()"
            },
            "SLine": {
                "1": "LastExtenFreeze = globals.RealTime()"
            }
        },
        {
            "Title": "If mrandlag:getvalue",
            "subTitle": "",
            "dLine": {
                "2804": "if mRandLag:GetValue() == true then"
            },
            "SLine": {
                "1": "if mRandLag:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2806": "if (flTimer >= mRandLagValue:GetValue()) then"
            },
            "SLine": {
                "1": "if (flTimer >= mRandLagValue:GetValue()) then"
            }
        },
        {
            "Title": "Local randvalue = math.random",
            "subTitle": "",
            "dLine": {
                "2808": "local randValue = math.random(mRandLagMin:GetValue(), mRandLagMax:GetValue())"
            },
            "SLine": {
                "1": "local randValue = math.random(mRandLagMin:GetValue(), mRandLagMax:GetValue())"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2809": "gui.SetValue(\"fake lag value\", randValue)"
            },
            "SLine": {
                "1": "gui.SetValue(\"fake lag value\", randValue)"
            }
        },
        {
            "Title": "If mrandpingvalue:getvalue",
            "subTitle": "",
            "dLine": {
                "2810": "if mRandPingValue:GetValue() >= 1 then"
            },
            "SLine": {
                "1": "if mRandPingValue:GetValue() >= 1 then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2812": "if (prTimer >= mRandPingValue:GetValue() * 66) then"
            },
            "SLine": {
                "1": "if (prTimer >= mRandPingValue:GetValue() * 66) then"
            }
        },
        {
            "Title": "Local practive = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "2814": "local prActive = gui.GetValue(\"ping reducer\")"
            },
            "SLine": {
                "1": "local prActive = gui.GetValue(\"ping reducer\")"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2816": "gui.SetValue(\"ping reducer\", 1)"
            },
            "SLine": {
                "1": "gui.SetValue(\"ping reducer\", 1)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2818": "gui.SetValue(\"ping reducer\", 0)"
            },
            "SLine": {
                "1": "gui.SetValue(\"ping reducer\", 0)"
            }
        },
        {
            "Title": "If mremovals:isselected",
            "subTitle": "",
            "dLine": {
                "2819": "if mRemovals:IsSelected(\"RTD Effects\") then"
            },
            "SLine": {
                "1": "if mRemovals:IsSelected(\"RTD Effects\") then"
            }
        },
        {
            "Title": "Pcmd:setforwardmove",
            "subTitle": "",
            "dLine": {
                "2821": "pCmd:SetForwardMove(pCmd:GetForwardMove() * (-1))"
            },
            "SLine": {
                "1": "pCmd:SetForwardMove(pCmd:GetForwardMove() * (-1))"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "2822": "pCmd:SetSideMove(pCmd:GetSideMove() * (-1))"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(pCmd:GetSideMove() * (-1))"
            }
        },
        {
            "Title": "Local pweapon         = plocal:getpropentity",
            "subTitle": "",
            "dLine": {
                "2824": "local pWeapon         = pLocal:GetPropEntity( \"m_hActiveWeapon\" )"
            },
            "SLine": {
                "1": "local pWeapon         = pLocal:GetPropEntity( \"m_hActiveWeapon\" )"
            }
        },
        {
            "Title": "Local pweapondefindex = pweapon:getpropint",
            "subTitle": "",
            "dLine": {
                "2825": "local pWeaponDefIndex = pWeapon:GetPropInt( \"m_iItemDefinitionIndex\" )"
            },
            "SLine": {
                "1": "local pWeaponDefIndex = pWeapon:GetPropInt( \"m_iItemDefinitionIndex\" )"
            }
        },
        {
            "Title": "Local pweapondef      = itemschema.getitemdefinitionbyid",
            "subTitle": "",
            "dLine": {
                "2826": "local pWeaponDef      = itemschema.GetItemDefinitionByID( pWeaponDefIndex )"
            },
            "SLine": {
                "1": "local pWeaponDef      = itemschema.GetItemDefinitionByID( pWeaponDefIndex )"
            }
        },
        {
            "Title": "Local pweaponname     = pweapondef:getname",
            "subTitle": "",
            "dLine": {
                "2827": "local pWeaponName     = pWeaponDef:GetName()"
            },
            "SLine": {
                "1": "local pWeaponName     = pWeaponDef:GetName()"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2831": "if (WFlip:GetValue() == true) then"
            },
            "SLine": {
                "1": "if (WFlip:GetValue() == true) then"
            }
        },
        {
            "Title": "Local source      = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2833": "local source      = pLocal:GetAbsOrigin() + pLocal:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" );"
            },
            "SLine": {
                "1": "local source      = pLocal:GetAbsOrigin() + pLocal:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" );"
            }
        },
        {
            "Title": "Local sourceright = source + engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "2835": "local sourceRight = source + engine.GetViewAngles():Right() * 10;"
            },
            "SLine": {
                "1": "local sourceRight = source + engine.GetViewAngles():Right() * 10;"
            }
        },
        {
            "Title": "Local sourceleft  = source + engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "2837": "local sourceLeft  = source + engine.GetViewAngles():Right() * -10;"
            },
            "SLine": {
                "1": "local sourceLeft  = source + engine.GetViewAngles():Right() * -10;"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2839": "if (math.floor(traceLeft.fraction * 1000)) > (math.floor(traceRight.fraction * 1000)) then"
            },
            "SLine": {
                "1": "if (math.floor(traceLeft.fraction * 1000)) > (math.floor(traceRight.fraction * 1000)) then"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "2840": "client.SetConVar(\"cl_flipviewmodels\", 1 )"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_flipviewmodels\", 1 )"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "2841": "elseif (math.floor(traceLeft.fraction * 1000)) < (math.floor(traceRight.fraction * 1000)) then"
            },
            "SLine": {
                "1": "elseif (math.floor(traceLeft.fraction * 1000)) < (math.floor(traceRight.fraction * 1000)) then"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "2842": "client.SetConVar(\"cl_flipviewmodels\", 0 )"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_flipviewmodels\", 0 )"
            }
        },
        {
            "Title": "Local vweapon = vplayer:getpropentity",
            "subTitle": "",
            "dLine": {
                "2843": "local vWeapon = vPlayer:GetPropEntity(\"m_hActiveWeapon\")"
            },
            "SLine": {
                "1": "local vWeapon = vPlayer:GetPropEntity(\"m_hActiveWeapon\")"
            }
        },
        {
            "Title": "Local vweapondefindex = vweapon:getpropint",
            "subTitle": "",
            "dLine": {
                "2845": "local vWeaponDefIndex = vWeapon:GetPropInt(\"m_iItemDefinitionIndex\")"
            },
            "SLine": {
                "1": "local vWeaponDefIndex = vWeapon:GetPropInt(\"m_iItemDefinitionIndex\")"
            }
        },
        {
            "Title": "If     plocal:incond",
            "subTitle": "",
            "dLine": {
                "2847": "if     pLocal:InCond(5)"
            },
            "SLine": {
                "1": "if     pLocal:InCond(5)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "2848": "or pLocal:InCond(8)"
            },
            "SLine": {
                "1": "or pLocal:InCond(8)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "2849": "or pLocal:InCond(52)"
            },
            "SLine": {
                "1": "or pLocal:InCond(52)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "2850": "or pLocal:InCond(57) then"
            },
            "SLine": {
                "1": "or pLocal:InCond(57) then"
            }
        },
        {
            "Title": "If plocal:incond",
            "subTitle": "",
            "dLine": {
                "2854": "if pLocal:InCond(4) or pLocal:InCond(2)"
            },
            "SLine": {
                "1": "if pLocal:InCond(4) or pLocal:InCond(2)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "2855": "or pLocal:InCond(13)"
            },
            "SLine": {
                "1": "or pLocal:InCond(13)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "2856": "or pLocal:InCond(9) then"
            },
            "SLine": {
                "1": "or pLocal:InCond(9) then"
            }
        },
        {
            "Title": "If mlegitspec:getvalue",
            "subTitle": "",
            "dLine": {
                "2858": "if mLegitSpec:GetValue() == true then"
            },
            "SLine": {
                "1": "if mLegitSpec:GetValue() == true then"
            }
        },
        {
            "Title": "Local obsmode   = plocal:getpropint",
            "subTitle": "",
            "dLine": {
                "2859": "local obsMode   = pLocal:GetPropInt(\"m_iObserverMode\")"
            },
            "SLine": {
                "1": "local obsMode   = pLocal:GetPropInt(\"m_iObserverMode\")"
            }
        },
        {
            "Title": "Local obstarget = plocal:getpropentity",
            "subTitle": "",
            "dLine": {
                "2860": "local obsTarget = pLocal:GetPropEntity(\"m_hObserverTarget\")"
            },
            "SLine": {
                "1": "local obsTarget = pLocal:GetPropEntity(\"m_hObserverTarget\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2862": "if (obsMode == ObserverMode.ThirdPerson) and (mLegitSpecFP:GetValue() == true) then"
            },
            "SLine": {
                "1": "if (obsMode == ObserverMode.ThirdPerson) and (mLegitSpecFP:GetValue() == true) then"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "2863": "elseif (obsTarget:GetIndex() == pLocal:GetIndex()) then"
            },
            "SLine": {
                "1": "elseif (obsTarget:GetIndex() == pLocal:GetIndex()) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2864": "if (pUsingProjectileWeapon == true) and (gui.GetValue(\"aim method\") == \"silent\") then"
            },
            "SLine": {
                "1": "if (pUsingProjectileWeapon == true) and (gui.GetValue(\"aim method\") == \"silent\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2865": "SetOptionTemp(\"aim fov\", 10)"
            },
            "SLine": {
                "1": "SetOptionTemp(\"aim fov\", 10)"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2866": "SetOptionTemp(\"aim method\", \"assistance\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"aim method\", \"assistance\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2867": "if (gui.GetValue(\"auto backstab\") ~= \"off\") then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"auto backstab\") ~= \"off\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2868": "SetOptionTemp(\"auto backstab\", \"legit\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"auto backstab\", \"legit\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2869": "if (gui.GetValue(\"auto sapper\") ~= \"off\") then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"auto sapper\") ~= \"off\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2870": "SetOptionTemp(\"auto sapper\", \"legit\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"auto sapper\", \"legit\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2871": "if (gui.GetValue(\"melee aimbot\") ~= \"off\") then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"melee aimbot\") ~= \"off\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2872": "SetOptionTemp(\"melee aimbot\", \"legit\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"melee aimbot\", \"legit\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2873": "if (gui.GetValue(\"auto detonate sticky\") ~= \"off\") then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"auto detonate sticky\") ~= \"off\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2874": "SetOptionTemp(\"auto detonate sticky\", \"legit\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"auto detonate sticky\", \"legit\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2875": "if (gui.GetValue(\"auto airblast\") ~= \"off\") then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"auto airblast\") ~= \"off\") then"
            }
        },
        {
            "Title": "Setoptiontemp",
            "subTitle": "",
            "dLine": {
                "2876": "SetOptionTemp(\"auto airblast\", \"legit\")"
            },
            "SLine": {
                "1": "SetOptionTemp(\"auto airblast\", \"legit\")"
            }
        },
        {
            "Title": "If vplayer:getindex",
            "subTitle": "",
            "dLine": {
                "2877": "if vPlayer:GetIndex() == pLocal:GetIndex() then goto continue end"
            },
            "SLine": {
                "1": "if vPlayer:GetIndex() == pLocal:GetIndex() then goto continue end"
            }
        },
        {
            "Title": "Local distvector = vplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2878": "local distVector = vPlayer:GetAbsOrigin() - pLocal:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local distVector = vPlayer:GetAbsOrigin() - pLocal:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local distance   = distvector:length",
            "subTitle": "",
            "dLine": {
                "2879": "local distance   = distVector:Length()"
            },
            "SLine": {
                "1": "local distance   = distVector:Length()"
            }
        },
        {
            "Title": "If plocal:isalive",
            "subTitle": "",
            "dLine": {
                "2880": "if pLocal:IsAlive() == false then goto continue end"
            },
            "SLine": {
                "1": "if pLocal:IsAlive() == false then goto continue end"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2881": "if (mRetryStunned:GetValue() == true) then"
            },
            "SLine": {
                "1": "if (mRetryStunned:GetValue() == true) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2882": "if (pLocal:InCond(15)) then"
            },
            "SLine": {
                "1": "if (pLocal:InCond(15)) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "2883": "client.command(\"kill\", true)"
            },
            "SLine": {
                "1": "client.command(\"kill\", true)"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "2884": "elseif (pLocal:InCond(7)) and (distance <= 200)"
            },
            "SLine": {
                "1": "elseif (pLocal:InCond(7)) and (distance <= 200)"
            }
        },
        {
            "Title": "Local localplayer = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "2887": "local LocalPlayer = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local LocalPlayer = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Local primaryweapon = plocal:getentityforloadoutslot",
            "subTitle": "",
            "dLine": {
                "2888": "local primaryWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_PRIMARY )"
            },
            "SLine": {
                "1": "local primaryWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_PRIMARY )"
            }
        },
        {
            "Title": "Local secondaryweapon = plocal:getentityforloadoutslot",
            "subTitle": "",
            "dLine": {
                "2889": "local secondaryWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_SECONDARY )"
            },
            "SLine": {
                "1": "local secondaryWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_SECONDARY )"
            }
        },
        {
            "Title": "Local meleeweapon = plocal:getentityforloadoutslot",
            "subTitle": "",
            "dLine": {
                "2890": "local meleeWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_MELEE )"
            },
            "SLine": {
                "1": "local meleeWeapon = pLocal:GetEntityForLoadoutSlot( LOADOUT_POSITION_MELEE )"
            }
        },
        {
            "Title": "If mautoweapon:getvalue",
            "subTitle": "",
            "dLine": {
                "2898": "if mAutoweapon:GetValue() == false then goto continue end"
            },
            "SLine": {
                "1": "if mAutoweapon:GetValue() == false then goto continue end"
            }
        },
        {
            "Title": "If not vplayer:isvalid",
            "subTitle": "",
            "dLine": {
                "2899": "if not vPlayer:IsValid() and (distance >= 777) then goto continue end"
            },
            "SLine": {
                "1": "if not vPlayer:IsValid() and (distance >= 777) then goto continue end"
            }
        },
        {
            "Title": "Local distance = distvector:length",
            "subTitle": "",
            "dLine": {
                "2900": "local distance = distVector:Length()"
            },
            "SLine": {
                "1": "local distance = distVector:Length()"
            }
        },
        {
            "Title": "Local playerclass = localplayer:getpropint",
            "subTitle": "",
            "dLine": {
                "2901": "local PlayerClass = LocalPlayer:GetPropInt(\"m_iClass\")"
            },
            "SLine": {
                "1": "local PlayerClass = LocalPlayer:GetPropInt(\"m_iClass\")"
            }
        },
        {
            "Title": "Local clip = pweapon:getpropint",
            "subTitle": "",
            "dLine": {
                "2902": "local clip = pWeapon:GetPropInt(\"m_iClip1\")"
            },
            "SLine": {
                "1": "local clip = pWeapon:GetPropInt(\"m_iClip1\")"
            }
        },
        {
            "Title": "Local minhealth = vplayer:gethealth",
            "subTitle": "",
            "dLine": {
                "2903": "local minhealth = vPlayer:GetHealth() <= (vPlayer:GetMaxHealth() * 0.01 * mcrossbowhealth:GetValue())"
            },
            "SLine": {
                "1": "local minhealth = vPlayer:GetHealth() <= (vPlayer:GetMaxHealth() * 0.01 * mcrossbowhealth:GetValue())"
            }
        },
        {
            "Title": "Local myteam = ",
            "subTitle": "",
            "dLine": {
                "2904": "local myteam = (vPlayer:GetTeamNumber() == LocalPlayer:GetTeamNumber())"
            },
            "SLine": {
                "1": "local myteam = (vPlayer:GetTeamNumber() == LocalPlayer:GetTeamNumber())"
            }
        },
        {
            "Title": "Local minmeleedist = distance <= ",
            "subTitle": "",
            "dLine": {
                "2905": "local minmeleedist = distance <= (mAutoWeaponDist:GetValue() + swingrange)"
            },
            "SLine": {
                "1": "local minmeleedist = distance <= (mAutoWeaponDist:GetValue() + swingrange)"
            }
        },
        {
            "Title": "Local automelee = mwswitchoptions:isselected",
            "subTitle": "",
            "dLine": {
                "2906": "local automelee = mWswitchoptions:IsSelected(\"Auto Melee\")"
            },
            "SLine": {
                "1": "local automelee = mWswitchoptions:IsSelected(\"Auto Melee\")"
            }
        },
        {
            "Title": "Local selfdefence = mwswitchoptions:isselected",
            "subTitle": "",
            "dLine": {
                "2907": "local selfdefence = mWswitchoptions:IsSelected(\"Self Defence\")"
            },
            "SLine": {
                "1": "local selfdefence = mWswitchoptions:IsSelected(\"Self Defence\")"
            }
        },
        {
            "Title": "If mwswitchoptions:isselected",
            "subTitle": "",
            "dLine": {
                "2909": "if mWswitchoptions:IsSelected(\"Auto Melee\") then"
            },
            "SLine": {
                "1": "if mWswitchoptions:IsSelected(\"Auto Melee\") then"
            }
        },
        {
            "Title": "If vweapon:getcrittokenbucket",
            "subTitle": "",
            "dLine": {
                "2910": "if vWeapon:GetCritTokenBucket() < 10 then"
            },
            "SLine": {
                "1": "if vWeapon:GetCritTokenBucket() < 10 then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2914": "if (mAutoFL:GetValue() == true) and (pWeapon:IoWeaponmAutoweaponWeapon() == true)"
            },
            "SLine": {
                "1": "if (mAutoFL:GetValue() == true) and (pWeapon:IoWeaponmAutoweaponWeapon() == true)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2916": "if (distance <= mAutoFLDist:GetValue()) then"
            },
            "SLine": {
                "1": "if (distance <= mAutoFLDist:GetValue()) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2917": "if (gui.GetValue(\"fake latency\") ~= 1) then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"fake latency\") ~= 1) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2918": "gui.SetValue(\"fake latency\", 1)"
            },
            "SLine": {
                "1": "gui.SetValue(\"fake latency\", 1)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2919": "if (gui.GetValue (\"fake latency value\") ~= mAutoFLNear:GetValue()) then"
            },
            "SLine": {
                "1": "if (gui.GetValue (\"fake latency value\") ~= mAutoFLNear:GetValue()) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2920": "gui.SetValue(\"fake latency value\", mAutoFLNear:GetValue())"
            },
            "SLine": {
                "1": "gui.SetValue(\"fake latency value\", mAutoFLNear:GetValue())"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "2921": "elseif (distance > mAutoFLDist:GetValue()) then"
            },
            "SLine": {
                "1": "elseif (distance > mAutoFLDist:GetValue()) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2922": "if (mAutoFLFar:GetValue() == 0) then"
            },
            "SLine": {
                "1": "if (mAutoFLFar:GetValue() == 0) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2923": "if (gui.GetValue(\"fake latency\") ~= 0) then"
            },
            "SLine": {
                "1": "if (gui.GetValue(\"fake latency\") ~= 0) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2924": "gui.SetValue(\"fake latency\", 0)"
            },
            "SLine": {
                "1": "gui.SetValue(\"fake latency\", 0)"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "2925": "elseif (mAutoFLFar:GetValue() >= 1) then"
            },
            "SLine": {
                "1": "elseif (mAutoFLFar:GetValue() >= 1) then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2926": "if (gui.GetValue (\"fake latency value\") ~= mAutoFLFar:GetValue()) then"
            },
            "SLine": {
                "1": "if (gui.GetValue (\"fake latency value\") ~= mAutoFLFar:GetValue()) then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "2927": "gui.SetValue(\"fake latency value\", mAutoFLFar:GetValue())"
            },
            "SLine": {
                "1": "gui.SetValue(\"fake latency value\", mAutoFLFar:GetValue())"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2928": "if (pWeapon:IsMeleeWeapon() == true)"
            },
            "SLine": {
                "1": "if (pWeapon:IsMeleeWeapon() == true)"
            }
        },
        {
            "Title": "Local mc2source      = plocal:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2933": "local mC2Source      = pLocal:GetAbsOrigin() + pLocal:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" )"
            },
            "SLine": {
                "1": "local mC2Source      = pLocal:GetAbsOrigin() + pLocal:GetPropVector( \"localdata\", \"m_vecViewOffset[0]\" )"
            }
        },
        {
            "Title": "Local mc2destination = mc2source + engine.getviewangles",
            "subTitle": "",
            "dLine": {
                "2934": "local mC2Destination = mC2Source + engine.GetViewAngles():Forward() * 500;"
            },
            "SLine": {
                "1": "local mC2Destination = mC2Source + engine.GetViewAngles():Forward() * 500;"
            }
        },
        {
            "Title": "Local mc2trace       = engine.traceline",
            "subTitle": "",
            "dLine": {
                "2935": "local mC2Trace       = engine.TraceLine(mC2Source, mC2Destination, MASK_SHOT_HULL)"
            },
            "SLine": {
                "1": "local mC2Trace       = engine.TraceLine(mC2Source, mC2Destination, MASK_SHOT_HULL)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "2936": "if (mC2Trace.entity ~= nil) and (mC2Trace.entity:GetClass() == \"CTFPlayer\")"
            },
            "SLine": {
                "1": "if (mC2Trace.entity ~= nil) and (mC2Trace.entity:GetClass() == \"CTFPlayer\")"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "2937": "and (mC2Trace.entity:GetTeamNumber() ~= pLocal:GetTeamNumber())"
            },
            "SLine": {
                "1": "and (mC2Trace.entity:GetTeamNumber() ~= pLocal:GetTeamNumber())"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "2939": "client.Command(\"voicemenu 2 1\", true)"
            },
            "SLine": {
                "1": "client.Command(\"voicemenu 2 1\", true)"
            }
        },
        {
            "Title": "Checktempoptions",
            "subTitle": "",
            "dLine": {
                "2775": "local function CheckTempOptions()",
                "2940": "CheckTempOptions()"
            },
            "SLine": {
                "1": "CheckTempOptions()"
            }
        },
        {
            "Title": "If mrocketlines:getvalue",
            "subTitle": "",
            "dLine": {
                "2941": "if mRocketLines:GetValue() then"
            },
            "SLine": {
                "1": "if mRocketLines:GetValue() then"
            }
        },
        {
            "Title": "Local rockets = entities.findbyclass",
            "subTitle": "",
            "dLine": {
                "2942": "local rockets = entities.FindByClass(\"CTFProjectile_Rocket\")"
            },
            "SLine": {
                "1": "local rockets = entities.FindByClass(\"CTFProjectile_Rocket\")"
            }
        },
        {
            "Title": "For i, rocket in pairs",
            "subTitle": "",
            "dLine": {
                "2943": "for i, rocket in pairs(rockets) do"
            },
            "SLine": {
                "1": "for i, rocket in pairs(rockets) do"
            }
        },
        {
            "Title": "Local rocketpos = rocket:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2944": "local rocketPos = rocket:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local rocketPos = rocket:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local rocketscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2945": "local rocketScreenPos = client.WorldToScreen(rocketPos)"
            },
            "SLine": {
                "1": "local rocketScreenPos = client.WorldToScreen(rocketPos)"
            }
        },
        {
            "Title": "Local rocketdest = vector.add",
            "subTitle": "",
            "dLine": {
                "2946": "local rocketDest = vector.Add(rocketPos, rocket:EstimateAbsVelocity())"
            },
            "SLine": {
                "1": "local rocketDest = vector.Add(rocketPos, rocket:EstimateAbsVelocity())"
            }
        },
        {
            "Title": "Local rockettrace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "2947": "local rocketTrace = engine.TraceLine(rocketPos, rocketDest, MASK_SHOT_HULL)"
            },
            "SLine": {
                "1": "local rocketTrace = engine.TraceLine(rocketPos, rocketDest, MASK_SHOT_HULL)"
            }
        },
        {
            "Title": "Local hitposscreen = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2948": "local hitPosScreen = client.WorldToScreen(rocketTrace.endpos)"
            },
            "SLine": {
                "1": "local hitPosScreen = client.WorldToScreen(rocketTrace.endpos)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "2949": "draw.Color(255, 0, 0, 255)"
            },
            "SLine": {
                "1": "draw.Color(255, 0, 0, 255)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "2950": "draw.Line(rocketScreenPos[1], rocketScreenPos[2], hitPosScreen[1], hitPosScreen[2])"
            },
            "SLine": {
                "1": "draw.Line(rocketScreenPos[1], rocketScreenPos[2], hitPosScreen[1], hitPosScreen[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "2951": "draw.Line(rocketScreenPos[1] + 1, rocketScreenPos[2] + 1 , hitPosScreen[1] + 1, hitPosScreen[2])"
            },
            "SLine": {
                "1": "draw.Line(rocketScreenPos[1] + 1, rocketScreenPos[2] + 1 , hitPosScreen[1] + 1, hitPosScreen[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "2952": "draw.Line(rocketScreenPos[1] - 1, rocketScreenPos[2] - 1 , hitPosScreen[1] - 1, hitPosScreen[2])"
            },
            "SLine": {
                "1": "draw.Line(rocketScreenPos[1] - 1, rocketScreenPos[2] - 1 , hitPosScreen[1] - 1, hitPosScreen[2])"
            }
        },
        {
            "Title": "If mmedicfinder:getvalue",
            "subTitle": "",
            "dLine": {
                "2953": "if mMedicFinder:GetValue() == true then"
            },
            "SLine": {
                "1": "if mMedicFinder:GetValue() == true then"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "2955": "if input.IsButtonDown( KEY_E ) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown( KEY_E ) then"
            }
        },
        {
            "Title": "For i, p in ipairs",
            "subTitle": "",
            "dLine": {
                "2960": "for i, p in ipairs(players) do"
            },
            "SLine": {
                "1": "for i, p in ipairs(players) do"
            }
        },
        {
            "Title": "If p:isalive",
            "subTitle": "",
            "dLine": {
                "2961": "if p:IsAlive() and p:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber() then"
            },
            "SLine": {
                "1": "if p:IsAlive() and p:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber() then"
            }
        },
        {
            "Title": "Local pweapon = p:getpropentity",
            "subTitle": "",
            "dLine": {
                "2962": "local pWeapon = p:GetPropEntity(\"m_hActiveWeapon\")"
            },
            "SLine": {
                "1": "local pWeapon = p:GetPropEntity(\"m_hActiveWeapon\")"
            }
        },
        {
            "Title": "Pweaponis = pweapon:getclass",
            "subTitle": "",
            "dLine": {
                "2964": "pWeaponIs = pWeapon:GetClass()"
            },
            "SLine": {
                "1": "pWeaponIs = pWeapon:GetClass()"
            }
        },
        {
            "Title": "If p:isalive",
            "subTitle": "",
            "dLine": {
                "2965": "if p:IsAlive() and not p:IsDormant() and (p:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber()) then"
            },
            "SLine": {
                "1": "if p:IsAlive() and not p:IsDormant() and (p:GetTeamNumber() == entities.GetLocalPlayer():GetTeamNumber()) then"
            }
        },
        {
            "Title": "Local ppos = p:getabsorigin",
            "subTitle": "",
            "dLine": {
                "2970": "local pPos = p:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local pPos = p:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local pscreenpos2 = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2971": "local pScreenPos2 = client.WorldToScreen(pPos)"
            },
            "SLine": {
                "1": "local pScreenPos2 = client.WorldToScreen(pPos)"
            }
        },
        {
            "Title": "Local pscreenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "2972": "local pScreenPos = client.WorldToScreen(pPos + p:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\"))"
            },
            "SLine": {
                "1": "local pScreenPos = client.WorldToScreen(pPos + p:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\"))"
            }
        },
        {
            "Title": "Distance = vector.distance",
            "subTitle": "",
            "dLine": {
                "2977": "distance = vector.Distance( pPos, entities.GetLocalPlayer():GetAbsOrigin() )"
            },
            "SLine": {
                "1": "distance = vector.Distance( pPos, entities.GetLocalPlayer():GetAbsOrigin() )"
            }
        },
        {
            "Title": "Distancecolor = math.floor",
            "subTitle": "",
            "dLine": {
                "2982": "distanceColor = math.floor( (distanceMaxColor) * (distance - distanceMin) / (distanceMax - distanceMin) )"
            },
            "SLine": {
                "1": "distanceColor = math.floor( (distanceMaxColor) * (distance - distanceMin) / (distanceMax - distanceMin) )"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "2987": "draw.Color(255, 0, 0, distanceColor)"
            },
            "SLine": {
                "1": "draw.Color(255, 0, 0, distanceColor)"
            }
        },
        {
            "Title": "Def1 = math.floor",
            "subTitle": "",
            "dLine": {
                "2993": "def1 = math.floor(def1 * pScreenDistance)"
            },
            "SLine": {
                "1": "def1 = math.floor(def1 * pScreenDistance)"
            }
        },
        {
            "Title": "Def2 = math.floor",
            "subTitle": "",
            "dLine": {
                "2994": "def2 = math.floor(def2 * pScreenDistance)"
            },
            "SLine": {
                "1": "def2 = math.floor(def2 * pScreenDistance)"
            }
        },
        {
            "Title": "Def3 = math.floor",
            "subTitle": "",
            "dLine": {
                "2995": "def3 = math.floor(def3 * pScreenDistance)"
            },
            "SLine": {
                "1": "def3 = math.floor(def3 * pScreenDistance)"
            }
        },
        {
            "Title": "Def4 = math.floor",
            "subTitle": "",
            "dLine": {
                "2996": "def4 = math.floor(def4 * pScreenDistance)"
            },
            "SLine": {
                "1": "def4 = math.floor(def4 * pScreenDistance)"
            }
        },
        {
            "Title": "Def5 = math.floor",
            "subTitle": "",
            "dLine": {
                "2997": "def5 = math.floor(def5 * pScreenDistance)"
            },
            "SLine": {
                "1": "def5 = math.floor(def5 * pScreenDistance)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "2998": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2], pScreenPos2[1] - def1, pScreenPos2[2])"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2], pScreenPos2[1] - def1, pScreenPos2[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "2999": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2], pScreenPos2[1] + def1, pScreenPos2[2] - def2)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2], pScreenPos2[1] + def1, pScreenPos2[2] - def2)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3000": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def2, pScreenPos2[1] + def3, pScreenPos2[2] - def2)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def2, pScreenPos2[1] + def3, pScreenPos2[2] - def2)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3001": "draw.Line(pScreenPos2[1] + def3, pScreenPos2[2] - def2, pScreenPos2[1] + def3, pScreenPos2[2] - def4)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def3, pScreenPos2[2] - def2, pScreenPos2[1] + def3, pScreenPos2[2] - def4)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3002": "draw.Line(pScreenPos2[1] + def3, pScreenPos2[2] - def4, pScreenPos2[1] + def1, pScreenPos2[2] - def4)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def3, pScreenPos2[2] - def4, pScreenPos2[1] + def1, pScreenPos2[2] - def4)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3003": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def4, pScreenPos2[1] + def1, pScreenPos2[2] - def5)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def4, pScreenPos2[1] + def1, pScreenPos2[2] - def5)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3004": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def5, pScreenPos2[1] - def1, pScreenPos2[2] - def5)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1, pScreenPos2[2] - def5, pScreenPos2[1] - def1, pScreenPos2[2] - def5)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3005": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def5, pScreenPos2[1] - def1, pScreenPos2[2] - def4)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def5, pScreenPos2[1] - def1, pScreenPos2[2] - def4)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3006": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def4, pScreenPos2[1] - def3, pScreenPos2[2] - def4)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def4, pScreenPos2[1] - def3, pScreenPos2[2] - def4)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3007": "draw.Line(pScreenPos2[1] - def3, pScreenPos2[2] - def4, pScreenPos2[1] - def3, pScreenPos2[2] - def2)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def3, pScreenPos2[2] - def4, pScreenPos2[1] - def3, pScreenPos2[2] - def2)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3008": "draw.Line(pScreenPos2[1] - def3, pScreenPos2[2] - def2, pScreenPos2[1] - def1, pScreenPos2[2] - def2)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def3, pScreenPos2[2] - def2, pScreenPos2[1] - def1, pScreenPos2[2] - def2)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3009": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def2, pScreenPos2[1] - def1, pScreenPos2[2])"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1, pScreenPos2[2] - def2, pScreenPos2[1] - def1, pScreenPos2[2])"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3010": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3011": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def2 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def2 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3012": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def2 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def2 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3013": "draw.Line(pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def4 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def4 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3014": "draw.Line(pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def4 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def3 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def4 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3015": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def5 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def5 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3016": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def5 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def5 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] + def1 + 1, pScreenPos2[2] - def5 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def5 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3017": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def5 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def4 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def5 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def4 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3018": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def4 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def4 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3019": "draw.Line(pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def2 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def4 + 1, pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def2 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3020": "draw.Line(pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def2 + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def3 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def2 + 1)"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3021": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] + 1)"
            },
            "SLine": {
                "1": "draw.Line(pScreenPos2[1] - def1 + 1, pScreenPos2[2] - def2 + 1, pScreenPos2[1] - def1 + 1, pScreenPos2[2] + 1)"
            }
        },
        {
            "Title": "Local cmd = stringcmd:get",
            "subTitle": "",
            "dLine": {
                "3024": "local cmd = stringCmd:Get()"
            },
            "SLine": {
                "1": "local cmd = stringCmd:Get()"
            }
        },
        {
            "Title": "Cmd = cmd:gsub",
            "subTitle": "",
            "dLine": {
                "3026": "cmd = cmd:gsub(\"\\\\n\", \"\\n\")"
            },
            "SLine": {
                "1": "cmd = cmd:gsub(\"\\\\n\", \"\\n\")"
            }
        },
        {
            "Title": "If cmd:find",
            "subTitle": "",
            "dLine": {
                "3027": "if cmd:find(\"say_team\", 1, true) == 1 then"
            },
            "SLine": {
                "1": "if cmd:find(\"say_team\", 1, true) == 1 then"
            }
        },
        {
            "Title": "Cmd = cmd:sub",
            "subTitle": "",
            "dLine": {
                "3028": "cmd = cmd:sub(11, -2)"
            },
            "SLine": {
                "1": "cmd = cmd:sub(11, -2)"
            }
        },
        {
            "Title": "Client.chatteamsay",
            "subTitle": "",
            "dLine": {
                "3029": "client.ChatTeamSay(cmd)"
            },
            "SLine": {
                "1": "client.ChatTeamSay(cmd)"
            }
        },
        {
            "Title": "Elseif cmd:find",
            "subTitle": "",
            "dLine": {
                "3031": "elseif cmd:find(\"say\", 1, true) == 1 then"
            },
            "SLine": {
                "1": "elseif cmd:find(\"say\", 1, true) == 1 then"
            }
        },
        {
            "Title": "Cmd = cmd:sub",
            "subTitle": "",
            "dLine": {
                "3032": "cmd = cmd:sub(6, -2)"
            },
            "SLine": {
                "1": "cmd = cmd:sub(6, -2)"
            }
        },
        {
            "Title": "Client.chatsay",
            "subTitle": "",
            "dLine": {
                "3033": "client.ChatSay(cmd)"
            },
            "SLine": {
                "1": "client.ChatSay(cmd)"
            }
        },
        {
            "Title": "Local function onusermessage",
            "subTitle": "",
            "dLine": {
                "3035": "local function OnUserMessage(userMsg)"
            },
            "SLine": {
                "1": "local function OnUserMessage(userMsg)"
            }
        },
        {
            "Title": "If usermsg:getid",
            "subTitle": "",
            "dLine": {
                "3037": "if userMsg:GetID() == Shake then blockMessage = true end"
            },
            "SLine": {
                "1": "if userMsg:GetID() == Shake then blockMessage = true end"
            }
        },
        {
            "Title": "If usermsg:getid",
            "subTitle": "",
            "dLine": {
                "3038": "if userMsg:GetID() == Fade  then blockMessage = true end"
            },
            "SLine": {
                "1": "if userMsg:GetID() == Fade  then blockMessage = true end"
            }
        },
        {
            "Title": "If usermsg:getid",
            "subTitle": "",
            "dLine": {
                "3039": "if userMsg:GetID() == TextMsg then"
            },
            "SLine": {
                "1": "if userMsg:GetID() == TextMsg then"
            }
        },
        {
            "Title": "Usermsg:reset",
            "subTitle": "",
            "dLine": {
                "3040": "userMsg:Reset()"
            },
            "SLine": {
                "1": "userMsg:Reset()"
            }
        },
        {
            "Title": "Local msgdest = usermsg:readbyte",
            "subTitle": "",
            "dLine": {
                "3041": "local msgDest = userMsg:ReadByte()"
            },
            "SLine": {
                "1": "local msgDest = userMsg:ReadByte()"
            }
        },
        {
            "Title": "Local msgname = usermsg:readstring",
            "subTitle": "",
            "dLine": {
                "3042": "local msgName = userMsg:ReadString(256)"
            },
            "SLine": {
                "1": "local msgName = userMsg:ReadString(256)"
            }
        },
        {
            "Title": "If string.find",
            "subTitle": "",
            "dLine": {
                "3043": "if string.find(msgName, \"[RTD]\") then"
            },
            "SLine": {
                "1": "if string.find(msgName, \"[RTD]\") then"
            }
        },
        {
            "Title": "If string.find",
            "subTitle": "",
            "dLine": {
                "3044": "if string.find(msgName, \"Your perk has worn off\") or string.find(msgName, \"You have died during your roll\") then"
            },
            "SLine": {
                "1": "if string.find(msgName, \"Your perk has worn off\") or string.find(msgName, \"You have died during your roll\") then"
            }
        },
        {
            "Title": "Elseif string.find",
            "subTitle": "",
            "dLine": {
                "3046": "elseif string.find(msgName, \"Cursed\")    then CurrentRTD = \"Cursed\""
            },
            "SLine": {
                "1": "elseif string.find(msgName, \"Cursed\")    then CurrentRTD = \"Cursed\""
            }
        },
        {
            "Title": "Elseif string.find",
            "subTitle": "",
            "dLine": {
                "3047": "elseif string.find(msgName, \"Drugged\")   then CurrentRTD = \"Drugged\""
            },
            "SLine": {
                "1": "elseif string.find(msgName, \"Drugged\")   then CurrentRTD = \"Drugged\""
            }
        },
        {
            "Title": "Elseif string.find",
            "subTitle": "",
            "dLine": {
                "3048": "elseif string.find(msgName, \"Bad Sauce\") then CurrentRTD = \"Bad Sauce\""
            },
            "SLine": {
                "1": "elseif string.find(msgName, \"Bad Sauce\") then CurrentRTD = \"Bad Sauce\""
            }
        },
        {
            "Title": "If mremovals:isselected",
            "subTitle": "",
            "dLine": {
                "3049": "if mRemovals:IsSelected(\"HUD Texts\") then"
            },
            "SLine": {
                "1": "if mRemovals:IsSelected(\"HUD Texts\") then"
            }
        },
        {
            "Title": "If usermsg:getid",
            "subTitle": "",
            "dLine": {
                "3050": "if userMsg:GetID() == HudText or userMsg:GetID() == HudMsg then blockMessage = true end"
            },
            "SLine": {
                "1": "if userMsg:GetID() == HudText or userMsg:GetID() == HudMsg then blockMessage = true end"
            }
        },
        {
            "Title": "Local msglength = usermsg:getdatabits",
            "subTitle": "",
            "dLine": {
                "3052": "local msgLength = userMsg:GetDataBits()"
            },
            "SLine": {
                "1": "local msgLength = userMsg:GetDataBits()"
            }
        },
        {
            "Title": "Usermsg:writebit",
            "subTitle": "",
            "dLine": {
                "3054": "userMsg:WriteBit(0)"
            },
            "SLine": {
                "1": "userMsg:WriteBit(0)"
            }
        },
        {
            "Title": "Or msandwitchex:getvalue",
            "subTitle": "",
            "dLine": {
                "3055": "or msandwitchex:GetValue() == false"
            },
            "SLine": {
                "1": "or msandwitchex:GetValue() == false"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "3056": "callbacks.Unregister(\"SendStringCmd\", \"MCT_StringCmd\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"SendStringCmd\", \"MCT_StringCmd\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "3057": "callbacks.Unregister(\"DispatchUserMessage\", \"MCT_UserMessage\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"DispatchUserMessage\", \"MCT_UserMessage\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3058": "callbacks.Register(\"SendStringCmd\", \"MCT_StringCmd\", OnStringCmd)"
            },
            "SLine": {
                "1": "callbacks.Register(\"SendStringCmd\", \"MCT_StringCmd\", OnStringCmd)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3059": "callbacks.Register(\"DispatchUserMessage\", \"MCT_UserMessage\", OnUserMessage)"
            },
            "SLine": {
                "1": "callbacks.Register(\"DispatchUserMessage\", \"MCT_UserMessage\", OnUserMessage)"
            }
        },
        {
            "Title": "Local function criticalhealth",
            "subTitle": "",
            "dLine": {
                "3061": "local function CriticalHealth()"
            },
            "SLine": {
                "1": "local function CriticalHealth()"
            }
        },
        {
            "Title": "If gamecoordinator.isconnectedtomatchserver",
            "subTitle": "",
            "dLine": {
                "3062": "if gamecoordinator.IsConnectedToMatchServer() then"
            },
            "SLine": {
                "1": "if gamecoordinator.IsConnectedToMatchServer() then"
            }
        },
        {
            "Title": "For i, p in ipairs",
            "subTitle": "",
            "dLine": {
                "3063": "for i, p in ipairs( players ) do"
            },
            "SLine": {
                "1": "for i, p in ipairs( players ) do"
            }
        },
        {
            "Title": "Ratio = p:gethealth",
            "subTitle": "",
            "dLine": {
                "3064": "Ratio = p:GetHealth() / p:GetMaxHealth()"
            },
            "SLine": {
                "1": "Ratio = p:GetHealth() / p:GetMaxHealth()"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3065": "if (p:IsAlive()) and (Ratio <= procent) then"
            },
            "SLine": {
                "1": "if (p:IsAlive()) and (Ratio <= procent) then"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "3066": "playerlist.SetPriority( p, 1 )"
            },
            "SLine": {
                "1": "playerlist.SetPriority( p, 1 )"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "3067": "playerlist.SetPriority( p, 0 )"
            },
            "SLine": {
                "1": "playerlist.SetPriority( p, 0 )"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3068": "callbacks.Register( \"Draw\", \"CriticalHealth\", CriticalHealth)"
            },
            "SLine": {
                "1": "callbacks.Register( \"Draw\", \"CriticalHealth\", CriticalHealth)"
            }
        },
        {
            "Title": "Local menulib = require",
            "subTitle": "",
            "dLine": {
                "3069": "local MenuLib = require(\"Menu\")"
            },
            "SLine": {
                "1": "local MenuLib = require(\"Menu\")"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3072": "local menu = MenuLib.Create(\"loader\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"loader\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local textbox = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3073": "local textBox = menu:AddComponent(MenuLib.Textbox(\"name...\", text))"
            },
            "SLine": {
                "1": "local textBox = menu:AddComponent(MenuLib.Textbox(\"name...\", text))"
            }
        },
        {
            "Title": "Textbox.onvaluechanged = function",
            "subTitle": "",
            "dLine": {
                "3074": "textBox.OnValueChanged = function()"
            },
            "SLine": {
                "1": "textBox.OnValueChanged = function()"
            }
        },
        {
            "Title": "Local lua_name = textbox:getvalue",
            "subTitle": "",
            "dLine": {
                "3075": "local lua_name = textBox:GetValue()"
            },
            "SLine": {
                "1": "local lua_name = textBox:GetValue()"
            }
        },
        {
            "Title": "Load",
            "subTitle": "",
            "dLine": {
                "1596": "self:Load()",
                "1602": "function Config:Load()",
                "1614": "if self.AutoLoad then self:Load() end",
                "3076": "Load()",
                "3078": "function Load()"
            },
            "SLine": {
                "1": "Load()"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3077": "print(\"Loaded \", textbox1)"
            },
            "SLine": {
                "1": "print(\"Loaded \", textbox1)"
            }
        },
        {
            "Title": "Function load",
            "subTitle": "",
            "dLine": {
                "3078": "function Load()"
            },
            "SLine": {
                "1": "function Load()"
            }
        },
        {
            "Title": "Loadscript",
            "subTitle": "",
            "dLine": {
                "3079": "LoadScript(textbox)"
            },
            "SLine": {
                "1": "LoadScript(textbox)"
            }
        },
        {
            "Title": "Font = draw.createfont",
            "subTitle": "",
            "dLine": {
                "3084": "Font = draw.CreateFont(\"Verdana\", 14, 510),"
            },
            "SLine": {
                "1": "Font = draw.CreateFont(\"Verdana\", 14, 510),"
            }
        },
        {
            "Title": "Local gradientstatus, gradientmask = pcall",
            "subTitle": "",
            "dLine": {
                "3102": "local GradientStatus, GradientMask = pcall(draw.CreateTexture, \"Textures/GradientMask.png\")"
            },
            "SLine": {
                "1": "local GradientStatus, GradientMask = pcall(draw.CreateTexture, \"Textures/GradientMask.png\")"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3104": "print(\"[MenuLib] GradientMask.png not found! Color picker will not work.\")"
            },
            "SLine": {
                "1": "print(\"[MenuLib] GradientMask.png not found! Color picker will not work.\")"
            }
        },
        {
            "Title": "For i = 0, 9 do inputmap[i + 1] = tostring",
            "subTitle": "",
            "dLine": {
                "3106": "for i = 0, 9 do InputMap[i + 1] = tostring(i) end"
            },
            "SLine": {
                "1": "for i = 0, 9 do InputMap[i + 1] = tostring(i) end"
            }
        },
        {
            "Title": "For i = 65, 90 do inputmap[i - 54] = string.char",
            "subTitle": "",
            "dLine": {
                "3107": "for i = 65, 90 do InputMap[i - 54] = string.char(i) end"
            },
            "SLine": {
                "1": "for i = 65, 90 do InputMap[i - 54] = string.char(i) end"
            }
        },
        {
            "Title": "Local function getcurrentkey",
            "subTitle": "",
            "dLine": {
                "3108": "local function GetCurrentKey()"
            },
            "SLine": {
                "1": "local function GetCurrentKey()"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "2168": "if input.IsButtonDown(i) then return i end",
                "2171": "if input.IsButtonDown(i) then table.insert(keys, i) end",
                "3110": "if input.IsButtonDown(i) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(i) then"
            }
        },
        {
            "Title": "Local function getkeyname",
            "subTitle": "",
            "dLine": {
                "3112": "local function GetKeyName(key, specialKeys)"
            },
            "SLine": {
                "1": "local function GetKeyName(key, specialKeys)"
            }
        },
        {
            "Title": "Local function mouseinbounds",
            "subTitle": "",
            "dLine": {
                "3134": "local function MouseInBounds(pX, pY, pX2, pY2)"
            },
            "SLine": {
                "1": "local function MouseInBounds(pX, pY, pX2, pY2)"
            }
        },
        {
            "Title": "Local mx = input.getmousepos",
            "subTitle": "",
            "dLine": {
                "3135": "local mX = input.GetMousePos()[1]"
            },
            "SLine": {
                "1": "local mX = input.GetMousePos()[1]"
            }
        },
        {
            "Title": "Local my = input.getmousepos",
            "subTitle": "",
            "dLine": {
                "3136": "local mY = input.GetMousePos()[2]"
            },
            "SLine": {
                "1": "local mY = input.GetMousePos()[2]"
            }
        },
        {
            "Title": "Local function updatemousestate",
            "subTitle": "",
            "dLine": {
                "3139": "local function UpdateMouseState()"
            },
            "SLine": {
                "1": "local function UpdateMouseState()"
            }
        },
        {
            "Title": "Local mousestate = input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3140": "local mouseState = input.IsButtonDown(MOUSE_LEFT)"
            },
            "SLine": {
                "1": "local mouseState = input.IsButtonDown(MOUSE_LEFT)"
            }
        },
        {
            "Title": "Local function clamp",
            "subTitle": "",
            "dLine": {
                "3143": "local function Clamp(n, low, high) return math.min(math.max(n, low), high) end"
            },
            "SLine": {
                "1": "local function Clamp(n, low, high) return math.min(math.max(n, low), high) end"
            }
        },
        {
            "Title": "Local function setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3144": "local function SetColorStyle(color)"
            },
            "SLine": {
                "1": "local function SetColorStyle(color)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3146": "draw.Color(color[1], color[2], color[3], alpha)"
            },
            "SLine": {
                "1": "draw.Color(color[1], color[2], color[3], alpha)"
            }
        },
        {
            "Title": "Local function hsvtorgb",
            "subTitle": "",
            "dLine": {
                "3147": "local function HSVtoRGB(h, s, v)"
            },
            "SLine": {
                "1": "local function HSVtoRGB(h, s, v)"
            }
        },
        {
            "Title": "Function rgbtohsv",
            "subTitle": "",
            "dLine": {
                "3154": "function RGBtoHSV(r, g, b)"
            },
            "SLine": {
                "1": "function RGBtoHSV(r, g, b)"
            }
        },
        {
            "Title": "Return math.floor",
            "subTitle": "",
            "dLine": {
                "3159": "return math.floor(h), math.floor(s), math.floor(v)"
            },
            "SLine": {
                "1": "return math.floor(h), math.floor(s), math.floor(v)"
            }
        },
        {
            "Title": "Function component.new",
            "subTitle": "",
            "dLine": {
                "3165": "function Component.New()"
            },
            "SLine": {
                "1": "function Component.New()"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3166": "local self = setmetatable({}, Component)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Component)"
            }
        },
        {
            "Title": "Function component:setvisible",
            "subTitle": "",
            "dLine": {
                "3169": "function Component:SetVisible(state)"
            },
            "SLine": {
                "1": "function Component:SetVisible(state)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3174": "setmetatable(Label, Component)"
            },
            "SLine": {
                "1": "setmetatable(Label, Component)"
            }
        },
        {
            "Title": "Function label.new",
            "subTitle": "",
            "dLine": {
                "3175": "function Label.New(label, flags)"
            },
            "SLine": {
                "1": "function Label.New(label, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3177": "local self = setmetatable({}, Label)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Label)"
            }
        },
        {
            "Title": "Function label:render",
            "subTitle": "",
            "dLine": {
                "3182": "function Label:Render(menu)"
            },
            "SLine": {
                "1": "function Label:Render(menu)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3183": "SetColorStyle(menu.Style.Text)"
            },
            "SLine": {
                "1": "SetColorStyle(menu.Style.Text)"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "3184": "draw.SetFont(MenuManager.Font)"
            },
            "SLine": {
                "1": "draw.SetFont(MenuManager.Font)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3185": "draw.Text(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, self.Text)"
            },
            "SLine": {
                "1": "draw.Text(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, self.Text)"
            }
        },
        {
            "Title": "Local textwidth, textheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3186": "local textWidth, textHeight = draw.GetTextSize(self.Text)"
            },
            "SLine": {
                "1": "local textWidth, textHeight = draw.GetTextSize(self.Text)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3192": "setmetatable(Checkbox, Component)"
            },
            "SLine": {
                "1": "setmetatable(Checkbox, Component)"
            }
        },
        {
            "Title": "Function checkbox.new",
            "subTitle": "",
            "dLine": {
                "3193": "function Checkbox.New(label, value, flags)"
            },
            "SLine": {
                "1": "function Checkbox.New(label, value, flags)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "3194": "assert(type(value) == \"boolean\", \"Checkbox value must be a boolean\")"
            },
            "SLine": {
                "1": "assert(type(value) == \"boolean\", \"Checkbox value must be a boolean\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3195": "local self = setmetatable({}, Checkbox)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Checkbox)"
            }
        },
        {
            "Title": "Function checkbox:getvalue",
            "subTitle": "",
            "dLine": {
                "3198": "function Checkbox:GetValue()"
            },
            "SLine": {
                "1": "function Checkbox:GetValue()"
            }
        },
        {
            "Title": "Function checkbox:ischecked",
            "subTitle": "",
            "dLine": {
                "3200": "function Checkbox:IsChecked()"
            },
            "SLine": {
                "1": "function Checkbox:IsChecked()"
            }
        },
        {
            "Title": "Function checkbox:render",
            "subTitle": "",
            "dLine": {
                "3202": "function Checkbox:Render(menu)"
            },
            "SLine": {
                "1": "function Checkbox:Render(menu)"
            }
        },
        {
            "Title": "Local lblwidth, lblheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3203": "local lblWidth, lblHeight = draw.GetTextSize(self.Label)"
            },
            "SLine": {
                "1": "local lblWidth, lblHeight = draw.GetTextSize(self.Label)"
            }
        },
        {
            "Title": "Local chksize = math.floor",
            "subTitle": "",
            "dLine": {
                "3204": "local chkSize = math.floor(lblHeight * 1.4)"
            },
            "SLine": {
                "1": "local chkSize = math.floor(lblHeight * 1.4)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3205": "if (PopupOpen == false or menu:IsPopup()) and MouseReleased and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + chkSize + menu.Style.Space + lblWidth, menu.Y + menu.Cursor.Y + chkSize) then"
            },
            "SLine": {
                "1": "if (PopupOpen == false or menu:IsPopup()) and MouseReleased and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + chkSize + menu.Style.Space + lblWidth, menu.Y + menu.Cursor.Y + chkSize) then"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3208": "draw.Color(70, 190, 50, 255)"
            },
            "SLine": {
                "1": "draw.Color(70, 190, 50, 255)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3209": "draw.Color(180, 60, 60, 250)"
            },
            "SLine": {
                "1": "draw.Color(180, 60, 60, 250)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3210": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + chkSize, menu.Y + menu.Cursor.Y + chkSize)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + chkSize, menu.Y + menu.Cursor.Y + chkSize)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3211": "draw.Text(menu.X + menu.Cursor.X + chkSize + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (chkSize / 2) - (lblHeight / 2)), self.Label)"
            },
            "SLine": {
                "1": "draw.Text(menu.X + menu.Cursor.X + chkSize + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (chkSize / 2) - (lblHeight / 2)), self.Label)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3217": "setmetatable(Button, Component)"
            },
            "SLine": {
                "1": "setmetatable(Button, Component)"
            }
        },
        {
            "Title": "Function button.new",
            "subTitle": "",
            "dLine": {
                "3218": "function Button.New(label, callback, flags)"
            },
            "SLine": {
                "1": "function Button.New(label, callback, flags)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "3219": "assert(type(callback) == \"function\", \"Button callback must be a function\")"
            },
            "SLine": {
                "1": "assert(type(callback) == \"function\", \"Button callback must be a function\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3220": "local self = setmetatable({}, Button)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Button)"
            }
        },
        {
            "Title": "Function button:render",
            "subTitle": "",
            "dLine": {
                "3222": "function Button:Render(menu)"
            },
            "SLine": {
                "1": "function Button:Render(menu)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3228": "SetColorStyle(menu.Style.Item)"
            },
            "SLine": {
                "1": "SetColorStyle(menu.Style.Item)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3229": "SetColorStyle(menu.Style.ItemActive)"
            },
            "SLine": {
                "1": "SetColorStyle(menu.Style.ItemActive)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3230": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + btnWidth, menu.Y + menu.Cursor.Y + btnHeight) then"
            },
            "SLine": {
                "1": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + btnWidth, menu.Y + menu.Cursor.Y + btnHeight) then"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3231": "if input.IsButtonDown(MOUSE_LEFT) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(MOUSE_LEFT) then"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3232": "SetColorStyle(menu.Style.ItemHover)"
            },
            "SLine": {
                "1": "SetColorStyle(menu.Style.ItemHover)"
            }
        },
        {
            "Title": "Self:callback",
            "subTitle": "",
            "dLine": {
                "3234": "self:Callback()"
            },
            "SLine": {
                "1": "self:Callback()"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3235": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + btnWidth, menu.Y + menu.Cursor.Y + btnHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + btnWidth, menu.Y + menu.Cursor.Y + btnHeight)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3236": "draw.Text(math.floor(menu.X + menu.Cursor.X + (btnWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (btnHeight / 2) - (lblHeight / 2)), self.Label)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(menu.X + menu.Cursor.X + (btnWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (btnHeight / 2) - (lblHeight / 2)), self.Label)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3244": "setmetatable(Slider, Component)"
            },
            "SLine": {
                "1": "setmetatable(Slider, Component)"
            }
        },
        {
            "Title": "Function slider.new",
            "subTitle": "",
            "dLine": {
                "3245": "function Slider.New(label, min, max, value, flags)"
            },
            "SLine": {
                "1": "function Slider.New(label, min, max, value, flags)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "3246": "assert(max > min, \"Slider max must be greater than min\")"
            },
            "SLine": {
                "1": "assert(max > min, \"Slider max must be greater than min\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3247": "local self = setmetatable({}, Slider)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Slider)"
            }
        },
        {
            "Title": "Function slider:getvalue",
            "subTitle": "",
            "dLine": {
                "3250": "function Slider:GetValue()"
            },
            "SLine": {
                "1": "function Slider:GetValue()"
            }
        },
        {
            "Title": "Function slider:render",
            "subTitle": "",
            "dLine": {
                "3251": "function Slider:Render(menu)"
            },
            "SLine": {
                "1": "function Slider:Render(menu)"
            }
        },
        {
            "Title": "Local lblwidth, lblheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3252": "local lblWidth, lblHeight = draw.GetTextSize(self.Label .. \": \" .. self.Value)"
            },
            "SLine": {
                "1": "local lblWidth, lblHeight = draw.GetTextSize(self.Label .. \": \" .. self.Value)"
            }
        },
        {
            "Title": "Local dragx = math.floor",
            "subTitle": "",
            "dLine": {
                "3255": "local dragX = math.floor(((self.Value - self.Min) / math.abs(self.Max - self.Min)) * sliderWidth)"
            },
            "SLine": {
                "1": "local dragX = math.floor(((self.Value - self.Min) / math.abs(self.Max - self.Min)) * sliderWidth)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3256": "if (PopupOpen == false or menu:IsPopup()) and DragID == 0 and MouseInBounds(menu.X + menu.Cursor.X - 4, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + sliderWidth + 8, menu.Y + menu.Cursor.Y + sliderHeight) then"
            },
            "SLine": {
                "1": "if (PopupOpen == false or menu:IsPopup()) and DragID == 0 and MouseInBounds(menu.X + menu.Cursor.X - 4, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + sliderWidth + 8, menu.Y + menu.Cursor.Y + sliderHeight) then"
            }
        },
        {
            "Title": "Dragx = clamp",
            "subTitle": "",
            "dLine": {
                "3257": "dragX = Clamp(input.GetMousePos()[1] - (menu.X + menu.Cursor.X), 0, sliderWidth)"
            },
            "SLine": {
                "1": "dragX = Clamp(input.GetMousePos()[1] - (menu.X + menu.Cursor.X), 0, sliderWidth)"
            }
        },
        {
            "Title": "Self.value = ",
            "subTitle": "",
            "dLine": {
                "3258": "self.Value = (math.floor((dragX / sliderWidth) * math.abs(self.Max - self.Min))) + self.Min"
            },
            "SLine": {
                "1": "self.Value = (math.floor((dragX / sliderWidth) * math.abs(self.Max - self.Min))) + self.Min"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3259": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + sliderWidth, menu.Y + menu.Cursor.Y + sliderHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + sliderWidth, menu.Y + menu.Cursor.Y + sliderHeight)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3260": "SetColorStyle(menu.Style.Highlight)"
            },
            "SLine": {
                "1": "SetColorStyle(menu.Style.Highlight)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3261": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + dragX, menu.Y + menu.Cursor.Y + sliderHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + dragX, menu.Y + menu.Cursor.Y + sliderHeight)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3262": "draw.Text(math.floor(menu.X + menu.Cursor.X + (sliderWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (sliderHeight / 2) - (lblHeight / 2)), self.Label .. \": \" .. self.Value)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(menu.X + menu.Cursor.X + (sliderWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (sliderHeight / 2) - (lblHeight / 2)), self.Label .. \": \" .. self.Value)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3269": "setmetatable(Textbox, Component)"
            },
            "SLine": {
                "1": "setmetatable(Textbox, Component)"
            }
        },
        {
            "Title": "Function textbox.new",
            "subTitle": "",
            "dLine": {
                "3270": "function Textbox.New(label, value, flags)"
            },
            "SLine": {
                "1": "function Textbox.New(label, value, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3271": "local self = setmetatable({}, Textbox)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Textbox)"
            }
        },
        {
            "Title": "Function textbox:getvalue",
            "subTitle": "",
            "dLine": {
                "3272": "function Textbox:GetValue()"
            },
            "SLine": {
                "1": "function Textbox:GetValue()"
            }
        },
        {
            "Title": "Function textbox:setvalue",
            "subTitle": "",
            "dLine": {
                "3273": "function Textbox:SetValue(text)"
            },
            "SLine": {
                "1": "function Textbox:SetValue(text)"
            }
        },
        {
            "Title": "Function textbox:render",
            "subTitle": "",
            "dLine": {
                "3275": "function Textbox:Render(menu)"
            },
            "SLine": {
                "1": "function Textbox:Render(menu)"
            }
        },
        {
            "Title": "Local lblwidth, lblheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3276": "local lblWidth, lblHeight = draw.GetTextSize(self.Value)"
            },
            "SLine": {
                "1": "local lblWidth, lblHeight = draw.GetTextSize(self.Value)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3279": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + boxWidth, menu.Y + menu.Cursor.Y + boxHeight) then"
            },
            "SLine": {
                "1": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + boxWidth, menu.Y + menu.Cursor.Y + boxHeight) then"
            }
        },
        {
            "Title": "Local key = getkeyname",
            "subTitle": "",
            "dLine": {
                "3280": "local key = GetKeyName(GetCurrentKey(), false)"
            },
            "SLine": {
                "1": "local key = GetKeyName(GetCurrentKey(), false)"
            }
        },
        {
            "Title": "Self.value = self.value:sub",
            "subTitle": "",
            "dLine": {
                "3285": "self.Value = self.Value:sub(1, -2)"
            },
            "SLine": {
                "1": "self.Value = self.Value:sub(1, -2)"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3287": "if input.IsButtonDown(KEY_LSHIFT) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(KEY_LSHIFT) then"
            }
        },
        {
            "Title": "Self.value = self.value .. string.upper",
            "subTitle": "",
            "dLine": {
                "3288": "self.Value = self.Value .. string.upper(self._LastKey)"
            },
            "SLine": {
                "1": "self.Value = self.Value .. string.upper(self._LastKey)"
            }
        },
        {
            "Title": "Self.value = self.value .. string.lower",
            "subTitle": "",
            "dLine": {
                "3289": "self.Value = self.Value .. string.lower(self._LastKey)"
            },
            "SLine": {
                "1": "self.Value = self.Value .. string.lower(self._LastKey)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3292": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + boxWidth, menu.Y + menu.Cursor.Y + boxHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + boxWidth, menu.Y + menu.Cursor.Y + boxHeight)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3294": "draw.Color(180, 180, 180, 255)"
            },
            "SLine": {
                "1": "draw.Color(180, 180, 180, 255)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3295": "draw.Text(menu.X + menu.Cursor.X + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (boxHeight / 2) - (lblHeight / 2)), self.Label)"
            },
            "SLine": {
                "1": "draw.Text(menu.X + menu.Cursor.X + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (boxHeight / 2) - (lblHeight / 2)), self.Label)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3296": "draw.Text(menu.X + menu.Cursor.X + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (boxHeight / 2) - (lblHeight / 2)), self.Value)"
            },
            "SLine": {
                "1": "draw.Text(menu.X + menu.Cursor.X + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (boxHeight / 2) - (lblHeight / 2)), self.Value)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3304": "setmetatable(Keybind, Component)"
            },
            "SLine": {
                "1": "setmetatable(Keybind, Component)"
            }
        },
        {
            "Title": "Function keybind.new",
            "subTitle": "",
            "dLine": {
                "3305": "function Keybind.New(label, key, flags)"
            },
            "SLine": {
                "1": "function Keybind.New(label, key, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3306": "local self = setmetatable({}, Keybind)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Keybind)"
            }
        },
        {
            "Title": "Self.keyname = getkeyname",
            "subTitle": "",
            "dLine": {
                "3307": "self.KeyName = GetKeyName(key, true)"
            },
            "SLine": {
                "1": "self.KeyName = GetKeyName(key, true)"
            }
        },
        {
            "Title": "Function keybind:getvalue",
            "subTitle": "",
            "dLine": {
                "3309": "function Keybind:GetValue()"
            },
            "SLine": {
                "1": "function Keybind:GetValue()"
            }
        },
        {
            "Title": "Function keybind:render",
            "subTitle": "",
            "dLine": {
                "3311": "function Keybind:Render(menu)"
            },
            "SLine": {
                "1": "function Keybind:Render(menu)"
            }
        },
        {
            "Title": "Local currentkey = getcurrentkey",
            "subTitle": "",
            "dLine": {
                "3315": "local currentKey = GetCurrentKey()"
            },
            "SLine": {
                "1": "local currentKey = GetCurrentKey()"
            }
        },
        {
            "Title": "Self.keyname = getkeyname",
            "subTitle": "",
            "dLine": {
                "3321": "self.KeyName = GetKeyName(currentKey, true) or currentKey"
            },
            "SLine": {
                "1": "self.KeyName = GetKeyName(currentKey, true) or currentKey"
            }
        },
        {
            "Title": "Local lblwidth, lblheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3322": "local lblWidth, lblHeight = draw.GetTextSize(btnLabel)"
            },
            "SLine": {
                "1": "local lblWidth, lblHeight = draw.GetTextSize(btnLabel)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3324": "draw.Text(math.floor(menu.X + menu.Cursor.X + (btnWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (btnHeight / 2) - (lblHeight / 2)), btnLabel)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(menu.X + menu.Cursor.X + (btnWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (btnHeight / 2) - (lblHeight / 2)), btnLabel)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3331": "setmetatable(PickerBox, Component)"
            },
            "SLine": {
                "1": "setmetatable(PickerBox, Component)"
            }
        },
        {
            "Title": "Function pickerbox.new",
            "subTitle": "",
            "dLine": {
                "3332": "function PickerBox.New(color, flags)"
            },
            "SLine": {
                "1": "function PickerBox.New(color, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3333": "local self = setmetatable({}, PickerBox)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, PickerBox)"
            }
        },
        {
            "Title": "Local hue, saturation, value = rgbtohsv",
            "subTitle": "",
            "dLine": {
                "3334": "local hue, saturation, value = RGBtoHSV(color[1], color[2], color[3])"
            },
            "SLine": {
                "1": "local hue, saturation, value = RGBtoHSV(color[1], color[2], color[3])"
            }
        },
        {
            "Title": "Function pickerbox:render",
            "subTitle": "",
            "dLine": {
                "3337": "function PickerBox:Render(menu)"
            },
            "SLine": {
                "1": "function PickerBox:Render(menu)"
            }
        },
        {
            "Title": "Local cr, cg, cb = hsvtorgb",
            "subTitle": "",
            "dLine": {
                "3341": "local cR, cG, cB = HSVtoRGB(self.Hue, self.Saturation, self.Value)"
            },
            "SLine": {
                "1": "local cR, cG, cB = HSVtoRGB(self.Hue, self.Saturation, self.Value)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3342": "draw.Color(cR, cG, cB, self.Alpha)"
            },
            "SLine": {
                "1": "draw.Color(cR, cG, cB, self.Alpha)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3343": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + previewHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + previewHeight)"
            }
        },
        {
            "Title": "Local r, g, b = hsvtorgb",
            "subTitle": "",
            "dLine": {
                "3345": "local r, g, b = HSVtoRGB(self.Hue, 1, 1)"
            },
            "SLine": {
                "1": "local r, g, b = HSVtoRGB(self.Hue, 1, 1)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3346": "draw.Color(r, g, b, 255)"
            },
            "SLine": {
                "1": "draw.Color(r, g, b, 255)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3347": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + pickerHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + pickerHeight)"
            }
        },
        {
            "Title": "Draw.texturedrect",
            "subTitle": "",
            "dLine": {
                "3349": "draw.TexturedRect(GradientMask, menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + pickerHeight)"
            },
            "SLine": {
                "1": "draw.TexturedRect(GradientMask, menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + pickerWidth, menu.Y + menu.Cursor.Y + pickerHeight)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3350": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X - 4, menu.Y + menu.Cursor.Y - 4, menu.X + menu.Cursor.X + pickerWidth + 8, menu.Y + menu.Cursor.Y + pickerHeight + 8) then"
            },
            "SLine": {
                "1": "if (PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X - 4, menu.Y + menu.Cursor.Y - 4, menu.X + menu.Cursor.X + pickerWidth + 8, menu.Y + menu.Cursor.Y + pickerHeight + 8) then"
            }
        },
        {
            "Title": "Self.saturation = clamp",
            "subTitle": "",
            "dLine": {
                "3351": "self.Saturation = Clamp((input.GetMousePos()[1] - menu.X - menu.Cursor.X) / pickerWidth, 0, 1)"
            },
            "SLine": {
                "1": "self.Saturation = Clamp((input.GetMousePos()[1] - menu.X - menu.Cursor.X) / pickerWidth, 0, 1)"
            }
        },
        {
            "Title": "Self.value = 1 - clamp",
            "subTitle": "",
            "dLine": {
                "3352": "self.Value = 1 - Clamp((input.GetMousePos()[2] - menu.Y - menu.Cursor.Y) / pickerHeight, 0, 1)"
            },
            "SLine": {
                "1": "self.Value = 1 - Clamp((input.GetMousePos()[2] - menu.Y - menu.Cursor.Y) / pickerHeight, 0, 1)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3355": "draw.FilledRect(x - 4, y - 4, x + 8, y + 8)"
            },
            "SLine": {
                "1": "draw.FilledRect(x - 4, y - 4, x + 8, y + 8)"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "3356": "draw.OutlinedRect(x - 4, y - 4, x + 8, y + 8)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(x - 4, y - 4, x + 8, y + 8)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3366": "setmetatable(Colorpicker, Component)"
            },
            "SLine": {
                "1": "setmetatable(Colorpicker, Component)"
            }
        },
        {
            "Title": "Function colorpicker.new",
            "subTitle": "",
            "dLine": {
                "3367": "function Colorpicker.New(label, color, flags)"
            },
            "SLine": {
                "1": "function Colorpicker.New(label, color, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3368": "local self = setmetatable({}, Colorpicker)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Colorpicker)"
            }
        },
        {
            "Title": "Self._child = menumanager.createpopup",
            "subTitle": "",
            "dLine": {
                "3370": "self._Child = MenuManager.CreatePopup(self)"
            },
            "SLine": {
                "1": "self._Child = MenuManager.CreatePopup(self)"
            }
        },
        {
            "Title": "Self._child:setvisible",
            "subTitle": "",
            "dLine": {
                "3371": "self._Child:SetVisible(false)"
            },
            "SLine": {
                "1": "self._Child:SetVisible(false)"
            }
        },
        {
            "Title": "Self._pickerbox = self._child:addcomponent",
            "subTitle": "",
            "dLine": {
                "3373": "self._PickerBox = self._Child:AddComponent(PickerBox.New(color))"
            },
            "SLine": {
                "1": "self._PickerBox = self._Child:AddComponent(PickerBox.New(color))"
            }
        },
        {
            "Title": "Self._hueslider = self._child:addcomponent",
            "subTitle": "",
            "dLine": {
                "3374": "self._HueSlider = self._Child:AddComponent(MenuManager.Slider(\"Hue\", 0, 100, math.floor(hue * 100)))"
            },
            "SLine": {
                "1": "self._HueSlider = self._Child:AddComponent(MenuManager.Slider(\"Hue\", 0, 100, math.floor(hue * 100)))"
            }
        },
        {
            "Title": "Self._alphaslider = self._child:addcomponent",
            "subTitle": "",
            "dLine": {
                "3375": "self._AlphaSlider = self._Child:AddComponent(MenuManager.Slider(\"Alpha\", 0, 255, 255))"
            },
            "SLine": {
                "1": "self._AlphaSlider = self._Child:AddComponent(MenuManager.Slider(\"Alpha\", 0, 255, 255))"
            }
        },
        {
            "Title": "Function colorpicker:isopen",
            "subTitle": "",
            "dLine": {
                "3376": "function Colorpicker:IsOpen()"
            },
            "SLine": {
                "1": "function Colorpicker:IsOpen()"
            }
        },
        {
            "Title": "Function colorpicker:setopen",
            "subTitle": "",
            "dLine": {
                "3378": "function Colorpicker:SetOpen(state)"
            },
            "SLine": {
                "1": "function Colorpicker:SetOpen(state)"
            }
        },
        {
            "Title": "If state == false and self:isopen",
            "subTitle": "",
            "dLine": {
                "3379": "if state == false and self:IsOpen() == false then return end"
            },
            "SLine": {
                "1": "if state == false and self:IsOpen() == false then return end"
            }
        },
        {
            "Title": "Self._child:setvisible",
            "subTitle": "",
            "dLine": {
                "3380": "self._Child:SetVisible(state)"
            },
            "SLine": {
                "1": "self._Child:SetVisible(state)"
            }
        },
        {
            "Title": "Function colorpicker:getcolor",
            "subTitle": "",
            "dLine": {
                "3382": "function Colorpicker:GetColor()"
            },
            "SLine": {
                "1": "function Colorpicker:GetColor()"
            }
        },
        {
            "Title": "Function colorpicker:render",
            "subTitle": "",
            "dLine": {
                "3385": "function Colorpicker:Render(menu)"
            },
            "SLine": {
                "1": "function Colorpicker:Render(menu)"
            }
        },
        {
            "Title": "Local cpsize = math.floor",
            "subTitle": "",
            "dLine": {
                "3387": "local cpSize = math.floor(lblHeight * 1.4)"
            },
            "SLine": {
                "1": "local cpSize = math.floor(lblHeight * 1.4)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3388": "if (self:IsOpen() or PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cpSize + menu.Style.Space + lblWidth, menu.Y + menu.Cursor.Y + cpSize) then"
            },
            "SLine": {
                "1": "if (self:IsOpen() or PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cpSize + menu.Style.Space + lblWidth, menu.Y + menu.Cursor.Y + cpSize) then"
            }
        },
        {
            "Title": "Self:setopen",
            "subTitle": "",
            "dLine": {
                "3389": "self:SetOpen(not self:IsOpen())"
            },
            "SLine": {
                "1": "self:SetOpen(not self:IsOpen())"
            }
        },
        {
            "Title": "If self:isopen",
            "subTitle": "",
            "dLine": {
                "3390": "if self:IsOpen() then"
            },
            "SLine": {
                "1": "if self:IsOpen() then"
            }
        },
        {
            "Title": "Self._pickerbox.hue = self._hueslider:getvalue",
            "subTitle": "",
            "dLine": {
                "3391": "self._PickerBox.Hue = self._HueSlider:GetValue() * 0.01"
            },
            "SLine": {
                "1": "self._PickerBox.Hue = self._HueSlider:GetValue() * 0.01"
            }
        },
        {
            "Title": "Self._pickerbox.alpha = self._alphaslider:getvalue",
            "subTitle": "",
            "dLine": {
                "3392": "self._PickerBox.Alpha = self._AlphaSlider:GetValue()"
            },
            "SLine": {
                "1": "self._PickerBox.Alpha = self._AlphaSlider:GetValue()"
            }
        },
        {
            "Title": "Self.color[4] = self._alphaslider:getvalue",
            "subTitle": "",
            "dLine": {
                "3393": "self.Color[4] = self._AlphaSlider:GetValue()"
            },
            "SLine": {
                "1": "self.Color[4] = self._AlphaSlider:GetValue()"
            }
        },
        {
            "Title": "Local r, g, b = hsvtorgb",
            "subTitle": "",
            "dLine": {
                "3396": "local r, g, b = HSVtoRGB(self._PickerBox.Hue, self._PickerBox.Saturation, self._PickerBox.Value)"
            },
            "SLine": {
                "1": "local r, g, b = HSVtoRGB(self._PickerBox.Hue, self._PickerBox.Saturation, self._PickerBox.Value)"
            }
        },
        {
            "Title": "Self.color = { r, g, b, self._alphaslider:getvalue",
            "subTitle": "",
            "dLine": {
                "3397": "self.Color = { r, g, b, self._AlphaSlider:GetValue() }"
            },
            "SLine": {
                "1": "self.Color = { r, g, b, self._AlphaSlider:GetValue() }"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3398": "draw.Color(self.Color[1], self.Color[2], self.Color[3], self.Color[4])"
            },
            "SLine": {
                "1": "draw.Color(self.Color[1], self.Color[2], self.Color[3], self.Color[4])"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3399": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cpSize, menu.Y + menu.Cursor.Y + cpSize)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cpSize, menu.Y + menu.Cursor.Y + cpSize)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3400": "draw.Text(menu.X + menu.Cursor.X + cpSize + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (cpSize / 2) - (lblHeight / 2)), self.Label)"
            },
            "SLine": {
                "1": "draw.Text(menu.X + menu.Cursor.X + cpSize + menu.Style.Space, math.floor(menu.Y + menu.Cursor.Y + (cpSize / 2) - (lblHeight / 2)), self.Label)"
            }
        },
        {
            "Title": "Function colorpicker:remove",
            "subTitle": "",
            "dLine": {
                "3402": "function Colorpicker:Remove()"
            },
            "SLine": {
                "1": "function Colorpicker:Remove()"
            }
        },
        {
            "Title": "Self:setopen",
            "subTitle": "",
            "dLine": {
                "3403": "self:SetOpen(false)"
            },
            "SLine": {
                "1": "self:SetOpen(false)"
            }
        },
        {
            "Title": "Menumanager.removemenu",
            "subTitle": "",
            "dLine": {
                "3404": "MenuManager.RemoveMenu(self._Child)"
            },
            "SLine": {
                "1": "MenuManager.RemoveMenu(self._Child)"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3413": "setmetatable(Combobox, Component)"
            },
            "SLine": {
                "1": "setmetatable(Combobox, Component)"
            }
        },
        {
            "Title": "Function combobox.new",
            "subTitle": "",
            "dLine": {
                "3414": "function Combobox.New(label, options, flags)"
            },
            "SLine": {
                "1": "function Combobox.New(label, options, flags)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "3415": "assert(type(options) == \"table\", \"Combobox options must be a table\")"
            },
            "SLine": {
                "1": "assert(type(options) == \"table\", \"Combobox options must be a table\")"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3416": "local self = setmetatable({}, Combobox)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, Combobox)"
            }
        },
        {
            "Title": "For i, vlabel in ipairs",
            "subTitle": "",
            "dLine": {
                "3420": "for i, vLabel in ipairs(self.Options) do"
            },
            "SLine": {
                "1": "for i, vLabel in ipairs(self.Options) do"
            }
        },
        {
            "Title": "Self._child:addcomponent",
            "subTitle": "",
            "dLine": {
                "3422": "self._Child:AddComponent(Button.New(vLabel, function()"
            },
            "SLine": {
                "1": "self._Child:AddComponent(Button.New(vLabel, function()"
            }
        },
        {
            "Title": "Self:updatebuttons",
            "subTitle": "",
            "dLine": {
                "3425": "self:UpdateButtons()"
            },
            "SLine": {
                "1": "self:UpdateButtons()"
            }
        },
        {
            "Title": "Function combobox:updatebuttons",
            "subTitle": "",
            "dLine": {
                "3427": "function Combobox:UpdateButtons()"
            },
            "SLine": {
                "1": "function Combobox:UpdateButtons()"
            }
        },
        {
            "Title": "For i, vcomponent in ipairs",
            "subTitle": "",
            "dLine": {
                "3428": "for i, vComponent in ipairs(self._Child.Components) do"
            },
            "SLine": {
                "1": "for i, vComponent in ipairs(self._Child.Components) do"
            }
        },
        {
            "Title": "Function combobox:getselectedindex",
            "subTitle": "",
            "dLine": {
                "3432": "function Combobox:GetSelectedIndex()"
            },
            "SLine": {
                "1": "function Combobox:GetSelectedIndex()"
            }
        },
        {
            "Title": "Function combobox:isselected",
            "subTitle": "",
            "dLine": {
                "3434": "function Combobox:IsSelected(option)"
            },
            "SLine": {
                "1": "function Combobox:IsSelected(option)"
            }
        },
        {
            "Title": "Function combobox:select",
            "subTitle": "",
            "dLine": {
                "3436": "function Combobox:Select(index)"
            },
            "SLine": {
                "1": "function Combobox:Select(index)"
            }
        },
        {
            "Title": "Function combobox:isopen",
            "subTitle": "",
            "dLine": {
                "3439": "function Combobox:IsOpen()"
            },
            "SLine": {
                "1": "function Combobox:IsOpen()"
            }
        },
        {
            "Title": "Function combobox:setopen",
            "subTitle": "",
            "dLine": {
                "3440": "function Combobox:SetOpen(state)"
            },
            "SLine": {
                "1": "function Combobox:SetOpen(state)"
            }
        },
        {
            "Title": "Function combobox:render",
            "subTitle": "",
            "dLine": {
                "3441": "function Combobox:Render(menu)"
            },
            "SLine": {
                "1": "function Combobox:Render(menu)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3445": "if (self:IsOpen() or PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cmbWidth, menu.Y + menu.Cursor.Y + cmbHeight) then"
            },
            "SLine": {
                "1": "if (self:IsOpen() or PopupOpen == false or menu:IsPopup()) and MouseInBounds(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cmbWidth, menu.Y + menu.Cursor.Y + cmbHeight) then"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3448": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cmbWidth, menu.Y + menu.Cursor.Y + cmbHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(menu.X + menu.Cursor.X, menu.Y + menu.Cursor.Y, menu.X + menu.Cursor.X + cmbWidth, menu.Y + menu.Cursor.Y + cmbHeight)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3449": "draw.Text(math.floor(menu.X + menu.Cursor.X + (cmbWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (cmbHeight / 2) - (lblHeight / 2)), self.Label)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(menu.X + menu.Cursor.X + (cmbWidth / 2) - (lblWidth / 2)), math.floor(menu.Y + menu.Cursor.Y + (cmbHeight / 2) - (lblHeight / 2)), self.Label)"
            }
        },
        {
            "Title": "Function combobox:remove",
            "subTitle": "",
            "dLine": {
                "3451": "function Combobox:Remove()"
            },
            "SLine": {
                "1": "function Combobox:Remove()"
            }
        },
        {
            "Title": "Setmetatable",
            "subTitle": "",
            "dLine": {
                "3455": "setmetatable(MultiCombobox, Component)"
            },
            "SLine": {
                "1": "setmetatable(MultiCombobox, Component)"
            }
        },
        {
            "Title": "Function multicombobox.new",
            "subTitle": "",
            "dLine": {
                "3456": "function MultiCombobox.New(label, options, flags)"
            },
            "SLine": {
                "1": "function MultiCombobox.New(label, options, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3457": "local self = setmetatable({}, MultiCombobox)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, MultiCombobox)"
            }
        },
        {
            "Title": "For koption, vactive in pairs",
            "subTitle": "",
            "dLine": {
                "3458": "for kOption, vActive in pairs(self.Options) do"
            },
            "SLine": {
                "1": "for kOption, vActive in pairs(self.Options) do"
            }
        },
        {
            "Title": "Self._child:addcomponent",
            "subTitle": "",
            "dLine": {
                "3460": "self._Child:AddComponent(Button.New(kOption, function()"
            },
            "SLine": {
                "1": "self._Child:AddComponent(Button.New(kOption, function()"
            }
        },
        {
            "Title": "Function multicombobox:updatebuttons",
            "subTitle": "",
            "dLine": {
                "3462": "function MultiCombobox:UpdateButtons()"
            },
            "SLine": {
                "1": "function MultiCombobox:UpdateButtons()"
            }
        },
        {
            "Title": "Function multicombobox:select",
            "subTitle": "",
            "dLine": {
                "3464": "function MultiCombobox:Select(option)"
            },
            "SLine": {
                "1": "function MultiCombobox:Select(option)"
            }
        },
        {
            "Title": "Function multicombobox:isselected",
            "subTitle": "",
            "dLine": {
                "3466": "function MultiCombobox:IsSelected(option)"
            },
            "SLine": {
                "1": "function MultiCombobox:IsSelected(option)"
            }
        },
        {
            "Title": "Function multicombobox:isopen",
            "subTitle": "",
            "dLine": {
                "3468": "function MultiCombobox:IsOpen()"
            },
            "SLine": {
                "1": "function MultiCombobox:IsOpen()"
            }
        },
        {
            "Title": "Function multicombobox:setopen",
            "subTitle": "",
            "dLine": {
                "3469": "function MultiCombobox:SetOpen(state)"
            },
            "SLine": {
                "1": "function MultiCombobox:SetOpen(state)"
            }
        },
        {
            "Title": "Function multicombobox:render",
            "subTitle": "",
            "dLine": {
                "3470": "function MultiCombobox:Render(menu)"
            },
            "SLine": {
                "1": "function MultiCombobox:Render(menu)"
            }
        },
        {
            "Title": "Function multicombobox:remove",
            "subTitle": "",
            "dLine": {
                "3471": "function MultiCombobox:Remove()"
            },
            "SLine": {
                "1": "function MultiCombobox:Remove()"
            }
        },
        {
            "Title": "Function menu.new",
            "subTitle": "",
            "dLine": {
                "3483": "function Menu.New(title, flags)"
            },
            "SLine": {
                "1": "function Menu.New(title, flags)"
            }
        },
        {
            "Title": "Local self = setmetatable",
            "subTitle": "",
            "dLine": {
                "3484": "local self = setmetatable({}, MetaMenu)"
            },
            "SLine": {
                "1": "local self = setmetatable({}, MetaMenu)"
            }
        },
        {
            "Title": "Function menu:setvisible",
            "subTitle": "",
            "dLine": {
                "3497": "function Menu:SetVisible(visible)"
            },
            "SLine": {
                "1": "function Menu:SetVisible(visible)"
            }
        },
        {
            "Title": "Function menu:toggle",
            "subTitle": "",
            "dLine": {
                "3499": "function Menu:Toggle()"
            },
            "SLine": {
                "1": "function Menu:Toggle()"
            }
        },
        {
            "Title": "Function menu:ispopup",
            "subTitle": "",
            "dLine": {
                "3501": "function Menu:IsPopup()"
            },
            "SLine": {
                "1": "function Menu:IsPopup()"
            }
        },
        {
            "Title": "Function menu:settitle",
            "subTitle": "",
            "dLine": {
                "3503": "function Menu:SetTitle(title)"
            },
            "SLine": {
                "1": "function Menu:SetTitle(title)"
            }
        },
        {
            "Title": "Function menu:setposition",
            "subTitle": "",
            "dLine": {
                "3504": "function Menu:SetPosition(x, y)"
            },
            "SLine": {
                "1": "function Menu:SetPosition(x, y)"
            }
        },
        {
            "Title": "Function menu:setsize",
            "subTitle": "",
            "dLine": {
                "3507": "function Menu:SetSize(width, height)"
            },
            "SLine": {
                "1": "function Menu:SetSize(width, height)"
            }
        },
        {
            "Title": "Function menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3510": "function Menu:AddComponent(component)"
            },
            "SLine": {
                "1": "function Menu:AddComponent(component)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "3511": "table.insert(self.Components, component)"
            },
            "SLine": {
                "1": "table.insert(self.Components, component)"
            }
        },
        {
            "Title": "Function menu:removecomponent",
            "subTitle": "",
            "dLine": {
                "3513": "function Menu:RemoveComponent(component)"
            },
            "SLine": {
                "1": "function Menu:RemoveComponent(component)"
            }
        },
        {
            "Title": "For k, vcomp in pairs",
            "subTitle": "",
            "dLine": {
                "3514": "for k, vComp in pairs(self.Components) do"
            },
            "SLine": {
                "1": "for k, vComp in pairs(self.Components) do"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "3516": "table.remove(self.Components, k)"
            },
            "SLine": {
                "1": "table.remove(self.Components, k)"
            }
        },
        {
            "Title": "Function menu:remove",
            "subTitle": "",
            "dLine": {
                "3517": "function Menu:Remove()"
            },
            "SLine": {
                "1": "function Menu:Remove()"
            }
        },
        {
            "Title": "For kindex, vcomponent in pairs",
            "subTitle": "",
            "dLine": {
                "3518": "for kIndex, vComponent in pairs(self.Components) do"
            },
            "SLine": {
                "1": "for kIndex, vComponent in pairs(self.Components) do"
            }
        },
        {
            "Title": "If vcomponent.remove and type",
            "subTitle": "",
            "dLine": {
                "3519": "if vComponent.Remove and type(vComponent.Remove) == \"function\" then"
            },
            "SLine": {
                "1": "if vComponent.Remove and type(vComponent.Remove) == \"function\" then"
            }
        },
        {
            "Title": "Vcomponent:remove",
            "subTitle": "",
            "dLine": {
                "3520": "vComponent:Remove()"
            },
            "SLine": {
                "1": "vComponent:Remove()"
            }
        },
        {
            "Title": "Function menumanager.create",
            "subTitle": "",
            "dLine": {
                "3522": "function MenuManager.Create(title, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Create(title, flags)"
            }
        },
        {
            "Title": "Local menu = menu.new",
            "subTitle": "",
            "dLine": {
                "3524": "local menu = Menu.New(title, flags)"
            },
            "SLine": {
                "1": "local menu = Menu.New(title, flags)"
            }
        },
        {
            "Title": "Menumanager.addmenu",
            "subTitle": "",
            "dLine": {
                "3525": "MenuManager.AddMenu(menu)",
                "3536": "function MenuManager.AddMenu(menu)"
            },
            "SLine": {
                "1": "MenuManager.AddMenu(menu)"
            }
        },
        {
            "Title": "Function menumanager.createpopup",
            "subTitle": "",
            "dLine": {
                "3527": "function MenuManager.CreatePopup(owner, flags)"
            },
            "SLine": {
                "1": "function MenuManager.CreatePopup(owner, flags)"
            }
        },
        {
            "Title": "Local popupmenu = menu.new",
            "subTitle": "",
            "dLine": {
                "3529": "local popupMenu = Menu.New(\"Popup\", flags)"
            },
            "SLine": {
                "1": "local popupMenu = Menu.New(\"Popup\", flags)"
            }
        },
        {
            "Title": "Popupmenu:setvisible",
            "subTitle": "",
            "dLine": {
                "3530": "popupMenu:SetVisible(false)"
            },
            "SLine": {
                "1": "popupMenu:SetVisible(false)"
            }
        },
        {
            "Title": "Menumanager.addmenu",
            "subTitle": "",
            "dLine": {
                "3534": "MenuManager.AddMenu(popupMenu)"
            },
            "SLine": {
                "1": "MenuManager.AddMenu(popupMenu)"
            }
        },
        {
            "Title": "Function menumanager.addmenu",
            "subTitle": "",
            "dLine": {
                "3536": "function MenuManager.AddMenu(menu)"
            },
            "SLine": {
                "1": "function MenuManager.AddMenu(menu)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "3537": "table.insert(MenuManager.Menus, menu)"
            },
            "SLine": {
                "1": "table.insert(MenuManager.Menus, menu)"
            }
        },
        {
            "Title": "Function menumanager.removemenu",
            "subTitle": "",
            "dLine": {
                "3538": "function MenuManager.RemoveMenu(menu)"
            },
            "SLine": {
                "1": "function MenuManager.RemoveMenu(menu)"
            }
        },
        {
            "Title": "For kindex, vmenu in pairs",
            "subTitle": "",
            "dLine": {
                "3539": "for kIndex, vMenu in pairs(MenuManager.Menus) do"
            },
            "SLine": {
                "1": "for kIndex, vMenu in pairs(MenuManager.Menus) do"
            }
        },
        {
            "Title": "Vmenu:remove",
            "subTitle": "",
            "dLine": {
                "3541": "vMenu:Remove()"
            },
            "SLine": {
                "1": "vMenu:Remove()"
            }
        },
        {
            "Title": "Function menumanager.label",
            "subTitle": "",
            "dLine": {
                "3544": "function MenuManager.Label(text, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Label(text, flags)"
            }
        },
        {
            "Title": "Return label.new",
            "subTitle": "",
            "dLine": {
                "3545": "return Label.New(text, flags)"
            },
            "SLine": {
                "1": "return Label.New(text, flags)"
            }
        },
        {
            "Title": "Function menumanager.checkbox",
            "subTitle": "",
            "dLine": {
                "3546": "function MenuManager.Checkbox(label, value, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Checkbox(label, value, flags)"
            }
        },
        {
            "Title": "Return checkbox.new",
            "subTitle": "",
            "dLine": {
                "3547": "return Checkbox.New(label, value, flags)"
            },
            "SLine": {
                "1": "return Checkbox.New(label, value, flags)"
            }
        },
        {
            "Title": "Function menumanager.button",
            "subTitle": "",
            "dLine": {
                "3548": "function MenuManager.Button(label, callback, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Button(label, callback, flags)"
            }
        },
        {
            "Title": "Return button.new",
            "subTitle": "",
            "dLine": {
                "3549": "return Button.New(label, callback, flags)"
            },
            "SLine": {
                "1": "return Button.New(label, callback, flags)"
            }
        },
        {
            "Title": "Function menumanager.slider",
            "subTitle": "",
            "dLine": {
                "3550": "function MenuManager.Slider(label, min, max, value, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Slider(label, min, max, value, flags)"
            }
        },
        {
            "Title": "Return slider.new",
            "subTitle": "",
            "dLine": {
                "3552": "return Slider.New(label, min, max, value, flags)"
            },
            "SLine": {
                "1": "return Slider.New(label, min, max, value, flags)"
            }
        },
        {
            "Title": "Function menumanager.textbox",
            "subTitle": "",
            "dLine": {
                "3553": "function MenuManager.Textbox(label, value, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Textbox(label, value, flags)"
            }
        },
        {
            "Title": "Return textbox.new",
            "subTitle": "",
            "dLine": {
                "3555": "return Textbox.New(label, value, flags)"
            },
            "SLine": {
                "1": "return Textbox.New(label, value, flags)"
            }
        },
        {
            "Title": "Function menumanager.keybind",
            "subTitle": "",
            "dLine": {
                "3556": "function MenuManager.Keybind(label, key, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Keybind(label, key, flags)"
            }
        },
        {
            "Title": "Return keybind.new",
            "subTitle": "",
            "dLine": {
                "3558": "return Keybind.New(label, key, flags)"
            },
            "SLine": {
                "1": "return Keybind.New(label, key, flags)"
            }
        },
        {
            "Title": "Function menumanager.colorpicker",
            "subTitle": "",
            "dLine": {
                "3559": "function MenuManager.Colorpicker(label, color, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Colorpicker(label, color, flags)"
            }
        },
        {
            "Title": "Return colorpicker.new",
            "subTitle": "",
            "dLine": {
                "3562": "return Colorpicker.New(label, color, flags)"
            },
            "SLine": {
                "1": "return Colorpicker.New(label, color, flags)"
            }
        },
        {
            "Title": "Function menumanager.combo",
            "subTitle": "",
            "dLine": {
                "3563": "function MenuManager.Combo(label, options, flags)"
            },
            "SLine": {
                "1": "function MenuManager.Combo(label, options, flags)"
            }
        },
        {
            "Title": "Return combobox.new",
            "subTitle": "",
            "dLine": {
                "3564": "return Combobox.New(label, options, flags)"
            },
            "SLine": {
                "1": "return Combobox.New(label, options, flags)"
            }
        },
        {
            "Title": "Function menumanager.multicombo",
            "subTitle": "",
            "dLine": {
                "3565": "function MenuManager.MultiCombo(label, options, flags)"
            },
            "SLine": {
                "1": "function MenuManager.MultiCombo(label, options, flags)"
            }
        },
        {
            "Title": "Return multicombobox.new",
            "subTitle": "",
            "dLine": {
                "3566": "return MultiCombobox.New(label, options, flags)"
            },
            "SLine": {
                "1": "return MultiCombobox.New(label, options, flags)"
            }
        },
        {
            "Title": "Function menumanager.seperator",
            "subTitle": "",
            "dLine": {
                "3567": "function MenuManager.Seperator(flags)"
            },
            "SLine": {
                "1": "function MenuManager.Seperator(flags)"
            }
        },
        {
            "Title": "Return label.new",
            "subTitle": "",
            "dLine": {
                "3568": "return Label.New(\"\", flags)"
            },
            "SLine": {
                "1": "return Label.New(\"\", flags)"
            }
        },
        {
            "Title": "Function menumanager.draw",
            "subTitle": "",
            "dLine": {
                "3569": "function MenuManager.Draw()"
            },
            "SLine": {
                "1": "function MenuManager.Draw()"
            }
        },
        {
            "Title": "If gui.getvalue",
            "subTitle": "",
            "dLine": {
                "3570": "if gui.GetValue(\"clean screenshots\") == 1 and engine.IsTakingScreenshot() then"
            },
            "SLine": {
                "1": "if gui.GetValue(\"clean screenshots\") == 1 and engine.IsTakingScreenshot() then"
            }
        },
        {
            "Title": "Menumanager.drawdebug",
            "subTitle": "",
            "dLine": {
                "3572": "MenuManager.DrawDebug()",
                "3606": "function MenuManager.DrawDebug()"
            },
            "SLine": {
                "1": "MenuManager.DrawDebug()"
            }
        },
        {
            "Title": "Updatemousestate",
            "subTitle": "",
            "dLine": {
                "3139": "local function UpdateMouseState()",
                "3573": "UpdateMouseState()"
            },
            "SLine": {
                "1": "UpdateMouseState()"
            }
        },
        {
            "Title": "For k, vmenu in pairs",
            "subTitle": "",
            "dLine": {
                "3574": "for k, vMenu in pairs(MenuManager.Menus) do"
            },
            "SLine": {
                "1": "for k, vMenu in pairs(MenuManager.Menus) do"
            }
        },
        {
            "Title": "If engine.getserverip",
            "subTitle": "",
            "dLine": {
                "3576": "if engine.GetServerIP() ~= \"\" and engine.IsGameUIVisible() == false and (vMenu.Flags & MenuFlags.ShowAlways == 0) then"
            },
            "SLine": {
                "1": "if engine.GetServerIP() ~= \"\" and engine.IsGameUIVisible() == false and (vMenu.Flags & MenuFlags.ShowAlways == 0) then"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3583": "if input.IsButtonDown(MOUSE_LEFT) and MouseInBounds(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + tbHeight) then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(MOUSE_LEFT) and MouseInBounds(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + tbHeight) then"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3587": "SetColorStyle(vMenu.Style.WindowBg)"
            },
            "SLine": {
                "1": "SetColorStyle(vMenu.Style.WindowBg)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3588": "draw.FilledRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + vMenu.Height)"
            },
            "SLine": {
                "1": "draw.FilledRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + vMenu.Height)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3590": "SetColorStyle(vMenu.Style.TitleBg)"
            },
            "SLine": {
                "1": "SetColorStyle(vMenu.Style.TitleBg)"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "3591": "draw.OutlinedRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + vMenu.Height)"
            },
            "SLine": {
                "1": "draw.OutlinedRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + vMenu.Height)"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "3593": "draw.FilledRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + tbHeight)"
            },
            "SLine": {
                "1": "draw.FilledRect(vMenu.X, vMenu.Y, vMenu.X + vMenu.Width, vMenu.Y + tbHeight)"
            }
        },
        {
            "Title": "Setcolorstyle",
            "subTitle": "",
            "dLine": {
                "3594": "SetColorStyle(vMenu.Style.Text)"
            },
            "SLine": {
                "1": "SetColorStyle(vMenu.Style.Text)"
            }
        },
        {
            "Title": "Local titlewidth, titleheight = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3595": "local titleWidth, titleHeight = draw.GetTextSize(vMenu.Title)"
            },
            "SLine": {
                "1": "local titleWidth, titleHeight = draw.GetTextSize(vMenu.Title)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3596": "draw.Text(math.floor(vMenu.X + (vMenu.Width / 2) - (titleWidth / 2)), vMenu.Y + math.floor((tbHeight / 2) - (titleHeight / 2)), vMenu.Title)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(vMenu.X + (vMenu.Width / 2) - (titleWidth / 2)), vMenu.Y + math.floor((tbHeight / 2) - (titleHeight / 2)), vMenu.Title)"
            }
        },
        {
            "Title": "For l, vcomponent in pairs",
            "subTitle": "",
            "dLine": {
                "3600": "for l, vComponent in pairs(vMenu.Components) do"
            },
            "SLine": {
                "1": "for l, vComponent in pairs(vMenu.Components) do"
            }
        },
        {
            "Title": "Vcomponent:render",
            "subTitle": "",
            "dLine": {
                "3602": "vComponent:Render(vMenu)"
            },
            "SLine": {
                "1": "vComponent:Render(vMenu)"
            }
        },
        {
            "Title": "Function menumanager.drawdebug",
            "subTitle": "",
            "dLine": {
                "3606": "function MenuManager.DrawDebug()"
            },
            "SLine": {
                "1": "function MenuManager.DrawDebug()"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3607": "draw.Text(50, 50, \"## DEBUG INFO ##\")"
            },
            "SLine": {
                "1": "draw.Text(50, 50, \"## DEBUG INFO ##\")"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3610": "draw.Text(currentX, currentY, \"Memory (KB): \" .. math.floor(collectgarbage(\"count\")))"
            },
            "SLine": {
                "1": "draw.Text(currentX, currentY, \"Memory (KB): \" .. math.floor(collectgarbage(\"count\")))"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3612": "draw.Text(currentX, currentY, \"Menus: \" .. #MenuManager.Menus)"
            },
            "SLine": {
                "1": "draw.Text(currentX, currentY, \"Menus: \" .. #MenuManager.Menus)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3613": "draw.Text(currentX, currentY, \"Menu: \" .. vMenu.Title .. \", Flags: \" .. vMenu.Flags)"
            },
            "SLine": {
                "1": "draw.Text(currentX, currentY, \"Menu: \" .. vMenu.Title .. \", Flags: \" .. vMenu.Flags)"
            }
        },
        {
            "Title": "For k, vcomponent in pairs",
            "subTitle": "",
            "dLine": {
                "3615": "for k, vComponent in pairs(vMenu.Components) do"
            },
            "SLine": {
                "1": "for k, vComponent in pairs(vMenu.Components) do"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3616": "draw.Text(currentX, currentY, \"Component-ID: \" .. vComponent.ID .. \", Visible: \" .. tostring(vComponent.Visible))"
            },
            "SLine": {
                "1": "draw.Text(currentX, currentY, \"Component-ID: \" .. vComponent.ID .. \", Visible: \" .. tostring(vComponent.Visible))"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "3619": "callbacks.Unregister(\"Draw\", \"Draw_MenuManager\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"Draw_MenuManager\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3620": "callbacks.Register(\"Draw\", \"Draw_MenuManager\", MenuManager.Draw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"Draw_MenuManager\", MenuManager.Draw)"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3621": "print(\"[MenuLib] Menu Library loaded! Version: \" .. MenuManager.Version)"
            },
            "SLine": {
                "1": "print(\"[MenuLib] Menu Library loaded! Version: \" .. MenuManager.Version)"
            }
        },
        {
            "Title": "Local mcallouts         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3623": "local mCallouts         = menu:AddComponent(MenuLib.MultiCombo(\"Auto Voicemenu WIP\",   Callouts, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mCallouts         = menu:AddComponent(MenuLib.MultiCombo(\"Auto Voicemenu WIP\",   Callouts, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Local mfaststop         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3624": "local mFastStop         = menu:AddComponent(MenuLib.Checkbox(\"FastStop (Debug!)\",      false))"
            },
            "SLine": {
                "1": "local mFastStop         = menu:AddComponent(MenuLib.Checkbox(\"FastStop (Debug!)\",      false))"
            }
        },
        {
            "Title": "Local mwflip            = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3625": "local mWFlip            = menu:AddComponent(MenuLib.Checkbox(\"Auto Weapon Flip\",       false))"
            },
            "SLine": {
                "1": "local mWFlip            = menu:AddComponent(MenuLib.Checkbox(\"Auto Weapon Flip\",       false))"
            }
        },
        {
            "Title": "Client.setconvar",
            "subTitle": "",
            "dLine": {
                "3626": "client.SetConVar(\"cl_wpn_sway_interp\",              0)"
            },
            "SLine": {
                "1": "client.SetConVar(\"cl_wpn_sway_interp\",              0)"
            }
        },
        {
            "Title": "Local mretrystunned     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3627": "local mRetryStunned     = menu:AddComponent(MenuLib.Checkbox(\"Retry When Stunned\",     false))"
            },
            "SLine": {
                "1": "local mRetryStunned     = menu:AddComponent(MenuLib.Checkbox(\"Retry When Stunned\",     false))"
            }
        },
        {
            "Title": "Local mautomelee        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3628": "local mAutoMelee        = menu:AddComponent(MenuLib.Checkbox(\"Auto Melee Switch\",      false))"
            },
            "SLine": {
                "1": "local mAutoMelee        = menu:AddComponent(MenuLib.Checkbox(\"Auto Melee Switch\",      false))"
            }
        },
        {
            "Title": "Local mmeleedist        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3629": "local mMeleeDist        = menu:AddComponent(MenuLib.Slider(\"Melee Switch Distance\",    77, 500, 200))"
            },
            "SLine": {
                "1": "local mMeleeDist        = menu:AddComponent(MenuLib.Slider(\"Melee Switch Distance\",    77, 500, 200))"
            }
        },
        {
            "Title": "Local mautoflfar        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3630": "local mAutoFLFar        = menu:AddComponent(MenuLib.Slider(\"AFL Far Value\",         0, 1000, 0))"
            },
            "SLine": {
                "1": "local mAutoFLFar        = menu:AddComponent(MenuLib.Slider(\"AFL Far Value\",         0, 1000, 0))"
            }
        },
        {
            "Title": "Local mautoflnear       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3631": "local mAutoFLNear       = menu:AddComponent(MenuLib.Slider(\"AFL Close Value\",        0, 1000, 300))"
            },
            "SLine": {
                "1": "local mAutoFLNear       = menu:AddComponent(MenuLib.Slider(\"AFL Close Value\",        0, 1000, 300))"
            }
        },
        {
            "Title": "Local mrandping         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3632": "local mRandPing         = menu:AddComponent(MenuLib.Checkbox(\"Random Ping\",            false))"
            },
            "SLine": {
                "1": "local mRandPing         = menu:AddComponent(MenuLib.Checkbox(\"Random Ping\",            false))"
            }
        },
        {
            "Title": "Local mrandpingvalue    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3633": "local mRandPingValue    = menu:AddComponent(MenuLib.Slider(\"Ping Randomness\",          1, 15, 8))"
            },
            "SLine": {
                "1": "local mRandPingValue    = menu:AddComponent(MenuLib.Slider(\"Ping Randomness\",          1, 15, 8))"
            }
        },
        {
            "Title": "Local mrandlagvalue     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3634": "local mRandLagValue     = menu:AddComponent(MenuLib.Slider(\"Fakelag Randomness\",       1, 200, 21))"
            },
            "SLine": {
                "1": "local mRandLagValue     = menu:AddComponent(MenuLib.Slider(\"Fakelag Randomness\",       1, 200, 21))"
            }
        },
        {
            "Title": "Local mrandlagmin       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3635": "local mRandLagMin       = menu:AddComponent(MenuLib.Slider(\"Fakelag Min\",              1, 314, 120))"
            },
            "SLine": {
                "1": "local mRandLagMin       = menu:AddComponent(MenuLib.Slider(\"Fakelag Min\",              1, 314, 120))"
            }
        },
        {
            "Title": "Local mchatnl           = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3636": "local mChatNL           = menu:AddComponent(MenuLib.Checkbox(\"Allow \\\\n in chat\",      false))"
            },
            "SLine": {
                "1": "local mChatNL           = menu:AddComponent(MenuLib.Checkbox(\"Allow \\\\n in chat\",      false))"
            }
        },
        {
            "Title": "Local mextendfreeze     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3637": "local mExtendFreeze     = menu:AddComponent(MenuLib.Checkbox(\"Infinite Respawn Timer\", false))"
            },
            "SLine": {
                "1": "local mExtendFreeze     = menu:AddComponent(MenuLib.Checkbox(\"Infinite Respawn Timer\", false))"
            }
        },
        {
            "Title": "Local mmedicfinder      = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3638": "local mMedicFinder      = menu:AddComponent(MenuLib.Checkbox(\"Medic Finder\",           false))"
            },
            "SLine": {
                "1": "local mMedicFinder      = menu:AddComponent(MenuLib.Checkbox(\"Medic Finder\",           false))"
            }
        },
        {
            "Title": "Local mremovals         = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3639": "local mRemovals         = menu:AddComponent(MenuLib.MultiCombo(\"Removals\",             Removals, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "local mRemovals         = menu:AddComponent(MenuLib.MultiCombo(\"Removals\",             Removals, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "If mrandping:getvalue",
            "subTitle": "",
            "dLine": {
                "3640": "if mRandPing:GetValue() == true then"
            },
            "SLine": {
                "1": "if mRandPing:GetValue() == true then"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3642": "if (mWFlip:GetValue() == true) then"
            },
            "SLine": {
                "1": "if (mWFlip:GetValue() == true) then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3643": "client.command(\"retry\", true)"
            },
            "SLine": {
                "1": "client.command(\"retry\", true)"
            }
        },
        {
            "Title": "Local originalweapon = plocal:getpropentity",
            "subTitle": "",
            "dLine": {
                "3644": "local originalWeapon = pLocal:GetPropEntity(\"m_hActiveWeapon\")"
            },
            "SLine": {
                "1": "local originalWeapon = pLocal:GetPropEntity(\"m_hActiveWeapon\")"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3645": "if (mAutoMelee:GetValue() == true) and (distance <= mMeleeDist:GetValue())"
            },
            "SLine": {
                "1": "if (mAutoMelee:GetValue() == true) and (distance <= mMeleeDist:GetValue())"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "3646": "and (pWeapon:IsMeleeWeapon() == false)"
            },
            "SLine": {
                "1": "and (pWeapon:IsMeleeWeapon() == false)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3647": "client.Command(\"slot3\", true)"
            },
            "SLine": {
                "1": "client.Command(\"slot3\", true)"
            }
        },
        {
            "Title": "Elseif ",
            "subTitle": "",
            "dLine": {
                "3648": "elseif (mAutoMelee:GetValue() == true) and (pWeapon:IsMeleeWeapon() == true) then"
            },
            "SLine": {
                "1": "elseif (mAutoMelee:GetValue() == true) and (pWeapon:IsMeleeWeapon() == true) then"
            }
        },
        {
            "Title": "Local enemies = entity.getenemies",
            "subTitle": "",
            "dLine": {
                "3649": "local enemies = entity.GetEnemies()"
            },
            "SLine": {
                "1": "local enemies = entity.GetEnemies()"
            }
        },
        {
            "Title": "For i, enemy in ipairs",
            "subTitle": "",
            "dLine": {
                "3652": "for i, enemy in ipairs(enemies) do"
            },
            "SLine": {
                "1": "for i, enemy in ipairs(enemies) do"
            }
        },
        {
            "Title": "Local dist = ",
            "subTitle": "",
            "dLine": {
                "3653": "local dist = (pLocal:GetAbsOrigin() - enemy:GetAbsOrigin()):Length()"
            },
            "SLine": {
                "1": "local dist = (pLocal:GetAbsOrigin() - enemy:GetAbsOrigin()):Length()"
            }
        },
        {
            "Title": "If min_distance > mmeleedist:getvalue",
            "subTitle": "",
            "dLine": {
                "3656": "if min_distance > mMeleeDist:GetValue() then"
            },
            "SLine": {
                "1": "if min_distance > mMeleeDist:GetValue() then"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3657": "client.Command(\"slot1\", true)"
            },
            "SLine": {
                "1": "client.Command(\"slot1\", true)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3658": "client.Command(\"use \" .. originalWeapon:GetSlot(), true)"
            },
            "SLine": {
                "1": "client.Command(\"use \" .. originalWeapon:GetSlot(), true)"
            }
        },
        {
            "Title": "Original_weapon = pweapon:getclass",
            "subTitle": "",
            "dLine": {
                "3660": "original_weapon = pWeapon:GetClass()"
            },
            "SLine": {
                "1": "original_weapon = pWeapon:GetClass()"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3661": "client.Command(\"use \" .. original_weapon, true)"
            },
            "SLine": {
                "1": "client.Command(\"use \" .. original_weapon, true)"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3662": "client.Command(\"slot\" .. original_weapon, true)"
            },
            "SLine": {
                "1": "client.Command(\"slot\" .. original_weapon, true)"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3664": "client.ChatPrintf(distance)"
            },
            "SLine": {
                "1": "client.ChatPrintf(distance)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3665": "if (mAutoFL:GetValue() == true) and (pWeapon:IsMeleeWeapon() == true)"
            },
            "SLine": {
                "1": "if (mAutoFL:GetValue() == true) and (pWeapon:IsMeleeWeapon() == true)"
            }
        },
        {
            "Title": "If mcallouts:isselected",
            "subTitle": "",
            "dLine": {
                "3666": "if mCallouts:IsSelected(\"Battle Cry Melee\") and (pWeapon:IsMeleeWeapon() == true)"
            },
            "SLine": {
                "1": "if mCallouts:IsSelected(\"Battle Cry Melee\") and (pWeapon:IsMeleeWeapon() == true)"
            }
        },
        {
            "Title": "If mchatnl:getvalue",
            "subTitle": "",
            "dLine": {
                "3667": "if mChatNL:GetValue() == true then"
            },
            "SLine": {
                "1": "if mChatNL:GetValue() == true then"
            }
        },
        {
            "Title": "Local mautoweapon       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3668": "local mAutoweapon       = menu:AddComponent(MenuLib.Checkbox(\"Weapon Manager\",      true))"
            },
            "SLine": {
                "1": "local mAutoweapon       = menu:AddComponent(MenuLib.Checkbox(\"Weapon Manager\",      true))"
            }
        },
        {
            "Title": "Local mcrossbowhealth   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3669": "local mcrossbowhealth   = menu:AddComponent(MenuLib.Slider(\"crossbow health\",    1, 100, 92))"
            },
            "SLine": {
                "1": "local mcrossbowhealth   = menu:AddComponent(MenuLib.Slider(\"crossbow health\",    1, 100, 92))"
            }
        },
        {
            "Title": "Local mautoweapondist   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3670": "local mAutoWeaponDist   = menu:AddComponent(MenuLib.Slider(\"Melee Distance\",    0, 400, 77))"
            },
            "SLine": {
                "1": "local mAutoWeaponDist   = menu:AddComponent(MenuLib.Slider(\"Melee Distance\",    0, 400, 77))"
            }
        },
        {
            "Title": "If mantipred:getvalue",
            "subTitle": "",
            "dLine": {
                "3671": "if mAntiPred:GetValue() == true then"
            },
            "SLine": {
                "1": "if mAntiPred:GetValue() == true then"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "3672": "pCmd:SetSideMove(90)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(90)"
            }
        },
        {
            "Title": "Pcmd:setsidemove",
            "subTitle": "",
            "dLine": {
                "3673": "pCmd:SetSideMove(-90)"
            },
            "SLine": {
                "1": "pCmd:SetSideMove(-90)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "3674": "gui.SetValue(\"aim bot\", 1);"
            },
            "SLine": {
                "1": "gui.SetValue(\"aim bot\", 1);"
            }
        },
        {
            "Title": "Local is_melee                  = pweapon:ismeleeweapon",
            "subTitle": "",
            "dLine": {
                "3676": "local is_melee                  = pWeapon:IsMeleeWeapon()"
            },
            "SLine": {
                "1": "local is_melee                  = pWeapon:IsMeleeWeapon()"
            }
        },
        {
            "Title": "Local tf_weapon_criticals       = client.getconvar",
            "subTitle": "",
            "dLine": {
                "3677": "local tf_weapon_criticals       = client.GetConVar('tf_weapon_criticals')"
            },
            "SLine": {
                "1": "local tf_weapon_criticals       = client.GetConVar('tf_weapon_criticals')"
            }
        },
        {
            "Title": "Local tf_weapon_criticals_melee = client.getconvar",
            "subTitle": "",
            "dLine": {
                "3678": "local tf_weapon_criticals_melee = client.GetConVar('tf_weapon_criticals_melee')"
            },
            "SLine": {
                "1": "local tf_weapon_criticals_melee = client.GetConVar('tf_weapon_criticals_melee')"
            }
        },
        {
            "Title": "Local bucket_max                = client.getconvar",
            "subTitle": "",
            "dLine": {
                "3679": "local bucket_max                = client.GetConVar('tf_weapon_criticals_bucket_cap')"
            },
            "SLine": {
                "1": "local bucket_max                = client.GetConVar('tf_weapon_criticals_bucket_cap')"
            }
        },
        {
            "Title": "Local added_per_shot            = pweapon:getweaponbasedamage",
            "subTitle": "",
            "dLine": {
                "3680": "local added_per_shot            = pWeapon:GetWeaponBaseDamage()"
            },
            "SLine": {
                "1": "local added_per_shot            = pWeapon:GetWeaponBaseDamage()"
            }
        },
        {
            "Title": "Local bucket_current            = pweapon:getcrittokenbucket",
            "subTitle": "",
            "dLine": {
                "3681": "local bucket_current            = pWeapon:GetCritTokenBucket()"
            },
            "SLine": {
                "1": "local bucket_current            = pWeapon:GetCritTokenBucket()"
            }
        },
        {
            "Title": "Local crit_fired                = pweapon:getcritseedrequestcount",
            "subTitle": "",
            "dLine": {
                "3682": "local crit_fired                = pWeapon:GetCritSeedRequestCount()"
            },
            "SLine": {
                "1": "local crit_fired                = pWeapon:GetCritSeedRequestCount()"
            }
        },
        {
            "Title": "Local bucket_current = pweapon:getcrittokenbucket",
            "subTitle": "",
            "dLine": {
                "3684": "local bucket_current = pWeapon:GetCritTokenBucket()"
            },
            "SLine": {
                "1": "local bucket_current = pWeapon:GetCritTokenBucket()"
            }
        },
        {
            "Title": "Local automelee = mwswitchoptions:isselected",
            "subTitle": "",
            "dLine": {
                "3686": "local automelee = mWswitchoptions:IsSelected(\"Self Defence\")"
            },
            "SLine": {
                "1": "local automelee = mWswitchoptions:IsSelected(\"Self Defence\")"
            }
        },
        {
            "Title": "Local meleedist = distance < ",
            "subTitle": "",
            "dLine": {
                "3687": "local meleedist = distance < (mAutoWeaponDist:GetValue() + swingrange)"
            },
            "SLine": {
                "1": "local meleedist = distance < (mAutoWeaponDist:GetValue() + swingrange)"
            }
        },
        {
            "Title": "Shots_to_fill_bucket = math.ceil",
            "subTitle": "",
            "dLine": {
                "3689": "shots_to_fill_bucket = math.ceil(bucket_max / added_per_shot)"
            },
            "SLine": {
                "1": "shots_to_fill_bucket = math.ceil(bucket_max / added_per_shot)"
            }
        },
        {
            "Title": "If not vplayer:isvalid",
            "subTitle": "",
            "dLine": {
                "3690": "if not vPlayer:IsValid() or (distance > 777) then goto continue end"
            },
            "SLine": {
                "1": "if not vPlayer:IsValid() or (distance > 777) then goto continue end"
            }
        },
        {
            "Title": "If plocal:incond",
            "subTitle": "",
            "dLine": {
                "3699": "if pLocal:InCond(58) or pLocal:InCond(59)"
            },
            "SLine": {
                "1": "if pLocal:InCond(58) or pLocal:InCond(59)"
            }
        },
        {
            "Title": "Or plocal:incond",
            "subTitle": "",
            "dLine": {
                "3700": "or pLocal:InCond(60) then"
            },
            "SLine": {
                "1": "or pLocal:InCond(60) then"
            }
        },
        {
            "Title": "If pweapon:isshootingweapon",
            "subTitle": "",
            "dLine": {
                "3707": "if pWeapon:IsShootingWeapon() or pWeapon:IsMeleeWeapon() then return end"
            },
            "SLine": {
                "1": "if pWeapon:IsShootingWeapon() or pWeapon:IsMeleeWeapon() then return end"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3708": "local menu = MenuLib.Create(\"Neon Hat\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Neon Hat\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local menable     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3709": "local mEnable     = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            },
            "SLine": {
                "1": "local mEnable     = menu:AddComponent(MenuLib.Checkbox(\"Enable\", true))"
            }
        },
        {
            "Title": "Local mmmheight   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3710": "local mmmheight   = menu:AddComponent(MenuLib.Slider(\"height\", 0 ,50 , 11 ))"
            },
            "SLine": {
                "1": "local mmmheight   = menu:AddComponent(MenuLib.Slider(\"height\", 0 ,50 , 11 ))"
            }
        },
        {
            "Title": "Local mradious    = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3711": "local mradious    = menu:AddComponent(MenuLib.Slider(\"radious\", 1 ,85 , 17 ))"
            },
            "SLine": {
                "1": "local mradious    = menu:AddComponent(MenuLib.Slider(\"radious\", 1 ,85 , 17 ))"
            }
        },
        {
            "Title": "Local mresolution = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3712": "local mresolution = menu:AddComponent(MenuLib.Slider(\"resolution\", 1 ,1200 , 720 ))"
            },
            "SLine": {
                "1": "local mresolution = menu:AddComponent(MenuLib.Slider(\"resolution\", 1 ,1200 , 720 ))"
            }
        },
        {
            "Title": "Local color       = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3713": "local color       = menu:AddComponent(MenuLib.Colorpicker(\"Hat Color\", color))"
            },
            "SLine": {
                "1": "local color       = menu:AddComponent(MenuLib.Colorpicker(\"Hat Color\", color))"
            }
        },
        {
            "Title": "If menable:getvalue",
            "subTitle": "",
            "dLine": {
                "3714": "if mEnable:GetValue() == false then return end"
            },
            "SLine": {
                "1": "if mEnable:GetValue() == false then return end"
            }
        },
        {
            "Title": "Local swingrange = pweapon:getswingrange",
            "subTitle": "",
            "dLine": {
                "3715": "local swingrange = pWeapon:GetSwingRange()"
            },
            "SLine": {
                "1": "local swingrange = pWeapon:GetSwingRange()"
            }
        },
        {
            "Title": "Local viewoffset = plocal:getpropvector",
            "subTitle": "",
            "dLine": {
                "3716": "local viewOffset = pLocal:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            },
            "SLine": {
                "1": "local viewOffset = pLocal:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            }
        },
        {
            "Title": "Local viewheight = ",
            "subTitle": "",
            "dLine": {
                "3717": "local viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()"
            },
            "SLine": {
                "1": "local viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()"
            }
        },
        {
            "Title": "Local plocalorigin = ",
            "subTitle": "",
            "dLine": {
                "3718": "local pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)"
            },
            "SLine": {
                "1": "local pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)"
            }
        },
        {
            "Title": "Local plocalclass = plocal:getpropint",
            "subTitle": "",
            "dLine": {
                "3719": "local pLocalClass = pLocal:GetPropInt(\"m_iClass\")"
            },
            "SLine": {
                "1": "local pLocalClass = pLocal:GetPropInt(\"m_iClass\")"
            }
        },
        {
            "Title": "Local player = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "3721": "local player = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local player = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "Local hitboxes = player:gethitboxes",
            "subTitle": "",
            "dLine": {
                "3722": "local hitboxes = player:GetHitboxes()"
            },
            "SLine": {
                "1": "local hitboxes = player:GetHitboxes()"
            }
        },
        {
            "Title": "Local selected_color = color:getcolor",
            "subTitle": "",
            "dLine": {
                "3725": "local selected_color = color:GetColor()"
            },
            "SLine": {
                "1": "local selected_color = color:GetColor()"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "3726": "draw.Color(selected_color[1], selected_color[2], selected_color[3], selected_color[4])"
            },
            "SLine": {
                "1": "draw.Color(selected_color[1], selected_color[2], selected_color[3], selected_color[4])"
            }
        },
        {
            "Title": "Local radius = mradious:getvalue",
            "subTitle": "",
            "dLine": {
                "3728": "local radius = mradious:GetValue()"
            },
            "SLine": {
                "1": "local radius = mradious:GetValue()"
            }
        },
        {
            "Title": "Local segments = mresolution:getvalue",
            "subTitle": "",
            "dLine": {
                "3729": "local segments = mresolution:GetValue()"
            },
            "SLine": {
                "1": "local segments = mresolution:GetValue()"
            }
        },
        {
            "Title": "Local hat_height = height + mmmheight:getvalue",
            "subTitle": "",
            "dLine": {
                "3731": "local hat_height = height + mmmheight:GetValue()"
            },
            "SLine": {
                "1": "local hat_height = height + mmmheight:GetValue()"
            }
        },
        {
            "Title": "Local x = center.x + math.cos",
            "subTitle": "",
            "dLine": {
                "3733": "local x = center.x + math.cos(angle) * radius"
            },
            "SLine": {
                "1": "local x = center.x + math.cos(angle) * radius"
            }
        },
        {
            "Title": "Local y = center.y + math.sin",
            "subTitle": "",
            "dLine": {
                "3734": "local y = center.y + math.sin(angle) * radius"
            },
            "SLine": {
                "1": "local y = center.y + math.sin(angle) * radius"
            }
        },
        {
            "Title": "Vertices[i] = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "3735": "vertices[i] = client.WorldToScreen(Vector3(x, y, center.z + height))"
            },
            "SLine": {
                "1": "vertices[i] = client.WorldToScreen(Vector3(x, y, center.z + height))"
            }
        },
        {
            "Title": "Local top_vertex = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "3736": "local top_vertex = client.WorldToScreen(Vector3(center.x, center.y, center.z + hat_height))"
            },
            "SLine": {
                "1": "local top_vertex = client.WorldToScreen(Vector3(center.x, center.y, center.z + hat_height))"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3737": "draw.Line(vertices[i][1], vertices[i][2], top_vertex[1], top_vertex[2])"
            },
            "SLine": {
                "1": "draw.Line(vertices[i][1], vertices[i][2], top_vertex[1], top_vertex[2])"
            }
        },
        {
            "Title": "Materials.enumerate",
            "subTitle": "",
            "dLine": {
                "3738": "materials.Enumerate(function (material)"
            },
            "SLine": {
                "1": "materials.Enumerate(function (material)"
            }
        },
        {
            "Title": "Local name = material:getname",
            "subTitle": "",
            "dLine": {
                "3739": "local name = material:GetName()"
            },
            "SLine": {
                "1": "local name = material:GetName()"
            }
        },
        {
            "Title": "If name:find",
            "subTitle": "",
            "dLine": {
                "3740": "if name:find(\"models/soldier_statue\") then"
            },
            "SLine": {
                "1": "if name:find(\"models/soldier_statue\") then"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3741": "print(\"Hiding: \" .. name)"
            },
            "SLine": {
                "1": "print(\"Hiding: \" .. name)"
            }
        },
        {
            "Title": "Material:setmaterialvarflag",
            "subTitle": "",
            "dLine": {
                "3742": "material:SetMaterialVarFlag(MATERIAL_VAR_NO_DRAW, true)"
            },
            "SLine": {
                "1": "material:SetMaterialVarFlag(MATERIAL_VAR_NO_DRAW, true)"
            }
        },
        {
            "Title": "If plocal:isalive",
            "subTitle": "",
            "dLine": {
                "3743": "if pLocal:IsAlive() and input.IsButtonDown(mKey:GetValue()) then"
            },
            "SLine": {
                "1": "if pLocal:IsAlive() and input.IsButtonDown(mKey:GetValue()) then"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3745": "local Menu = MenuLib.Create(\"Swing prediction\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local Menu = MenuLib.Create(\"Swing prediction\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Enabled = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3749": "Enabled = Menu:AddComponent(MenuLib.Checkbox(\"Enable\", true)),"
            },
            "SLine": {
                "1": "Enabled = Menu:AddComponent(MenuLib.Checkbox(\"Enable\", true)),"
            }
        },
        {
            "Title": "Local players     = entities.findbyclass",
            "subTitle": "",
            "dLine": {
                "3750": "local players     = entities.FindByClass(\"CTFPlayer\")"
            },
            "SLine": {
                "1": "local players     = entities.FindByClass(\"CTFPlayer\")"
            }
        },
        {
            "Title": "Local is_melee    = pweapon:ismeleeweapon",
            "subTitle": "",
            "dLine": {
                "3751": "local is_melee    = pWeapon:IsMeleeWeapon()"
            },
            "SLine": {
                "1": "local is_melee    = pWeapon:IsMeleeWeapon()"
            }
        },
        {
            "Title": "If not options.enabled:getvalue",
            "subTitle": "",
            "dLine": {
                "3752": "if not Options.Enabled:GetValue() then return end"
            },
            "SLine": {
                "1": "if not Options.Enabled:GetValue() then return end"
            }
        },
        {
            "Title": "For i, vplayer in pairs",
            "subTitle": "",
            "dLine": {
                "3753": "for i, vPlayer in pairs(players) do"
            },
            "SLine": {
                "1": "for i, vPlayer in pairs(players) do"
            }
        },
        {
            "Title": "Local distvector = localplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "3754": "local distVector = LocalPlayer:GetAbsOrigin() - vPlayer:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local distVector = LocalPlayer:GetAbsOrigin() - vPlayer:GetAbsOrigin()"
            }
        },
        {
            "Title": "Relativespeed = math.floor",
            "subTitle": "",
            "dLine": {
                "3760": "relativeSpeed = math.floor(relativespeed)"
            },
            "SLine": {
                "1": "relativeSpeed = math.floor(relativespeed)"
            }
        },
        {
            "Title": "Menulib.removemenu",
            "subTitle": "",
            "dLine": {
                "3763": "MenuLib.RemoveMenu(Menu)"
            },
            "SLine": {
                "1": "MenuLib.RemoveMenu(Menu)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "3764": "callbacks.Unregister(\"CreateMove\", \"PR_CreateMove\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"CreateMove\", \"PR_CreateMove\")"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "3765": "callbacks.Unregister(\"Unload\", \"PR_Unload\")"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Unload\", \"PR_Unload\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3766": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3767": "callbacks.Register(\"Unload\", \"PR_Unload\", OnUnload)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Unload\", \"PR_Unload\", OnUnload)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3769": "local Menu = MenuLib.Create(\"Ping Utills\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local Menu = MenuLib.Create(\"Ping Utills\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Targetping = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3770": "TargetPing = Menu:AddComponent(MenuLib.Slider(\"Target Ping\", 0, 100, 77)),"
            },
            "SLine": {
                "1": "TargetPing = Menu:AddComponent(MenuLib.Slider(\"Target Ping\", 0, 100, 77)),"
            }
        },
        {
            "Title": "Mrandping = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3771": "mRandPing = Menu:AddComponent(MenuLib.Checkbox(\"Random Ping\", true)),"
            },
            "SLine": {
                "1": "mRandPing = Menu:AddComponent(MenuLib.Checkbox(\"Random Ping\", true)),"
            }
        },
        {
            "Title": "Mrandpingvalue = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3772": "mRandPingValue = Menu:AddComponent(MenuLib.Slider(\"Ping Randomness\", 1, 15, 7)),"
            },
            "SLine": {
                "1": "mRandPingValue = Menu:AddComponent(MenuLib.Slider(\"Ping Randomness\", 1, 15, 7)),"
            }
        },
        {
            "Title": "Local function oncreatemove",
            "subTitle": "",
            "dLine": {
                "3773": "local function OnCreateMove()"
            },
            "SLine": {
                "1": "local function OnCreateMove()"
            }
        },
        {
            "Title": "Local localindex = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "3774": "local localIndex = entities.GetLocalPlayer():GetIndex()"
            },
            "SLine": {
                "1": "local localIndex = entities.GetLocalPlayer():GetIndex()"
            }
        },
        {
            "Title": "Local ping = entities.getplayerresources",
            "subTitle": "",
            "dLine": {
                "3775": "local ping = entities.GetPlayerResources():GetPropDataTableInt(\"m_iPing\")[localIndex + 1]"
            },
            "SLine": {
                "1": "local ping = entities.GetPlayerResources():GetPropDataTableInt(\"m_iPing\")[localIndex + 1]"
            }
        },
        {
            "Title": "If ping <= options.targetping:getvalue",
            "subTitle": "",
            "dLine": {
                "3776": "if ping <= Options.TargetPing:GetValue() then"
            },
            "SLine": {
                "1": "if ping <= Options.TargetPing:GetValue() then"
            }
        },
        {
            "Title": "Local function outcaller",
            "subTitle": "",
            "dLine": {
                "3780": "local function outcaller(event)"
            },
            "SLine": {
                "1": "local function outcaller(event)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3781": "if (event:GetName() == 'localplayer_respawn' ) then"
            },
            "SLine": {
                "1": "if (event:GetName() == 'localplayer_respawn' ) then"
            }
        },
        {
            "Title": "For i, player in pairs",
            "subTitle": "",
            "dLine": {
                "3782": "for i, player in pairs(players) do"
            },
            "SLine": {
                "1": "for i, player in pairs(players) do"
            }
        },
        {
            "Title": "If player ~= entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "3783": "if player ~= entities.GetLocalPlayer() then"
            },
            "SLine": {
                "1": "if player ~= entities.GetLocalPlayer() then"
            }
        },
        {
            "Title": "Local steamid = client.getplayerinfo",
            "subTitle": "",
            "dLine": {
                "3784": "local steamid = client.GetPlayerInfo(player:GetIndex()).SteamID;"
            },
            "SLine": {
                "1": "local steamid = client.GetPlayerInfo(player:GetIndex()).SteamID;"
            }
        },
        {
            "Title": "Local name = player:getname",
            "subTitle": "",
            "dLine": {
                "3785": "local name = player:GetName();"
            },
            "SLine": {
                "1": "local name = player:GetName();"
            }
        },
        {
            "Title": "Local priority = playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "3786": "local priority = playerlist.GetPriority(steamid);"
            },
            "SLine": {
                "1": "local priority = playerlist.GetPriority(steamid);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3788": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff1100cheating!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff1100cheating!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3789": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is cheating!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is cheating!\");"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3791": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is a \\x07ff8800tryhard!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is a \\x07ff8800tryhard!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3792": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is a tryhard!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is a tryhard!\");"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3794": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00friended!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00friended!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3795": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is a friended!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is a friended!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3796": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is clean!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is clean!\");"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3797": "callbacks.Register(\"FireGameEvent\", \"playerLogger\", outcaller)"
            },
            "SLine": {
                "1": "callbacks.Register(\"FireGameEvent\", \"playerLogger\", outcaller)"
            }
        },
        {
            "Title": "Assert",
            "subTitle": "asserts that expression is true",
            "dLine": {
                "3798": "assert(Lib.GetVersion() >= 0.94, \"LNXlib version is too old, please update it!\")"
            },
            "SLine": {
                "1": "assert(Lib.GetVersion() >= 0.94, \"LNXlib version is too old, please update it!\")"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3799": "local menu = MenuLib.Create(\"prefab menu\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"prefab menu\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local mdistance   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3804": "local mdistance   = menu:AddComponent(MenuLib.Slider(\"distance\", -100, 1000, 500))"
            },
            "SLine": {
                "1": "local mdistance   = menu:AddComponent(MenuLib.Slider(\"distance\", -100, 1000, 500))"
            }
        },
        {
            "Title": "Local mcheckbox     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3805": "local mcheckbox     = menu:AddComponent(MenuLib.Checkbox(\"checkbox\", true))"
            },
            "SLine": {
                "1": "local mcheckbox     = menu:AddComponent(MenuLib.Checkbox(\"checkbox\", true))"
            }
        },
        {
            "Title": "Local mlegjitter        = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3806": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\", false))"
            },
            "SLine": {
                "1": "local mLegJitter        = menu:AddComponent(MenuLib.Checkbox(\"Leg Jitter\", false))"
            }
        },
        {
            "Title": "Local checkbox = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3807": "local checkbox = menu:AddComponent(MenuLib.Checkbox(\"Enable Feature\", true))"
            },
            "SLine": {
                "1": "local checkbox = menu:AddComponent(MenuLib.Checkbox(\"Enable Feature\", true))"
            }
        },
        {
            "Title": "Function onbuttonpress",
            "subTitle": "",
            "dLine": {
                "3808": "function OnButtonPress()"
            },
            "SLine": {
                "1": "function OnButtonPress()"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3809": "print(\"Button pressed!\")"
            },
            "SLine": {
                "1": "print(\"Button pressed!\")"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3810": "menu:AddComponent(MenuLib.Button(\"Press Me!\", OnButtonPress, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Button(\"Press Me!\", OnButtonPress, ItemFlags.FullWidth))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3811": "menu:AddComponent(MenuLib.Slider(\"Text Size\", 20, 100, 60))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Slider(\"Text Size\", 20, 100, 60))"
            }
        },
        {
            "Title": "Local textbox = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3812": "local textBox = menu:AddComponent(MenuLib.Textbox(\"Write something...\"))"
            },
            "SLine": {
                "1": "local textBox = menu:AddComponent(MenuLib.Textbox(\"Write something...\"))"
            }
        },
        {
            "Title": "Local combo = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3816": "local combo = menu:AddComponent(MenuLib.Combo(\"Combo\", itemCombo))"
            },
            "SLine": {
                "1": "local combo = menu:AddComponent(MenuLib.Combo(\"Combo\", itemCombo))"
            }
        },
        {
            "Title": "Function addelement",
            "subTitle": "",
            "dLine": {
                "3817": "function AddElement()"
            },
            "SLine": {
                "1": "function AddElement()"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3819": "menu:AddComponent(MenuLib.Label(\"You wrote: \" .. textBox:GetValue()))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Label(\"You wrote: \" .. textBox:GetValue()))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3821": "menu:AddComponent(MenuLib.Checkbox(\"This is a checkbox.\", checkbox:GetValue()))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Checkbox(\"This is a checkbox.\", checkbox:GetValue()))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3822": "menu:AddComponent(MenuLib.Button(\"Add Element!\", AddElement))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.Button(\"Add Element!\", AddElement))"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3827": "menu:AddComponent(MenuLib.MultiCombo(\"Targets\", multiCombo))"
            },
            "SLine": {
                "1": "menu:AddComponent(MenuLib.MultiCombo(\"Targets\", multiCombo))"
            }
        },
        {
            "Title": "If mretrylowhpvalue:getvalue",
            "subTitle": "",
            "dLine": {
                "3828": "if mRetryLowHPValue:GetValue() >= 1 then"
            },
            "SLine": {
                "1": "if mRetryLowHPValue:GetValue() >= 1 then"
            }
        },
        {
            "Title": "And ",
            "subTitle": "",
            "dLine": {
                "3829": "and (pLocal:GetHealth() / pLocal:GetMaxHealth() * 100) <= mRetryLowHPValue:GetValue()) then"
            },
            "SLine": {
                "1": "and (pLocal:GetHealth() / pLocal:GetMaxHealth() * 100) <= mRetryLowHPValue:GetValue()) then"
            }
        },
        {
            "Title": "Local function readfile",
            "subTitle": "",
            "dLine": {
                "3834": "local function ReadFile(path)"
            },
            "SLine": {
                "1": "local function ReadFile(path)"
            }
        },
        {
            "Title": "Local playerlist = readfile",
            "subTitle": "",
            "dLine": {
                "3835": "local playerList = ReadFile(Options.File)"
            },
            "SLine": {
                "1": "local playerList = ReadFile(Options.File)"
            }
        },
        {
            "Title": "For line in playerlist:gmatch",
            "subTitle": "",
            "dLine": {
                "3836": "for line in playerList:gmatch(\"[^\\r\\n]+\") do"
            },
            "SLine": {
                "1": "for line in playerList:gmatch(\"[^\\r\\n]+\") do"
            }
        },
        {
            "Title": "Local prio = playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "3837": "local prio = playerlist.GetPriority(line)"
            },
            "SLine": {
                "1": "local prio = playerlist.GetPriority(line)"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "3838": "playerlist.SetPriority(line, Options.Priority)"
            },
            "SLine": {
                "1": "playerlist.SetPriority(line, Options.Priority)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3839": "local menu = MenuLib.Create(\"Melee circle\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Melee circle\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local mdrawcone   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3840": "local mdrawCone   = menu:AddComponent(MenuLib.Checkbox(\"Draw Cone\", false))"
            },
            "SLine": {
                "1": "local mdrawCone   = menu:AddComponent(MenuLib.Checkbox(\"Draw Cone\", false))"
            }
        },
        {
            "Title": "Local mheight     = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3841": "local mHeight     = menu:AddComponent(MenuLib.Slider(\"height\", 1 ,85 , 1 ))"
            },
            "SLine": {
                "1": "local mHeight     = menu:AddComponent(MenuLib.Slider(\"height\", 1 ,85 , 1 ))"
            }
        },
        {
            "Title": "Local mtheightt   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3842": "local mTHeightt   = menu:AddComponent(MenuLib.Slider(\"cone size\", 0 ,100 , 85 ))"
            },
            "SLine": {
                "1": "local mTHeightt   = menu:AddComponent(MenuLib.Slider(\"cone size\", 0 ,100 , 85 ))"
            }
        },
        {
            "Title": "Local mresolution = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3843": "local mresolution = menu:AddComponent(MenuLib.Slider(\"resolution\", 1 ,360 , 64 ))"
            },
            "SLine": {
                "1": "local mresolution = menu:AddComponent(MenuLib.Slider(\"resolution\", 1 ,360 , 64 ))"
            }
        },
        {
            "Title": "Local mcolor_close = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3844": "local mcolor_close = menu:AddComponent(MenuLib.Colorpicker(\"Color close\", color))"
            },
            "SLine": {
                "1": "local mcolor_close = menu:AddComponent(MenuLib.Colorpicker(\"Color close\", color))"
            }
        },
        {
            "Title": "Local mcolor_far   = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3845": "local mcolor_far   = menu:AddComponent(MenuLib.Colorpicker(\"Color Far\", color))"
            },
            "SLine": {
                "1": "local mcolor_far   = menu:AddComponent(MenuLib.Colorpicker(\"Color Far\", color))"
            }
        },
        {
            "Title": "Local selected_color = mcolor_far:getcolor",
            "subTitle": "",
            "dLine": {
                "3846": "local selected_color = mcolor_far:GetColor()"
            },
            "SLine": {
                "1": "local selected_color = mcolor_far:GetColor()"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "3849": "local trace = engine.TraceLine(pLocalOrigin, center + direction * radius, MASK_SHOT_HULL)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(pLocalOrigin, center + direction * radius, MASK_SHOT_HULL)"
            }
        },
        {
            "Title": "Local z = center.z + mheight:getvalue",
            "subTitle": "",
            "dLine": {
                "3852": "local z = center.z + mHeight:GetValue()"
            },
            "SLine": {
                "1": "local z = center.z + mHeight:GetValue()"
            }
        },
        {
            "Title": "Local max_height_adjustment = mtheightt:getvalue",
            "subTitle": "",
            "dLine": {
                "3853": "local max_height_adjustment = mTHeightt:GetValue()"
            },
            "SLine": {
                "1": "local max_height_adjustment = mTHeightt:GetValue()"
            }
        },
        {
            "Title": "Local t = ",
            "subTitle": "",
            "dLine": {
                "3854": "local t = (z - center.z - target_distance) / (mTHeightt:GetValue() - target_distance)"
            },
            "SLine": {
                "1": "local t = (z - center.z - target_distance) / (mTHeightt:GetValue() - target_distance)"
            }
        },
        {
            "Title": "Local top_height = mtheightt:getvalue",
            "subTitle": "",
            "dLine": {
                "3855": "local top_height = mTHeightt:GetValue()"
            },
            "SLine": {
                "1": "local top_height = mTHeightt:GetValue()"
            }
        },
        {
            "Title": "If mdrawcone:getvalue",
            "subTitle": "",
            "dLine": {
                "3856": "if mdrawCone:GetValue() == true then"
            },
            "SLine": {
                "1": "if mdrawCone:GetValue() == true then"
            }
        },
        {
            "Title": "Math.randomseed",
            "subTitle": "",
            "dLine": {
                "3857": "math.randomseed(os.time())"
            },
            "SLine": {
                "1": "math.randomseed(os.time())"
            }
        },
        {
            "Title": "Local function ondeath",
            "subTitle": "",
            "dLine": {
                "3858": "local function onDeath(event)"
            },
            "SLine": {
                "1": "local function onDeath(event)"
            }
        },
        {
            "Title": "If ",
            "subTitle": "",
            "dLine": {
                "3859": "if (event:GetName() == 'player_death' ) then"
            },
            "SLine": {
                "1": "if (event:GetName() == 'player_death' ) then"
            }
        },
        {
            "Title": "Local victim = entities.getbyuserid",
            "subTitle": "",
            "dLine": {
                "3860": "local victim = entities.GetByUserID(event:GetInt(\"userid\"))"
            },
            "SLine": {
                "1": "local victim = entities.GetByUserID(event:GetInt(\"userid\"))"
            }
        },
        {
            "Title": "If localplayer:getindex",
            "subTitle": "",
            "dLine": {
                "3861": "if localPlayer:GetIndex() == victim:GetIndex() and localPlayer:GetIndex() ~= attacker:GetIndex() then"
            },
            "SLine": {
                "1": "if localPlayer:GetIndex() == victim:GetIndex() and localPlayer:GetIndex() ~= attacker:GetIndex() then"
            }
        },
        {
            "Title": "Client.chatsay",
            "subTitle": "",
            "dLine": {
                "3862": "client.ChatSay( attacker:GetName().. \" - \\\"\".. math.random(50, 255).. \".\".. math.random(100, 255).. \".\".. math.random(100, 255).. \".\".. math.random(10, 150).. \"\\\"\")"
            },
            "SLine": {
                "1": "client.ChatSay( attacker:GetName().. \" - \\\"\".. math.random(50, 255).. \".\".. math.random(100, 255).. \".\".. math.random(100, 255).. \".\".. math.random(10, 150).. \"\\\"\")"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3863": "callbacks.Register(\"FireGameEvent\", \"deathSayLua\", onDeath)"
            },
            "SLine": {
                "1": "callbacks.Register(\"FireGameEvent\", \"deathSayLua\", onDeath)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3864": "local menu = MenuLib.Create(\"Search Bar\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"Search Bar\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local textbox = menulib.textbox",
            "subTitle": "",
            "dLine": {
                "3865": "local textBox = MenuLib.Textbox(\"Search...\")"
            },
            "SLine": {
                "1": "local textBox = MenuLib.Textbox(\"Search...\")"
            }
        },
        {
            "Title": "Searchquery = textbox:getvalue",
            "subTitle": "",
            "dLine": {
                "3866": "searchQuery = textBox:GetValue()"
            },
            "SLine": {
                "1": "searchQuery = textBox:GetValue()"
            }
        },
        {
            "Title": "Searchfeatures",
            "subTitle": "",
            "dLine": {
                "3867": "SearchFeatures()",
                "3879": "function SearchFeatures()"
            },
            "SLine": {
                "1": "SearchFeatures()"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3868": "menu:AddComponent(textBox)"
            },
            "SLine": {
                "1": "menu:AddComponent(textBox)"
            }
        },
        {
            "Title": "Local searchbutton = menulib.button",
            "subTitle": "",
            "dLine": {
                "3869": "local searchButton = MenuLib.Button(\"Search\", SearchFeatures)"
            },
            "SLine": {
                "1": "local searchButton = MenuLib.Button(\"Search\", SearchFeatures)"
            }
        },
        {
            "Title": "Menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3870": "menu:AddComponent(searchButton)"
            },
            "SLine": {
                "1": "menu:AddComponent(searchButton)"
            }
        },
        {
            "Title": "Function searchfeatures",
            "subTitle": "",
            "dLine": {
                "3879": "function SearchFeatures()"
            },
            "SLine": {
                "1": "function SearchFeatures()"
            }
        },
        {
            "Title": "For section, features in pairs",
            "subTitle": "",
            "dLine": {
                "3881": "for section, features in pairs(mainTable) do"
            },
            "SLine": {
                "1": "for section, features in pairs(mainTable) do"
            }
        },
        {
            "Title": "For i, feature in ipairs",
            "subTitle": "",
            "dLine": {
                "3882": "for i, feature in ipairs(features) do"
            },
            "SLine": {
                "1": "for i, feature in ipairs(features) do"
            }
        },
        {
            "Title": "If string.match",
            "subTitle": "",
            "dLine": {
                "3883": "if string.match(feature:lower(), searchQuery:lower()) then"
            },
            "SLine": {
                "1": "if string.match(feature:lower(), searchQuery:lower()) then"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "3884": "table.insert(results, { feature, section })"
            },
            "SLine": {
                "1": "table.insert(results, { feature, section })"
            }
        },
        {
            "Title": "Updatemenu",
            "subTitle": "",
            "dLine": {
                "3885": "UpdateMenu()",
                "3886": "function UpdateMenu()"
            },
            "SLine": {
                "1": "UpdateMenu()"
            }
        },
        {
            "Title": "Function updatemenu",
            "subTitle": "",
            "dLine": {
                "3886": "function UpdateMenu()"
            },
            "SLine": {
                "1": "function UpdateMenu()"
            }
        },
        {
            "Title": "Local newmenu = menulib.create",
            "subTitle": "",
            "dLine": {
                "3887": "local newMenu = MenuLib.Create(\"Search Bar\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local newMenu = MenuLib.Create(\"Search Bar\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local newtextbox = menulib.textbox",
            "subTitle": "",
            "dLine": {
                "3888": "local newTextBox = MenuLib.Textbox(\"Search...\", searchQuery)"
            },
            "SLine": {
                "1": "local newTextBox = MenuLib.Textbox(\"Search...\", searchQuery)"
            }
        },
        {
            "Title": "Newmenu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3889": "newMenu:AddComponent(newTextBox)"
            },
            "SLine": {
                "1": "newMenu:AddComponent(newTextBox)"
            }
        },
        {
            "Title": "Newmenu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3890": "newMenu:AddComponent(MenuLib.Seperator())"
            },
            "SLine": {
                "1": "newMenu:AddComponent(MenuLib.Seperator())"
            }
        },
        {
            "Title": "For i = 1, math.min",
            "subTitle": "",
            "dLine": {
                "3892": "for i = 1, math.min(#results, 10) do"
            },
            "SLine": {
                "1": "for i = 1, math.min(#results, 10) do"
            }
        },
        {
            "Title": "Local checkbox = menulib.checkbox",
            "subTitle": "",
            "dLine": {
                "3894": "local checkbox = MenuLib.Checkbox(feature[1] .. \" (\" .. feature[2] .. \")\", false)"
            },
            "SLine": {
                "1": "local checkbox = MenuLib.Checkbox(feature[1] .. \" (\" .. feature[2] .. \")\", false)"
            }
        },
        {
            "Title": "Newmenu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3895": "newMenu:AddComponent(checkbox)"
            },
            "SLine": {
                "1": "newMenu:AddComponent(checkbox)"
            }
        },
        {
            "Title": "Newmenu:addcomponent",
            "subTitle": "",
            "dLine": {
                "3896": "newMenu:AddComponent(MenuLib.Label(\"No matching features.\"))"
            },
            "SLine": {
                "1": "newMenu:AddComponent(MenuLib.Label(\"No matching features.\"))"
            }
        },
        {
            "Title": "If plocal:isalive",
            "subTitle": "",
            "dLine": {
                "3901": "if pLocal:IsAlive() then"
            },
            "SLine": {
                "1": "if pLocal:IsAlive() then"
            }
        },
        {
            "Title": "Local screenpos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "3902": "local screenPos = client.WorldToScreen(pLocal:GetAbsOrigin())"
            },
            "SLine": {
                "1": "local screenPos = client.WorldToScreen(pLocal:GetAbsOrigin())"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "3903": "draw.SetFont(myfont)"
            },
            "SLine": {
                "1": "draw.SetFont(myfont)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3904": "draw.Text(screenPos[1], screenPos[2], \"ignacy\")"
            },
            "SLine": {
                "1": "draw.Text(screenPos[1], screenPos[2], \"ignacy\")"
            }
        },
        {
            "Title": "Local newx = x + math.cos",
            "subTitle": "",
            "dLine": {
                "3910": "local newx = x + math.cos(angle) * radius"
            },
            "SLine": {
                "1": "local newx = x + math.cos(angle) * radius"
            }
        },
        {
            "Title": "Local newy = y + math.sin",
            "subTitle": "",
            "dLine": {
                "3911": "local newy = y + math.sin(angle) * radius"
            },
            "SLine": {
                "1": "local newy = y + math.sin(angle) * radius"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "3912": "draw.Line(math.floor(prevx), math.floor(prevy), math.floor(newx), math.floor(newy))"
            },
            "SLine": {
                "1": "draw.Line(math.floor(prevx), math.floor(prevy), math.floor(newx), math.floor(newy))"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3914": "callbacks.Register(\"Draw\", \"mydraw\", doDraw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"mydraw\", doDraw)"
            }
        },
        {
            "Title": "Local function get_class_entity",
            "subTitle": "",
            "dLine": {
                "3918": "local function get_class_entity(class_int, enemy_only)"
            },
            "SLine": {
                "1": "local function get_class_entity(class_int, enemy_only)"
            }
        },
        {
            "Title": "For _, v in pairs",
            "subTitle": "",
            "dLine": {
                "3920": "for _, v in pairs(players) do"
            },
            "SLine": {
                "1": "for _, v in pairs(players) do"
            }
        },
        {
            "Title": "Local ent_classes = v:getpropint",
            "subTitle": "",
            "dLine": {
                "3921": "local ent_classes = v:GetPropInt(\"m_iClass\")"
            },
            "SLine": {
                "1": "local ent_classes = v:GetPropInt(\"m_iClass\")"
            }
        },
        {
            "Title": "Local team_num = v:getpropint",
            "subTitle": "",
            "dLine": {
                "3922": "local team_num = v:GetPropInt(\"m_iTeamNum\")"
            },
            "SLine": {
                "1": "local team_num = v:GetPropInt(\"m_iTeamNum\")"
            }
        },
        {
            "Title": "If enemy_only and team_num == localplayer:getpropint",
            "subTitle": "",
            "dLine": {
                "3923": "if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end"
            },
            "SLine": {
                "1": "if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "3925": "table.insert(class_ents, v)"
            },
            "SLine": {
                "1": "table.insert(class_ents, v)"
            }
        },
        {
            "Title": "Local screen_x, screen_y = draw.getscreensize",
            "subTitle": "",
            "dLine": {
                "3927": "local screen_x, screen_y = draw.GetScreenSize()"
            },
            "SLine": {
                "1": "local screen_x, screen_y = draw.GetScreenSize()"
            }
        },
        {
            "Title": "Local font_calibri = draw.createfont",
            "subTitle": "",
            "dLine": {
                "3928": "local font_calibri = draw.CreateFont(\"calibri\", 20, 40)"
            },
            "SLine": {
                "1": "local font_calibri = draw.CreateFont(\"calibri\", 20, 40)"
            }
        },
        {
            "Title": "Local function paint_spy",
            "subTitle": "",
            "dLine": {
                "3929": "local function paint_spy()"
            },
            "SLine": {
                "1": "local function paint_spy()"
            }
        },
        {
            "Title": "Local spies = get_class_entity",
            "subTitle": "",
            "dLine": {
                "3930": "local spies = get_class_entity(8, true)"
            },
            "SLine": {
                "1": "local spies = get_class_entity(8, true)"
            }
        },
        {
            "Title": "For i, v in pairs",
            "subTitle": "",
            "dLine": {
                "3931": "for i, v in pairs(spies) do"
            },
            "SLine": {
                "1": "for i, v in pairs(spies) do"
            }
        },
        {
            "Title": "Local spy_origin = v:getabsorigin",
            "subTitle": "",
            "dLine": {
                "3932": "local spy_origin = v:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local spy_origin = v:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local local_origin = localplayer:getabsorigin",
            "subTitle": "",
            "dLine": {
                "3933": "local local_origin = localplayer:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local local_origin = localplayer:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local distance = vector.distance",
            "subTitle": "",
            "dLine": {
                "3934": "local distance = vector.Distance(spy_origin, local_origin)"
            },
            "SLine": {
                "1": "local distance = vector.Distance(spy_origin, local_origin)"
            }
        },
        {
            "Title": "Local str = string.format",
            "subTitle": "",
            "dLine": {
                "3936": "local str = string.format(\"A spy is nearby! - %s[%s]\", v:GetName(), math.floor(distance - 48))"
            },
            "SLine": {
                "1": "local str = string.format(\"A spy is nearby! - %s[%s]\", v:GetName(), math.floor(distance - 48))"
            }
        },
        {
            "Title": "Local text_x, text_y = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "3937": "local text_x, text_y = draw.GetTextSize(str)"
            },
            "SLine": {
                "1": "local text_x, text_y = draw.GetTextSize(str)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "3938": "draw.Text(screen_x / 2 - math.floor(text_x / 2), math.floor(screen_y / 1.9) + 16 * i, str)"
            },
            "SLine": {
                "1": "draw.Text(screen_x / 2 - math.floor(text_x / 2), math.floor(screen_y / 1.9) + 16 * i, str)"
            }
        },
        {
            "Title": "Spymele",
            "subTitle": "",
            "dLine": {
                "3939": "spymele()"
            },
            "SLine": {
                "1": "spymele()"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3940": "callbacks.Register(\"Draw\", \"paint_spy_draw\", paint_spy)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"paint_spy_draw\", paint_spy)"
            }
        },
        {
            "Title": "Local function onstringcmd",
            "subTitle": "",
            "dLine": {
                "3942": "local function onStringCmd( stringCmd )"
            },
            "SLine": {
                "1": "local function onStringCmd( stringCmd )"
            }
        },
        {
            "Title": "If stringcmd:get",
            "subTitle": "",
            "dLine": {
                "3943": "if stringCmd:Get() == \"customthing\" then"
            },
            "SLine": {
                "1": "if stringCmd:Get() == \"customthing\" then"
            }
        },
        {
            "Title": "Stringcmd:set",
            "subTitle": "",
            "dLine": {
                "3944": "stringCmd:Set( \"\" )"
            },
            "SLine": {
                "1": "stringCmd:Set( \"\" )"
            }
        },
        {
            "Title": "Local ingame = clientstate.getclientsignonstate",
            "subTitle": "",
            "dLine": {
                "3945": "local inGame = clientstate.GetClientSignonState()"
            },
            "SLine": {
                "1": "local inGame = clientstate.GetClientSignonState()"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3947": "print( \"You are in game!\" )"
            },
            "SLine": {
                "1": "print( \"You are in game!\" )"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3948": "print( \"You are not in game!\" )"
            },
            "SLine": {
                "1": "print( \"You are not in game!\" )"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "3949": "callbacks.Register( \"SendStringCmd\", \"hook\", onStringCmd )"
            },
            "SLine": {
                "1": "callbacks.Register( \"SendStringCmd\", \"hook\", onStringCmd )"
            }
        },
        {
            "Title": "Local function buttonreleased",
            "subTitle": "",
            "dLine": {
                "3963": "local function ButtonReleased(button)"
            },
            "SLine": {
                "1": "local function ButtonReleased(button)"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3964": "if input.IsButtonDown(button) and button ~= lastButton then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(button) and button ~= lastButton then"
            }
        },
        {
            "Title": "If input.isbuttondown",
            "subTitle": "",
            "dLine": {
                "3967": "if input.IsButtonDown(button) == false and button == lastButton then"
            },
            "SLine": {
                "1": "if input.IsButtonDown(button) == false and button == lastButton then"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3971": "print(\"========== BETTER PLAYER SORTER V2.5 ========== \\n By Dexter\");"
            },
            "SLine": {
                "1": "print(\"========== BETTER PLAYER SORTER V2.5 ========== \\n By Dexter\");"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3972": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01 Lua enabled! \");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01 Lua enabled! \");"
            }
        },
        {
            "Title": "Local function printplayerinfo",
            "subTitle": "",
            "dLine": {
                "3973": "local function printPlayerInfo( cmd )"
            },
            "SLine": {
                "1": "local function printPlayerInfo( cmd )"
            }
        },
        {
            "Title": "If buttonreleased",
            "subTitle": "",
            "dLine": {
                "3974": "if ButtonReleased(triggerKey) then"
            },
            "SLine": {
                "1": "if ButtonReleased(triggerKey) then"
            }
        },
        {
            "Title": "Players[client.getlocalplayerindex",
            "subTitle": "",
            "dLine": {
                "3975": "players[client.GetLocalPlayerIndex()] = nil",
                "4020": "players[client.GetLocalPlayerIndex()] = nil;"
            },
            "SLine": {
                "1": "players[client.GetLocalPlayerIndex()] = nil"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3978": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff1100\".. FirstTag.. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff1100\".. FirstTag.. \"!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3979": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is\".. FirstTag.. \"!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is\".. FirstTag.. \"!\");"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3980": "client.Command( \"say_party \".. name..\" is \".. FirstTag.. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. FirstTag.. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3983": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x070000FF\".. SecondTag.. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x070000FF\".. SecondTag.. \"!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3984": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. SecondTag);"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. SecondTag);"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3985": "client.Command( \"say_party \".. name..\" is \".. SecondTag.. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. SecondTag.. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3987": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff8800\".. ThirdTag.. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff8800\".. ThirdTag.. \"!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3988": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. ThirdTag);"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. ThirdTag);"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3989": "client.Command( \"say_party \".. name..\" is \".. ThirdTag.. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. ThirdTag.. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3991": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07694200\".. FourthTag.. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07694200\".. FourthTag.. \"!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3992": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. FourthTag.. \"!\");"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. FourthTag.. \"!\");"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3993": "client.Command( \"say_party \".. name..\" is \".. FourthTag.. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. FourthTag.. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3995": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00\".. FifthTag.. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00\".. FifthTag.. \"!\");"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "3996": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. FifthTag);"
            },
            "SLine": {
                "1": "print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is \".. FifthTag);"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "3997": "client.Command( \"say_party \".. name..\" is \".. FifthTag.. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. FifthTag.. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "3999": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01 Nobody is marked \");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01 Nobody is marked \");"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "4000": "callbacks.Register( \"CreateMove\", \"printPlayer\", printPlayerInfo )",
                "4029": "callbacks.Register( \"CreateMove\", \"printPlayer\", printPlayerInfo );"
            },
            "SLine": {
                "1": "callbacks.Register( \"CreateMove\", \"printPlayer\", printPlayerInfo )"
            }
        },
        {
            "Title": "Local function buttonpressed",
            "subTitle": "",
            "dLine": {
                "4016": "local function ButtonPressed(button)"
            },
            "SLine": {
                "1": "local function ButtonPressed(button)"
            }
        },
        {
            "Title": "Print",
            "subTitle": "debug print statement",
            "dLine": {
                "4017": "print(\"========== BETTER PLAYER SORTER V3 ========== \\n By Dexter\");"
            },
            "SLine": {
                "1": "print(\"========== BETTER PLAYER SORTER V3 ========== \\n By Dexter\");"
            }
        },
        {
            "Title": "If buttonpressed",
            "subTitle": "",
            "dLine": {
                "4018": "if ButtonPressed(triggerKey) then"
            },
            "SLine": {
                "1": "if ButtonPressed(triggerKey) then"
            }
        },
        {
            "Title": "Local players = entities.findbyclass",
            "subTitle": "",
            "dLine": {
                "4019": "local players = entities.FindByClass(\"CTFPlayer\");"
            },
            "SLine": {
                "1": "local players = entities.FindByClass(\"CTFPlayer\");"
            }
        },
        {
            "Title": "Players[client.getlocalplayerindex",
            "subTitle": "",
            "dLine": {
                "4020": "players[client.GetLocalPlayerIndex()] = nil;"
            },
            "SLine": {
                "1": "players[client.GetLocalPlayerIndex()] = nil;"
            }
        },
        {
            "Title": "If string.len",
            "subTitle": "",
            "dLine": {
                "4023": "if string.len(priorities[priority]) > 0 then"
            },
            "SLine": {
                "1": "if string.len(priorities[priority]) > 0 then"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "4024": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07\".. priorityColors[priority].. priorities[priority].. \"!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07\".. priorityColors[priority].. priorities[priority].. \"!\");"
            }
        },
        {
            "Title": "Client.command",
            "subTitle": "",
            "dLine": {
                "4026": "client.Command( \"say_party \".. name..\" is \".. priorities[priority].. \"!\", true);"
            },
            "SLine": {
                "1": "client.Command( \"say_party \".. name..\" is \".. priorities[priority].. \"!\", true);"
            }
        },
        {
            "Title": "Client.chatprintf",
            "subTitle": "",
            "dLine": {
                "4028": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00Friended!\");"
            },
            "SLine": {
                "1": "client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x071eff00Friended!\");"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "4029": "callbacks.Register( \"CreateMove\", \"printPlayer\", printPlayerInfo );"
            },
            "SLine": {
                "1": "callbacks.Register( \"CreateMove\", \"printPlayer\", printPlayerInfo );"
            }
        },
        {
            "Title": "Ui.defaultfont = draw.createfont",
            "subTitle": "",
            "dLine": {
                "4033": "UI.DefaultFont = draw.CreateFont(\"verdana\", 14, 510)"
            },
            "SLine": {
                "1": "UI.DefaultFont = draw.CreateFont(\"verdana\", 14, 510)"
            }
        },
        {
            "Title": "Function copycolor",
            "subTitle": "",
            "dLine": {
                "4056": "function CopyColor(pColor)"
            },
            "SLine": {
                "1": "function CopyColor(pColor)"
            }
        },
        {
            "Title": "Function copypos",
            "subTitle": "",
            "dLine": {
                "4058": "function CopyPos(pPos)"
            },
            "SLine": {
                "1": "function CopyPos(pPos)"
            }
        },
        {
            "Title": "Function copysize",
            "subTitle": "",
            "dLine": {
                "4060": "function CopySize(pSize)"
            },
            "SLine": {
                "1": "function CopySize(pSize)"
            }
        },
        {
            "Title": "Color = copycolor",
            "subTitle": "",
            "dLine": {
                "4066": "Color = CopyColor(UI.DefaultColor),"
            },
            "SLine": {
                "1": "Color = CopyColor(UI.DefaultColor),"
            }
        },
        {
            "Title": "_color = copycolor",
            "subTitle": "",
            "dLine": {
                "4069": "_color = CopyColor(UI.DefaultColor),"
            },
            "SLine": {
                "1": "_color = CopyColor(UI.DefaultColor),"
            }
        },
        {
            "Title": "Function rect.create",
            "subTitle": "",
            "dLine": {
                "4074": "function Rect.Create(pPosition, pSize, pFilled, pColor, pVisible, pSpeed)"
            },
            "SLine": {
                "1": "function Rect.Create(pPosition, pSize, pFilled, pColor, pVisible, pSpeed)"
            }
        },
        {
            "Title": "Pcolor = pcolor or copycolor",
            "subTitle": "",
            "dLine": {
                "4075": "pColor = pColor or CopyColor(UI.DefaultColor)"
            },
            "SLine": {
                "1": "pColor = pColor or CopyColor(UI.DefaultColor)"
            }
        },
        {
            "Title": "Local irect = setmetatable",
            "subTitle": "",
            "dLine": {
                "4078": "local iRect = setmetatable({}, MetaRect)"
            },
            "SLine": {
                "1": "local iRect = setmetatable({}, MetaRect)"
            }
        },
        {
            "Title": "Irect._color = copycolor",
            "subTitle": "",
            "dLine": {
                "4085": "iRect._color = CopyColor(pColor)"
            },
            "SLine": {
                "1": "iRect._color = CopyColor(pColor)"
            }
        },
        {
            "Title": "Irect._position = copypos",
            "subTitle": "",
            "dLine": {
                "4086": "iRect._position = CopyPos(pPosition)"
            },
            "SLine": {
                "1": "iRect._position = CopyPos(pPosition)"
            }
        },
        {
            "Title": "Irect._size = copysize",
            "subTitle": "",
            "dLine": {
                "4087": "iRect._size = CopySize(pSize)"
            },
            "SLine": {
                "1": "iRect._size = CopySize(pSize)"
            }
        },
        {
            "Title": "Irect:setvisible",
            "subTitle": "",
            "dLine": {
                "4088": "iRect:SetVisible(pVisible)"
            },
            "SLine": {
                "1": "iRect:SetVisible(pVisible)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "4089": "table.insert(UI._rectTable, iRect)"
            },
            "SLine": {
                "1": "table.insert(UI._rectTable, iRect)"
            }
        },
        {
            "Title": "Function rect:setcolor",
            "subTitle": "",
            "dLine": {
                "4092": "function Rect:SetColor(pColor)"
            },
            "SLine": {
                "1": "function Rect:SetColor(pColor)"
            }
        },
        {
            "Title": "Self._color = copycolor",
            "subTitle": "",
            "dLine": {
                "4094": "self._color = CopyColor(pColor)"
            },
            "SLine": {
                "1": "self._color = CopyColor(pColor)"
            }
        },
        {
            "Title": "Function rect:setposition",
            "subTitle": "",
            "dLine": {
                "4095": "function Rect:SetPosition(pPosition)"
            },
            "SLine": {
                "1": "function Rect:SetPosition(pPosition)"
            }
        },
        {
            "Title": "Self._position = copypos",
            "subTitle": "",
            "dLine": {
                "4097": "self._position = CopyPos(pPosition)"
            },
            "SLine": {
                "1": "self._position = CopyPos(pPosition)"
            }
        },
        {
            "Title": "Function rect:setsize",
            "subTitle": "",
            "dLine": {
                "4098": "function Rect:SetSize(pSize)"
            },
            "SLine": {
                "1": "function Rect:SetSize(pSize)"
            }
        },
        {
            "Title": "Self._size = copysize",
            "subTitle": "",
            "dLine": {
                "4100": "self._size = CopySize(pSize)"
            },
            "SLine": {
                "1": "self._size = CopySize(pSize)"
            }
        },
        {
            "Title": "Function rect:setvisible",
            "subTitle": "",
            "dLine": {
                "4101": "function Rect:SetVisible(pState)"
            },
            "SLine": {
                "1": "function Rect:SetVisible(pState)"
            }
        },
        {
            "Title": "Function rect:setcoordinated",
            "subTitle": "",
            "dLine": {
                "4106": "function Rect:SetCoordinated(pX, pY, pX2, pY2)"
            },
            "SLine": {
                "1": "function Rect:SetCoordinated(pX, pY, pX2, pY2)"
            }
        },
        {
            "Title": "Function rect:fadein",
            "subTitle": "",
            "dLine": {
                "4110": "function Rect:FadeIn(pSpeed)"
            },
            "SLine": {
                "1": "function Rect:FadeIn(pSpeed)"
            }
        },
        {
            "Title": "Function rect:fadeout",
            "subTitle": "",
            "dLine": {
                "4114": "function Rect:FadeOut(pSpeed)"
            },
            "SLine": {
                "1": "function Rect:FadeOut(pSpeed)"
            }
        },
        {
            "Title": "Function rect:transform",
            "subTitle": "",
            "dLine": {
                "4117": "function Rect:Transform(pPosition, pSize, pSpeed)"
            },
            "SLine": {
                "1": "function Rect:Transform(pPosition, pSize, pSpeed)"
            }
        },
        {
            "Title": "Function rect:cancel",
            "subTitle": "",
            "dLine": {
                "4120": "function Rect:Cancel()"
            },
            "SLine": {
                "1": "function Rect:Cancel()"
            }
        },
        {
            "Title": "Function line.create",
            "subTitle": "",
            "dLine": {
                "4128": "function Line.Create(pPoints, pColor, pVisible, pSpeed)"
            },
            "SLine": {
                "1": "function Line.Create(pPoints, pColor, pVisible, pSpeed)"
            }
        },
        {
            "Title": "Local iline = setmetatable",
            "subTitle": "",
            "dLine": {
                "4130": "local iLine = setmetatable({}, MetaLine)"
            },
            "SLine": {
                "1": "local iLine = setmetatable({}, MetaLine)"
            }
        },
        {
            "Title": "Iline._color = copycolor",
            "subTitle": "",
            "dLine": {
                "4135": "iLine._color = CopyColor(pColor)"
            },
            "SLine": {
                "1": "iLine._color = CopyColor(pColor)"
            }
        },
        {
            "Title": "Iline:setvisible",
            "subTitle": "",
            "dLine": {
                "4136": "iLine:SetVisible(pVisible)"
            },
            "SLine": {
                "1": "iLine:SetVisible(pVisible)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "4137": "table.insert(UI._lineTable, iLine)"
            },
            "SLine": {
                "1": "table.insert(UI._lineTable, iLine)"
            }
        },
        {
            "Title": "Function line:setcolor",
            "subTitle": "",
            "dLine": {
                "4139": "function Line:SetColor(pColor)"
            },
            "SLine": {
                "1": "function Line:SetColor(pColor)"
            }
        },
        {
            "Title": "Function line:setvisible",
            "subTitle": "",
            "dLine": {
                "4140": "function Line:SetVisible(pState)"
            },
            "SLine": {
                "1": "function Line:SetVisible(pState)"
            }
        },
        {
            "Title": "Function line:fadein",
            "subTitle": "",
            "dLine": {
                "4141": "function Line:FadeIn(pSpeed)"
            },
            "SLine": {
                "1": "function Line:FadeIn(pSpeed)"
            }
        },
        {
            "Title": "Function line:fadeout",
            "subTitle": "",
            "dLine": {
                "4142": "function Line:FadeOut(pSpeed)"
            },
            "SLine": {
                "1": "function Line:FadeOut(pSpeed)"
            }
        },
        {
            "Title": "Function line:cancel",
            "subTitle": "",
            "dLine": {
                "4143": "function Line:Cancel()"
            },
            "SLine": {
                "1": "function Line:Cancel()"
            }
        },
        {
            "Title": "Function text.create",
            "subTitle": "",
            "dLine": {
                "4151": "function Text.Create(pPosition, pText, pColor, pShadow, pAlign, pFont, pVisible, pSpeed)"
            },
            "SLine": {
                "1": "function Text.Create(pPosition, pText, pColor, pShadow, pAlign, pFont, pVisible, pSpeed)"
            }
        },
        {
            "Title": "Local itext = setmetatable",
            "subTitle": "",
            "dLine": {
                "4155": "local iText = setmetatable({}, MetaText)"
            },
            "SLine": {
                "1": "local iText = setmetatable({}, MetaText)"
            }
        },
        {
            "Title": "Itext._color = copycolor",
            "subTitle": "",
            "dLine": {
                "4164": "iText._color = CopyColor(pColor)"
            },
            "SLine": {
                "1": "iText._color = CopyColor(pColor)"
            }
        },
        {
            "Title": "Itext._position = copypos",
            "subTitle": "",
            "dLine": {
                "4165": "iText._position = CopyPos(pPosition)"
            },
            "SLine": {
                "1": "iText._position = CopyPos(pPosition)"
            }
        },
        {
            "Title": "Itext:setvisible",
            "subTitle": "",
            "dLine": {
                "4166": "iText:SetVisible(pVisible)"
            },
            "SLine": {
                "1": "iText:SetVisible(pVisible)"
            }
        },
        {
            "Title": "Table.insert",
            "subTitle": "",
            "dLine": {
                "4167": "table.insert(UI._textTable, iText)"
            },
            "SLine": {
                "1": "table.insert(UI._textTable, iText)"
            }
        },
        {
            "Title": "Function text:setcolor",
            "subTitle": "",
            "dLine": {
                "4169": "function Text:SetColor(pColor)"
            },
            "SLine": {
                "1": "function Text:SetColor(pColor)"
            }
        },
        {
            "Title": "Function text:setposition",
            "subTitle": "",
            "dLine": {
                "4170": "function Text:SetPosition(pPosition)"
            },
            "SLine": {
                "1": "function Text:SetPosition(pPosition)"
            }
        },
        {
            "Title": "Function text:setvisible",
            "subTitle": "",
            "dLine": {
                "4171": "function Text:SetVisible(pState)"
            },
            "SLine": {
                "1": "function Text:SetVisible(pState)"
            }
        },
        {
            "Title": "Function text:fadein",
            "subTitle": "",
            "dLine": {
                "4172": "function Text:FadeIn(pSpeed)"
            },
            "SLine": {
                "1": "function Text:FadeIn(pSpeed)"
            }
        },
        {
            "Title": "Function text:fadeout",
            "subTitle": "",
            "dLine": {
                "4173": "function Text:FadeOut(pSpeed)"
            },
            "SLine": {
                "1": "function Text:FadeOut(pSpeed)"
            }
        },
        {
            "Title": "Function text:cancel",
            "subTitle": "",
            "dLine": {
                "4174": "function Text:Cancel()"
            },
            "SLine": {
                "1": "function Text:Cancel()"
            }
        },
        {
            "Title": "Function text:transform",
            "subTitle": "",
            "dLine": {
                "4175": "function Text:Transform(pPosition, pSpeed)"
            },
            "SLine": {
                "1": "function Text:Transform(pPosition, pSpeed)"
            }
        },
        {
            "Title": "Function ui._animate",
            "subTitle": "",
            "dLine": {
                "4176": "function UI._Animate(self)"
            },
            "SLine": {
                "1": "function UI._Animate(self)"
            }
        },
        {
            "Title": "Self.color.a = math.min",
            "subTitle": "",
            "dLine": {
                "4178": "self.Color.A = math.min(self.Color.A + globals.FrameTime() * self.Speed, self._color.A)"
            },
            "SLine": {
                "1": "self.Color.A = math.min(self.Color.A + globals.FrameTime() * self.Speed, self._color.A)"
            }
        },
        {
            "Title": "Self.color.a = math.max",
            "subTitle": "",
            "dLine": {
                "4180": "self.Color.A = math.max(self.Color.A - globals.FrameTime() * self.Speed, 0)"
            },
            "SLine": {
                "1": "self.Color.A = math.max(self.Color.A - globals.FrameTime() * self.Speed, 0)"
            }
        },
        {
            "Title": "Self.position.x = math.min",
            "subTitle": "",
            "dLine": {
                "4184": "self.Position.X = math.min(self.Position.X + globals.FrameTime() * self.Speed, self._position.X)"
            },
            "SLine": {
                "1": "self.Position.X = math.min(self.Position.X + globals.FrameTime() * self.Speed, self._position.X)"
            }
        },
        {
            "Title": "Self.position.y = math.min",
            "subTitle": "",
            "dLine": {
                "4185": "self.Position.Y = math.min(self.Position.Y + globals.FrameTime() * self.Speed, self._position.Y)"
            },
            "SLine": {
                "1": "self.Position.Y = math.min(self.Position.Y + globals.FrameTime() * self.Speed, self._position.Y)"
            }
        },
        {
            "Title": "Self.position.x = math.max",
            "subTitle": "",
            "dLine": {
                "4187": "self.Position.X = math.max(self.Position.X - globals.FrameTime() * self.Speed, self._position.X)"
            },
            "SLine": {
                "1": "self.Position.X = math.max(self.Position.X - globals.FrameTime() * self.Speed, self._position.X)"
            }
        },
        {
            "Title": "Self.position.y = math.max",
            "subTitle": "",
            "dLine": {
                "4188": "self.Position.Y = math.max(self.Position.Y - globals.FrameTime() * self.Speed, self._position.Y)"
            },
            "SLine": {
                "1": "self.Position.Y = math.max(self.Position.Y - globals.FrameTime() * self.Speed, self._position.Y)"
            }
        },
        {
            "Title": "Self.size.width = math.min",
            "subTitle": "",
            "dLine": {
                "4191": "self.Size.Width = math.min(self.Size.Width + globals.FrameTime() * self.Speed, self._size.Width)"
            },
            "SLine": {
                "1": "self.Size.Width = math.min(self.Size.Width + globals.FrameTime() * self.Speed, self._size.Width)"
            }
        },
        {
            "Title": "Self.size.height = math.min",
            "subTitle": "",
            "dLine": {
                "4192": "self.Size.Height = math.min(self.Size.Height + globals.FrameTime() * self.Speed, self._size.Height)"
            },
            "SLine": {
                "1": "self.Size.Height = math.min(self.Size.Height + globals.FrameTime() * self.Speed, self._size.Height)"
            }
        },
        {
            "Title": "Self.size.width = math.max",
            "subTitle": "",
            "dLine": {
                "4194": "self.Size.Width = math.max(self.Size.Width - globals.FrameTime() * self.Speed, self._size.Width)"
            },
            "SLine": {
                "1": "self.Size.Width = math.max(self.Size.Width - globals.FrameTime() * self.Speed, self._size.Width)"
            }
        },
        {
            "Title": "Self.size.height = math.max",
            "subTitle": "",
            "dLine": {
                "4195": "self.Size.Height = math.max(self.Size.Height - globals.FrameTime() * self.Speed, self._size.Height)"
            },
            "SLine": {
                "1": "self.Size.Height = math.max(self.Size.Height - globals.FrameTime() * self.Speed, self._size.Height)"
            }
        },
        {
            "Title": "Function ui.draw",
            "subTitle": "",
            "dLine": {
                "4196": "function UI.Draw()"
            },
            "SLine": {
                "1": "function UI.Draw()"
            }
        },
        {
            "Title": "For k, r in pairs",
            "subTitle": "",
            "dLine": {
                "4198": "for k, r in pairs(UI._rectTable) do"
            },
            "SLine": {
                "1": "for k, r in pairs(UI._rectTable) do"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "4200": "draw.Color(r.Color.R, r.Color.G, r.Color.B,  math.floor(r.Color.A))"
            },
            "SLine": {
                "1": "draw.Color(r.Color.R, r.Color.G, r.Color.B,  math.floor(r.Color.A))"
            }
        },
        {
            "Title": "Draw.filledrect",
            "subTitle": "",
            "dLine": {
                "4202": "draw.FilledRect(math.floor(r.Position.X), math.floor(r.Position.Y), math.floor(r.Position.X + r.Size.Width), math.floor(r.Position.Y + r.Size.Height))"
            },
            "SLine": {
                "1": "draw.FilledRect(math.floor(r.Position.X), math.floor(r.Position.Y), math.floor(r.Position.X + r.Size.Width), math.floor(r.Position.Y + r.Size.Height))"
            }
        },
        {
            "Title": "Draw.outlinedrect",
            "subTitle": "",
            "dLine": {
                "4203": "draw.OutlinedRect(math.floor(r.Position.X), math.floor(r.Position.Y), math.floor(r.Position.X + r.Size.Width), math.floor(r.Position.Y + r.Size.Height))"
            },
            "SLine": {
                "1": "draw.OutlinedRect(math.floor(r.Position.X), math.floor(r.Position.Y), math.floor(r.Position.X + r.Size.Width), math.floor(r.Position.Y + r.Size.Height))"
            }
        },
        {
            "Title": "Ui._animate",
            "subTitle": "",
            "dLine": {
                "4204": "UI._Animate(r)"
            },
            "SLine": {
                "1": "UI._Animate(r)"
            }
        },
        {
            "Title": "For k, l in pairs",
            "subTitle": "",
            "dLine": {
                "4205": "for k, l in pairs(UI._lineTable) do"
            },
            "SLine": {
                "1": "for k, l in pairs(UI._lineTable) do"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "4207": "draw.Color(l.Color.R, l.Color.G, l.Color.B,  math.floor(l.Color.A))"
            },
            "SLine": {
                "1": "draw.Color(l.Color.R, l.Color.G, l.Color.B,  math.floor(l.Color.A))"
            }
        },
        {
            "Title": "Draw.line",
            "subTitle": "",
            "dLine": {
                "4208": "draw.Line(math.floor(l.Points.X), math.floor(l.Points.Y), math.floor(l.Points.X2), math.floor(l.Points.Y2))"
            },
            "SLine": {
                "1": "draw.Line(math.floor(l.Points.X), math.floor(l.Points.Y), math.floor(l.Points.X2), math.floor(l.Points.Y2))"
            }
        },
        {
            "Title": "Ui._animate",
            "subTitle": "",
            "dLine": {
                "4209": "UI._Animate(l)"
            },
            "SLine": {
                "1": "UI._Animate(l)"
            }
        },
        {
            "Title": "For k, t in pairs",
            "subTitle": "",
            "dLine": {
                "4210": "for k, t in pairs(UI._textTable) do"
            },
            "SLine": {
                "1": "for k, t in pairs(UI._textTable) do"
            }
        },
        {
            "Title": "Draw.setfont",
            "subTitle": "",
            "dLine": {
                "4212": "draw.SetFont(t.Font)"
            },
            "SLine": {
                "1": "draw.SetFont(t.Font)"
            }
        },
        {
            "Title": "Draw.color",
            "subTitle": "",
            "dLine": {
                "4213": "draw.Color(t.Color.R, t.Color.G, t.Color.B, math.floor(t.Color.A))"
            },
            "SLine": {
                "1": "draw.Color(t.Color.R, t.Color.G, t.Color.B, math.floor(t.Color.A))"
            }
        },
        {
            "Title": "Local sizex, sizey = draw.gettextsize",
            "subTitle": "",
            "dLine": {
                "4215": "local sizeX, sizeY = draw.GetTextSize(t.Text)"
            },
            "SLine": {
                "1": "local sizeX, sizeY = draw.GetTextSize(t.Text)"
            }
        },
        {
            "Title": "Draw.textshadow",
            "subTitle": "",
            "dLine": {
                "4221": "draw.TextShadow(math.floor(xPos), math.floor(t.Position.Y), t.Text)"
            },
            "SLine": {
                "1": "draw.TextShadow(math.floor(xPos), math.floor(t.Position.Y), t.Text)"
            }
        },
        {
            "Title": "Draw.text",
            "subTitle": "",
            "dLine": {
                "4222": "draw.Text(math.floor(xPos), math.floor(t.Position.Y), t.Text)"
            },
            "SLine": {
                "1": "draw.Text(math.floor(xPos), math.floor(t.Position.Y), t.Text)"
            }
        },
        {
            "Title": "Ui._animate",
            "subTitle": "",
            "dLine": {
                "4223": "UI._Animate(t)"
            },
            "SLine": {
                "1": "UI._Animate(t)"
            }
        },
        {
            "Title": "Function ui.addrect",
            "subTitle": "",
            "dLine": {
                "4224": "function UI.AddRect(pX, pY, pWidth, pHeight, pFilled, pColor, pVisible)"
            },
            "SLine": {
                "1": "function UI.AddRect(pX, pY, pWidth, pHeight, pFilled, pColor, pVisible)"
            }
        },
        {
            "Title": "Return rect.create",
            "subTitle": "",
            "dLine": {
                "4225": "return Rect.Create({ X = pX, Y = pY }, { Width = pWidth, Height = pHeight }, pFilled, pColor, pVisible)"
            },
            "SLine": {
                "1": "return Rect.Create({ X = pX, Y = pY }, { Width = pWidth, Height = pHeight }, pFilled, pColor, pVisible)"
            }
        },
        {
            "Title": "Function ui.removerect",
            "subTitle": "",
            "dLine": {
                "4226": "function UI.RemoveRect(pElement)"
            },
            "SLine": {
                "1": "function UI.RemoveRect(pElement)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "4227": "table.remove(UI._rectTable, pElement)"
            },
            "SLine": {
                "1": "table.remove(UI._rectTable, pElement)"
            }
        },
        {
            "Title": "Function ui.addline",
            "subTitle": "",
            "dLine": {
                "4228": "function UI.AddLine(pX, pY, pX2, pY2, pColor, pVisible)"
            },
            "SLine": {
                "1": "function UI.AddLine(pX, pY, pX2, pY2, pColor, pVisible)"
            }
        },
        {
            "Title": "Return line.create",
            "subTitle": "",
            "dLine": {
                "4229": "return Line.Create({ X = pX, Y = pY, X2 = pX2, Y2 = pY2 }, pColor, pVisible)"
            },
            "SLine": {
                "1": "return Line.Create({ X = pX, Y = pY, X2 = pX2, Y2 = pY2 }, pColor, pVisible)"
            }
        },
        {
            "Title": "Function ui.removeline",
            "subTitle": "",
            "dLine": {
                "4230": "function UI.RemoveLine(pElement)"
            },
            "SLine": {
                "1": "function UI.RemoveLine(pElement)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "4231": "table.remove(UI._lineTable, pElement)"
            },
            "SLine": {
                "1": "table.remove(UI._lineTable, pElement)"
            }
        },
        {
            "Title": "Function ui.addtext",
            "subTitle": "",
            "dLine": {
                "4232": "function UI.AddText(pX, pY, pText, pColor, pShadow, pAlign, pFont, pVisible)"
            },
            "SLine": {
                "1": "function UI.AddText(pX, pY, pText, pColor, pShadow, pAlign, pFont, pVisible)"
            }
        },
        {
            "Title": "Return text.create",
            "subTitle": "",
            "dLine": {
                "4233": "return Text.Create({ X = pX, Y = pY }, pText, pColor, pShadow, pAlign, pFont, pVisible)"
            },
            "SLine": {
                "1": "return Text.Create({ X = pX, Y = pY }, pText, pColor, pShadow, pAlign, pFont, pVisible)"
            }
        },
        {
            "Title": "Function ui.removetext",
            "subTitle": "",
            "dLine": {
                "4234": "function UI.RemoveText(pElement)"
            },
            "SLine": {
                "1": "function UI.RemoveText(pElement)"
            }
        },
        {
            "Title": "Table.remove",
            "subTitle": "",
            "dLine": {
                "4235": "table.remove(UI._textTable, pElement)"
            },
            "SLine": {
                "1": "table.remove(UI._textTable, pElement)"
            }
        },
        {
            "Title": "Callbacks.unregister",
            "subTitle": "",
            "dLine": {
                "4236": "callbacks.Unregister(\"Draw\", \"Draw_UI\");"
            },
            "SLine": {
                "1": "callbacks.Unregister(\"Draw\", \"Draw_UI\");"
            }
        },
        {
            "Title": "Callbacks.register",
            "subTitle": "",
            "dLine": {
                "4237": "callbacks.Register(\"Draw\", \"Draw_UI\", UI.Draw)"
            },
            "SLine": {
                "1": "callbacks.Register(\"Draw\", \"Draw_UI\", UI.Draw)"
            }
        },
        {
            "Title": "Function utils.id3toid64",
            "subTitle": "",
            "dLine": {
                "4240": "function Utils.ID3toID64(pID3)"
            },
            "SLine": {
                "1": "function Utils.ID3toID64(pID3)"
            }
        },
        {
            "Title": "Local id = string.sub",
            "subTitle": "",
            "dLine": {
                "4241": "local id = string.sub(pID3, 6, #pID3 - 1)"
            },
            "SLine": {
                "1": "local id = string.sub(pID3, 6, #pID3 - 1)"
            }
        },
        {
            "Title": "Return tonumber",
            "subTitle": "",
            "dLine": {
                "4242": "return tonumber(id) + 0x110000100000000"
            },
            "SLine": {
                "1": "return tonumber(id) + 0x110000100000000"
            }
        },
        {
            "Title": "Function utils.id64toid3",
            "subTitle": "",
            "dLine": {
                "4243": "function Utils.ID64toID3(pID64)"
            },
            "SLine": {
                "1": "function Utils.ID64toID3(pID64)"
            }
        },
        {
            "Title": "Return \"[u:1:\" .. ",
            "subTitle": "",
            "dLine": {
                "4244": "return \"[U:1:\" .. (tonumber(pID64) ^ 0x110000100000000) .. \"]\""
            },
            "SLine": {
                "1": "return \"[U:1:\" .. (tonumber(pID64) ^ 0x110000100000000) .. \"]\""
            }
        },
        {
            "Title": "Function utils.copytable",
            "subTitle": "",
            "dLine": {
                "4245": "function Utils.CopyTable(pTable)"
            },
            "SLine": {
                "1": "function Utils.CopyTable(pTable)"
            }
        },
        {
            "Title": "For k, v in pairs",
            "subTitle": "",
            "dLine": {
                "4247": "for k, v in pairs(pTable) do"
            },
            "SLine": {
                "1": "for k, v in pairs(pTable) do"
            }
        },
        {
            "Title": "If type",
            "subTitle": "",
            "dLine": {
                "4248": "if type(v) == \"table\" then"
            },
            "SLine": {
                "1": "if type(v) == \"table\" then"
            }
        },
        {
            "Title": "Newtable[k] = utils.copytable",
            "subTitle": "",
            "dLine": {
                "4249": "newTable[k] = Utils.CopyTable(v)"
            },
            "SLine": {
                "1": "newTable[k] = Utils.CopyTable(v)"
            }
        },
        {
            "Title": "Function utils.eulertovector",
            "subTitle": "",
            "dLine": {
                "4252": "function Utils.EulerToVector(pEuler)"
            },
            "SLine": {
                "1": "function Utils.EulerToVector(pEuler)"
            }
        },
        {
            "Title": "Local pitch, yaw, roll = peuler:unpack",
            "subTitle": "",
            "dLine": {
                "4253": "local pitch, yaw, roll = pEuler:Unpack()"
            },
            "SLine": {
                "1": "local pitch, yaw, roll = pEuler:Unpack()"
            }
        },
        {
            "Title": "Local x = math.cos",
            "subTitle": "",
            "dLine": {
                "4254": "local x = math.cos(yaw) * math.cos(pitch)"
            },
            "SLine": {
                "1": "local x = math.cos(yaw) * math.cos(pitch)"
            }
        },
        {
            "Title": "Local y = math.sin",
            "subTitle": "",
            "dLine": {
                "4255": "local y = math.sin(yaw) * math.cos(pitch)"
            },
            "SLine": {
                "1": "local y = math.sin(yaw) * math.cos(pitch)"
            }
        },
        {
            "Title": "Local z = math.sin",
            "subTitle": "",
            "dLine": {
                "4256": "local z = math.sin(pitch)"
            },
            "SLine": {
                "1": "local z = math.sin(pitch)"
            }
        },
        {
            "Title": "Return vector3",
            "subTitle": "",
            "dLine": {
                "4257": "return Vector3(x, y, z)"
            },
            "SLine": {
                "1": "return Vector3(x, y, z)"
            }
        },
        {
            "Title": "Function utils.sanitize",
            "subTitle": "",
            "dLine": {
                "4258": "function Utils.Sanitize(pString)"
            },
            "SLine": {
                "1": "function Utils.Sanitize(pString)"
            }
        },
        {
            "Title": "Pstring:gsub",
            "subTitle": "",
            "dLine": {
                "4259": "pString:gsub(\"\\\"\", \"'\")"
            },
            "SLine": {
                "1": "pString:gsub(\"\\\"\", \"'\")"
            }
        },
        {
            "Title": "Function utils.findelementbyid",
            "subTitle": "",
            "dLine": {
                "4261": "function Utils.FindElementByID(pTable, pID)"
            },
            "SLine": {
                "1": "function Utils.FindElementByID(pTable, pID)"
            }
        },
        {
            "Title": "Function utils.hextorgb",
            "subTitle": "",
            "dLine": {
                "4264": "function Utils.HexToRGB(pHex)"
            },
            "SLine": {
                "1": "function Utils.HexToRGB(pHex)"
            }
        },
        {
            "Title": "Function utils.scalerect",
            "subTitle": "",
            "dLine": {
                "4266": "function Utils.ScaleRect(pRect, pWidth, pHeight)"
            },
            "SLine": {
                "1": "function Utils.ScaleRect(pRect, pWidth, pHeight)"
            }
        },
        {
            "Title": "Local x, y, w, h = prect:unpack",
            "subTitle": "",
            "dLine": {
                "4267": "local x, y, w, h = pRect:Unpack()"
            },
            "SLine": {
                "1": "local x, y, w, h = pRect:Unpack()"
            }
        },
        {
            "Title": "Function utils.readfile",
            "subTitle": "",
            "dLine": {
                "4275": "function Utils.ReadFile(path)"
            },
            "SLine": {
                "1": "function Utils.ReadFile(path)"
            }
        },
        {
            "Title": "Local menu = menulib.create",
            "subTitle": "",
            "dLine": {
                "4276": "local menu = MenuLib.Create(\"visible_only_esp\", MenuFlags.AutoSize)"
            },
            "SLine": {
                "1": "local menu = MenuLib.Create(\"visible_only_esp\", MenuFlags.AutoSize)"
            }
        },
        {
            "Title": "Local visible_only = menu:addcomponent",
            "subTitle": "",
            "dLine": {
                "4277": "local Visible_Only = menu:AddComponent(MenuLib.Checkbox(\"Visible Only\", true))"
            },
            "SLine": {
                "1": "local Visible_Only = menu:AddComponent(MenuLib.Checkbox(\"Visible Only\", true))"
            }
        },
        {
            "Title": "Local defaultsetting = gui.getvalue",
            "subTitle": "",
            "dLine": {
                "4278": "local defaultSetting = gui.GetValue(\"minimal priority\")"
            },
            "SLine": {
                "1": "local defaultSetting = gui.GetValue(\"minimal priority\")"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "4280": "gui.SetValue(\"minimal priority\", 1)"
            },
            "SLine": {
                "1": "gui.SetValue(\"minimal priority\", 1)"
            }
        },
        {
            "Title": "Local function is_visible",
            "subTitle": "",
            "dLine": {
                "4282": "local function is_visible(target, from, to)"
            },
            "SLine": {
                "1": "local function is_visible(target, from, to)"
            }
        },
        {
            "Title": "Local trace = engine.traceline",
            "subTitle": "",
            "dLine": {
                "4283": "local trace = engine.TraceLine(from, to, MASK_SHOT)"
            },
            "SLine": {
                "1": "local trace = engine.TraceLine(from, to, MASK_SHOT)"
            }
        },
        {
            "Title": "Local function get_hitbox_position",
            "subTitle": "",
            "dLine": {
                "4285": "local function get_hitbox_position(entity, hitbox)"
            },
            "SLine": {
                "1": "local function get_hitbox_position(entity, hitbox)"
            }
        },
        {
            "Title": "Local hitbox_table = entity:gethitboxes",
            "subTitle": "",
            "dLine": {
                "4286": "local hitbox_table = entity:GetHitboxes()[hitbox]"
            },
            "SLine": {
                "1": "local hitbox_table = entity:GetHitboxes()[hitbox]"
            }
        },
        {
            "Title": "If visible_only:getvalue",
            "subTitle": "",
            "dLine": {
                "4289": "if Visible_Only:GetValue() == false then"
            },
            "SLine": {
                "1": "if Visible_Only:GetValue() == false then"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "4290": "gui.SetValue(\"minimal priority\", defaultSetting)"
            },
            "SLine": {
                "1": "gui.SetValue(\"minimal priority\", defaultSetting)"
            }
        },
        {
            "Title": "Local local_player = entities.getlocalplayer",
            "subTitle": "",
            "dLine": {
                "4291": "local local_player = entities.GetLocalPlayer()"
            },
            "SLine": {
                "1": "local local_player = entities.GetLocalPlayer()"
            }
        },
        {
            "Title": "If not local_player or not local_player:isalive",
            "subTitle": "",
            "dLine": {
                "4292": "if not local_player or not local_player:IsAlive() then return end"
            },
            "SLine": {
                "1": "if not local_player or not local_player:IsAlive() then return end"
            }
        },
        {
            "Title": "For i, player in ipairs",
            "subTitle": "",
            "dLine": {
                "4293": "for i, player in ipairs(players) do"
            },
            "SLine": {
                "1": "for i, player in ipairs(players) do"
            }
        },
        {
            "Title": "If playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "4294": "if playerlist.GetPriority(player) >= 2 then goto continue end"
            },
            "SLine": {
                "1": "if playerlist.GetPriority(player) >= 2 then goto continue end"
            }
        },
        {
            "Title": "If not player:isvalid",
            "subTitle": "",
            "dLine": {
                "4295": "if not player:IsValid() or not player:IsAlive() or player:GetTeamNumber() == local_player:GetTeamNumber() or playerlist.GetPriority(player) >= 2 then"
            },
            "SLine": {
                "1": "if not player:IsValid() or not player:IsAlive() or player:GetTeamNumber() == local_player:GetTeamNumber() or playerlist.GetPriority(player) >= 2 then"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "4296": "playerlist.SetPriority(player, 0)"
            },
            "SLine": {
                "1": "playerlist.SetPriority(player, 0)"
            }
        },
        {
            "Title": "Local priority = playerlist.getpriority",
            "subTitle": "",
            "dLine": {
                "4297": "local priority = playerlist.GetPriority(player)"
            },
            "SLine": {
                "1": "local priority = playerlist.GetPriority(player)"
            }
        },
        {
            "Title": "Local local_pos = local_player:getabsorigin",
            "subTitle": "",
            "dLine": {
                "4298": "local local_pos = local_player:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local local_pos = local_player:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local local_eye_pos = local_pos + local_player:getpropvector",
            "subTitle": "",
            "dLine": {
                "4299": "local local_eye_pos = local_pos + local_player:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            },
            "SLine": {
                "1": "local local_eye_pos = local_pos + local_player:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")"
            }
        },
        {
            "Title": "Local player_pos = player:getabsorigin",
            "subTitle": "",
            "dLine": {
                "4300": "local player_pos = player:GetAbsOrigin()"
            },
            "SLine": {
                "1": "local player_pos = player:GetAbsOrigin()"
            }
        },
        {
            "Title": "Local player_eye_pos = get_hitbox_position",
            "subTitle": "",
            "dLine": {
                "4301": "local player_eye_pos = get_hitbox_position(player, hitboxes.HEAD)"
            },
            "SLine": {
                "1": "local player_eye_pos = get_hitbox_position(player, hitboxes.HEAD)"
            }
        },
        {
            "Title": "Local player_screen_pos = client.worldtoscreen",
            "subTitle": "",
            "dLine": {
                "4302": "local player_screen_pos = client.WorldToScreen(player:GetAbsOrigin() + player:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\"))"
            },
            "SLine": {
                "1": "local player_screen_pos = client.WorldToScreen(player:GetAbsOrigin() + player:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\"))"
            }
        },
        {
            "Title": "Local screen_w, screen_h = client.getscreensize",
            "subTitle": "",
            "dLine": {
                "4303": "local screen_w, screen_h = client.GetScreenSize()"
            },
            "SLine": {
                "1": "local screen_w, screen_h = client.GetScreenSize()"
            }
        },
        {
            "Title": "If is_visible",
            "subTitle": "",
            "dLine": {
                "4305": "if is_visible(player, local_eye_pos, player_eye_pos) then"
            },
            "SLine": {
                "1": "if is_visible(player, local_eye_pos, player_eye_pos) then"
            }
        },
        {
            "Title": "Playerlist.setpriority",
            "subTitle": "",
            "dLine": {
                "4309": "playerlist.SetPriority(player, priority)"
            },
            "SLine": {
                "1": "playerlist.SetPriority(player, priority)"
            }
        },
        {
            "Title": "Gui.setvalue",
            "subTitle": "",
            "dLine": {
                "4310": "gui.SetValue(\"minimal priority\", \"off\")"
            },
            "SLine": {
                "1": "gui.SetValue(\"minimal priority\", \"off\")"
            }
        }
    ]
}
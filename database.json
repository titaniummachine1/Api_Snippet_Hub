{
    "tables": [
        {
            "Title": "ButtonPressed",
            "subTitle": "local function Butto",
            "dLine": {
                "48": "local function ButtonPressed(button) --",
                "71": "if ButtonPressed(triggerKey) then"
            },
            "SLine": {
                "1": "function ButtonPressed(button) --\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "2": "function ButtonPressed(button) --\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end"
            }
        },
        {
            "Title": "ButtonReleased",
            "subTitle": "local function Butto",
            "dLine": {
                "56": "local function ButtonReleased(button)",
                "75": "if ButtonReleased(options.MenuKey) then",
                "147": "if ButtonReleased(KEY_LEFT) then",
                "153": "elseif ButtonReleased(KEY_RIGHT) then",
                "168": "if ButtonReleased(KEY_UP) then",
                "173": "elseif ButtonReleased(KEY_DOWN) then"
            },
            "SLine": {
                "1": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "2": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "3": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "4": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "5": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "6": "function ButtonReleased(button)\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end"
            }
        },
        {
            "Title": "ButtonReleased",
            "subTitle": "local function Butto",
            "dLine": {
                "22": "local function ButtonReleased(button) --",
                "45": "if ButtonReleased(triggerKey) then"
            },
            "SLine": {
                "1": "function ButtonReleased(button) --\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end",
                "2": "function ButtonReleased(button) --\n    if input.IsButtonDown(button) and button ~= lastButton then\n        lastButton = button\n        anyButtonDown = true\n    end"
            }
        },
        {
            "Title": "CalculateProjectilePath",
            "subTitle": "function CalculatePr",
            "dLine": {
                "31": "function CalculateProjectilePath(startPos, endPos, velocity)",
                "100": "local path = CalculateProjectilePath(source, endPos, FIXED_VELOCITY)"
            },
            "SLine": {
                "1": "function CalculateProjectilePath(startPos, endPos, velocity)\n    local distance = (end",
                "2": "function CalculateProjectilePath(startPos, endPos, velocity)\n    local distance = (end"
            }
        },
        {
            "Title": "CopyColor",
            "subTitle": "function CopyColor(p",
            "dLine": {
                "39": "function CopyColor(pColor)",
                "58": "Color = CopyColor(UI.DefaultColor),",
                "62": "_color = CopyColor(UI.DefaultColor), -- Color to restore after animations",
                "71": "pColor = pColor or CopyColor(UI.DefaultColor)",
                "84": "iRect._color = CopyColor(pColor)",
                "96": "self._color = CopyColor(pColor)",
                "156": "Color = CopyColor(UI.DefaultColor),",
                "159": "_color = CopyColor(UI.DefaultColor), -- Color to restore after animations",
                "166": "pColor = pColor or CopyColor(UI.DefaultColor)",
                "177": "iLine._color = CopyColor(pColor)",
                "187": "self._color = CopyColor(pColor)",
                "225": "Color = CopyColor(UI.DefaultColor),",
                "231": "_color = CopyColor(UI.DefaultColor), -- Color to restore after animations",
                "239": "pColor = pColor or CopyColor(UI.DefaultColor)",
                "257": "iText._color = CopyColor(pColor)",
                "268": "self._color = CopyColor(pColor)"
            },
            "SLine": {
                "1": "function CopyColor(pColor)\n    return { R = pColor.R, G = pColor.G, B = pColor.B, A = pColor.A }\nend",
                "2": "Color = CopyColor(UI.DefaultColor),",
                "3": "_color = CopyColor(UI.DefaultColor), -- Color to restore after animations",
                "4": "pColor = pColor or CopyColor(UI.DefaultColor)",
                "5": "iRect._color = CopyColor(pColor)",
                "6": "self._color = CopyColor(pColor)",
                "7": "iLine._color = CopyColor(pColor)",
                "8": "iText._color = CopyColor(pColor)"
            }
        },
        {
            "Title": "CreateMove",
            "subTitle": "local function Creat",
            "dLine": {
                "14": "local function CreateMove(pCmd)",
                "65": "callbacks.Unregister(\"CreateMove\", \"CreateMove_Freecam\")",
                "68": "callbacks.Register(\"CreateMove\", \"CreateMove_Freecam\", CreateMove)"
            },
            "SLine": {
                "1": "function CreateMove(pCmd)\n    local pLocal = entities.GetLocalPlayer()\n    if input.IsButtonDown(options.Key) then\n        if not bFreecamActive then\n            vFreecamPos = pLocal:GetAbsOrigin()\n            bFreecamActive = true\n        end",
                "2": "callbacks.Unregister(\"CreateMove\", \"CreateMove_Freecam\")",
                "3": "callbacks.Register(\"CreateMove\", \"CreateMove_Freecam\", CreateMove)"
            }
        },
        {
            "Title": "CriticalHealth",
            "subTitle": "local function Criti",
            "dLine": {
                "4": "local function CriticalHealth()",
                "24": "callbacks.Register( \"Draw\", \"CriticalHealth\", CriticalHealth)"
            },
            "SLine": {
                "1": "function CriticalHealth()\n\n    if gamecoordinator.IsConnectedToMatchServer() then\n\n        local players = entities.FindByClass(\"CTFPlayer\")\n\n        for i, p in ipairs( players ) do\n            \n            Ratio = p:GetHealth() / p:GetMaxHealth()\n            \n            if (p:IsAlive()) and (Ratio <= procent) then\n                playerlist.SetPriority( p, 1 )\n            else\n                playerlist.SetPriority( p, 0 )\n            end",
                "2": "callbacks.Register( \"Draw\", \"CriticalHealth\", CriticalHealth)"
            }
        },
        {
            "Title": "DT_Enabled",
            "subTitle": "local function DT_En",
            "dLine": {
                "20": "local function DT_Enabled()",
                "28": "if not DT_Enabled() then return end"
            },
            "SLine": {
                "1": "function DT_Enabled()\n    local dtMode = gui.GetValue(\"double tap (beta)\")\n    local dashKey = gui.GetValue(\"dash move key\")\n\n    return dtMode ~= \"off\" or dashKey ~= 0\nend",
                "2": "function DT_Enabled()\n    local dtMode = gui.GetValue(\"double tap (beta)\")\n    local dashKey = gui.GetValue(\"dash move key\")\n\n    return dtMode ~= \"off\" or dashKey ~= 0\nend"
            }
        },
        {
            "Title": "DrawModel",
            "subTitle": "local function DrawM",
            "dLine": {
                "70": "local function DrawModel(dmContext)",
                "95": "callbacks.Unregister(\"DrawModel\", \"AC_DrawModel\")",
                "96": "callbacks.Register(\"DrawModel\", \"AC_DrawModel\", DrawModel)"
            },
            "SLine": {
                "1": "function DrawModel(dmContext)\n    local entity = dmContext:GetEntity()\n    local pLocal = entities.GetLocalPlayer()\n\n    if not (entity and entity:IsValid() and entity:IsPlayer() and pLocal and enabled:GetValue()) then return end",
                "2": "callbacks.Unregister(\"DrawModel\", \"AC_DrawModel\")",
                "3": "callbacks.Register(\"DrawModel\", \"AC_DrawModel\", DrawModel)"
            }
        },
        {
            "Title": "FireGameEvent",
            "subTitle": "local function FireG",
            "dLine": {
                "1": "local function FireGameEvent(event)",
                "27": "callbacks.Unregister(\"FireGameEvent\", \"CatbotMark_FireGameEvent\");",
                "28": "callbacks.Register(\"FireGameEvent\", \"CatbotMark_FireGameEvent\", FireGameEvent);"
            },
            "SLine": {
                "1": "function FireGameEvent(event)\n    if(event:GetName( ) ~= \"achievement_earned\") then\n        return\n    end",
                "2": "callbacks.Unregister(\"FireGameEvent\", \"CatbotMark_FireGameEvent\");",
                "3": "callbacks.Register(\"FireGameEvent\", \"CatbotMark_FireGameEvent\", FireGameEvent);"
            }
        },
        {
            "Title": "GameData",
            "subTitle": "function GameData()",
            "dLine": {
                "22": "function GameData()",
                "127": "gameData = GameData()  -- Update gameData with latest information"
            },
            "SLine": {
                "1": "function GameData()\n    local data = {}\n\n    -- Get local player data\n    data.pLocal = entities.GetLocalPlayer()     -- Immediately set \"pLocal\" to the local player (entities.GetLocalPlayer)\n    data.pWeapon = data.pLocal:GetPropEntity(\"m_hActiveWeapon\")\n    data.swingrange = data.pWeapon:GetSwingRange() -- + 11.17\n    data.tickRate = 66 -- game tick rate\n    --get pLocal eye level and set vector at our eye level to ensure we cehck distance from eyes\n    local viewOffset = data.pLocal:GetPropVector(\"localdata\", \"m_vecViewOffset[0]\")\n    local adjustedHeight = data.pLocal:GetAbsOrigin() + viewOffset\n    data.viewheight = (adjustedHeight - data.pLocal:GetAbsOrigin()):Length()\n        -- eye level \n        local Vheight = Vector3(0, 0, data.viewheight)\n        data.pLocalOrigin = (data.pLocal:GetAbsOrigin() + Vheight)\n    --get local class\n    data.pLocalClass = data.pLocal:GetPropInt(\"m_iClass\")\n\n\n    return data\nend",
                "2": "gameData = GameData()  -- Update gameData with latest information"
            }
        },
        {
            "Title": "GetBestTarget",
            "subTitle": "local function GetBe",
            "dLine": {
                "103": "local function GetBestTarget(me, pLocalOrigin, pLocal)",
                "526": "local currentTarget1 = GetBestTarget(me, pLocalOrigin) --GetClosestTarget(me, me:GetAbsOrigin()) -- Get the best target",
                "535": "local AimbotTarget = GetBestTarget(me)"
            },
            "SLine": {
                "1": "function GetBestTarget(me, pLocalOrigin, pLocal)\n    -- Find all players in the game\n    players = entities.FindByClass(\"CTFPlayer\")\n\n    -- Initialize variables\n    local target = nil\n    local lastFov = math.huge\n    local closestPlayer = nil\n    local closestDistance = math.huge\n    local options = {\n        AimPos = 1,\n        AimFov = 360\n    }\n    \n    -- Loop through all players\n    for _, entity in pairs(players) do\n        -- Skip the local player\n        if entity == pLocal then goto continue end",
                "2": "function GetBestTarget(me, pLocalOrigin, pLocal)\n    -- Find all players in the game\n    players = entities.FindByClass(\"CTFPlayer\")\n\n    -- Initialize variables\n    local target = nil\n    local lastFov = math.huge\n    local closestPlayer = nil\n    local closestDistance = math.huge\n    local options = {\n        AimPos = 1,\n        AimFov = 360\n    }\n    \n    -- Loop through all players\n    for _, entity in pairs(players) do\n        -- Skip the local player\n        if entity == pLocal then goto continue end",
                "3": "function GetBestTarget(me, pLocalOrigin, pLocal)\n    -- Find all players in the game\n    players = entities.FindByClass(\"CTFPlayer\")\n\n    -- Initialize variables\n    local target = nil\n    local lastFov = math.huge\n    local closestPlayer = nil\n    local closestDistance = math.huge\n    local options = {\n        AimPos = 1,\n        AimFov = 360\n    }\n    \n    -- Loop through all players\n    for _, entity in pairs(players) do\n        -- Skip the local player\n        if entity == pLocal then goto continue end"
            }
        },
        {
            "Title": "GetCurrentKey",
            "subTitle": "local function GetCu",
            "dLine": {
                "43": "local function GetCurrentKey()",
                "405": "local key = GetKeyName(GetCurrentKey(), false)",
                "473": "local currentKey = GetCurrentKey()"
            },
            "SLine": {
                "1": "function GetCurrentKey()\n    for i = 0, 106 do\n        if input.IsButtonDown(i) then\n            return i\n        end",
                "2": "function GetKeyName(key, specialKeys)\n    if key == nil then return nil end",
                "3": "function GetCurrentKey()\n    for i = 0, 106 do\n        if input.IsButtonDown(i) then\n            return i\n        end"
            }
        },
        {
            "Title": "GetFileList",
            "subTitle": "local function GetFi",
            "dLine": {
                "19": "local function GetFileList(path)",
                "38": "local fileList = GetFileList(currentPath)"
            },
            "SLine": {
                "1": "function GetFileList(path)\n    local files = {}\n\n    pcall(function()\n        filesystem.EnumerateDirectory(path .. \"*\", function (filename, attributes)\n            if filename == \".\" or filename == \"..\" then return end",
                "2": "function GetFileList(path)\n    local files = {}\n\n    pcall(function()\n        filesystem.EnumerateDirectory(path .. \"*\", function (filename, attributes)\n            if filename == \".\" or filename == \"..\" then return end"
            }
        },
        {
            "Title": "GetRandomMessage",
            "subTitle": "local function GetRa",
            "dLine": {
                "21": "local function GetRandomMessage()",
                "26": "local chatMessage = GetRandomMessage() .. \"\\n\" .. pVictim .. \":\\n\\n\" .."
            },
            "SLine": {
                "1": "function GetRandomMessage()\n    return randMsg[math.random(#randMsg)]\nend",
                "2": "function GetRandomMessage()\n    return randMsg[math.random(#randMsg)]\nend"
            }
        },
        {
            "Title": "Load",
            "subTitle": "Load()",
            "dLine": {
                "14": "Load()",
                "15": "print(\"Loaded \", textbox1)",
                "18": "function Load()",
                "19": "LoadScript(textbox)",
                "20": "print(\"Loaded \", textbox1)"
            },
            "SLine": {
                "1": "function Load()\n    LoadScript(textbox)\n    print(\"Loaded \", textbox1)\nend",
                "2": "function Load()\n    LoadScript(textbox)\n    print(\"Loaded \", textbox1)\nend"
            }
        },
        {
            "Title": "OnButtonPress",
            "subTitle": "function OnButtonPre",
            "dLine": {
                "14": "function OnButtonPress()",
                "17": "menu:AddComponent(MenuLib.Button(\"Press Me!\", OnButtonPress, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "function OnButtonPress() \n    print(\"Button pressed!\")\nend"
            }
        },
        {
            "Title": "OnButtonPress",
            "subTitle": "function OnButtonPre",
            "dLine": {
                "60": "function OnButtonPress()",
                "63": "menu:AddComponent(MenuLib.Button(\"Press Me!\", OnButtonPress, ItemFlags.FullWidth))"
            },
            "SLine": {
                "1": "function OnButtonPress() \n    print(\"Button pressed!\")\nend"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "26": "local function OnCreateMove()",
                "85": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "function OnCreateMove()\n    -- check if the \"Enable\" button is checked\n    if Options.Enabled:GetValue() then\n        -- get the local player\n        local medic = entities.GetLocalPlayer()\n\n        -- get the players on the team\n        local players = entities.FindByClass(\"CTFPlayer\")\n\n        -- initialize a variable to store the target player\n        local target = nil\n\n        -- loop through all the players on the team\n        for i, player in ipairs(players) do\n            -- check if the player is a teammate and is damaged\n            if player:GetTeamNumber() == medic:GetTeamNumber() and player:GetHealth() < Options.targethealth:GetValue() then\n                -- set the target player\n                target = player\n                break\n            end",
                "2": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "11": "local function OnCreateMove(userCmd)",
                "38": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            },
            "SLine": {
                "1": "function OnCreateMove(userCmd)\n  local pLocal = entities.GetLocalPlayer()\n  if not pLocal then return end",
                "2": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "10": "local function OnCreateMove(userCmd)",
                "40": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            },
            "SLine": {
                "1": "function OnCreateMove(userCmd)\n  local pLocal = entities.GetLocalPlayer()\n  if not pLocal then return end"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "7": "local function OnCreateMove(userCmd)",
                "34": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            },
            "SLine": {
                "1": "function OnCreateMove(userCmd)\n    --[[pLocal = entities.GetLocalPlayer()     -- Immediately set \"pLocal\" to the local player (entities.GetLocalPlayer)   \n        if pLocal:InCond(1) == true and client.GetConVar(\"cyoa_pda_open\") == 0 then\n            client.Command(\"cyoa_pda_open\", 1)\n        elseif client.GetConVar(\"cyoa_pda_open\") then\n            client.Command(\"cyoa_pda_open\", 0)\n        end"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "40": "local function OnCreateMove(pCmd)",
                "68": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            },
            "SLine": {
                "1": "function OnCreateMove(pCmd)\n   \n    \n    ::continue::\nend"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "25": "local function OnCreateMove(pCmd)",
                "46": "callbacks.Register(\"CreateMove\", \"MCT_CreateMove\", OnCreateMove)             -- Register the \"CreateMove\" callback"
            },
            "SLine": {
                "1": "function OnCreateMove(pCmd)\n\nend"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "19": "local function OnCreateMove(pCmd)",
                "54": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "function OnCreateMove(pCmd)\n    local players     = entities.FindByClass(\"CTFPlayer\")  -- Create a table of all players in the game\n    local LocalPlayer = entities.GetLocalPlayer()\n    local is_melee    = pWeapon:IsMeleeWeapon()\n    if not Options.Enabled:GetValue() then return end"
            }
        },
        {
            "Title": "OnCreateMove",
            "subTitle": "local function OnCre",
            "dLine": {
                "23": "local function OnCreateMove()",
                "57": "callbacks.Register(\"CreateMove\", \"PR_CreateMove\", OnCreateMove)"
            },
            "SLine": {
                "1": "function OnCreateMove()\n    if not Options.Enabled:GetValue() then return end"
            }
        },
        {
            "Title": "OnDraw",
            "subTitle": "local function OnDra",
            "dLine": {
                "14": "local function OnDraw()",
                "50": "callbacks.Register(\"Draw\", \"CI_Draw\", OnDraw)"
            },
            "SLine": {
                "1": "function OnDraw()\n    draw.Color(255, 255, 255, 255)\n    draw.SetFont(Options.Font)\n\n    local pLocal = entities.GetLocalPlayer()\n    if not pLocal then return end",
                "2": "callbacks.Register(\"Draw\", \"CI_Draw\", OnDraw)"
            }
        },
        {
            "Title": "OnGround",
            "subTitle": "local function OnGro",
            "dLine": {
                "42": "local function OnGround(player)",
                "136": "if OnGround(pLocal) then",
                "145": "if mFreeMove:GetValue() == false and HasDirection == false and OnGround(pLocal) then"
            },
            "SLine": {
                "1": "function OnGround(player)\n    local pFlags = player:GetPropInt(\"m_fFlags\")\n    return (pFlags & FL_ONGROUND) == 1\nend",
                "2": "function OnGround(player)\n    local pFlags = player:GetPropInt(\"m_fFlags\")\n    return (pFlags & FL_ONGROUND) == 1\nend",
                "3": "if mFreeMove:GetValue() == false and HasDirection == false and OnGround(pLocal) then"
            }
        },
        {
            "Title": "OnGround",
            "subTitle": "local function OnGro",
            "dLine": {
                "41": "local function OnGround(player)",
                "135": "if OnGround(pLocal) then",
                "144": "if mFreeMove:GetValue() == false and HasDirection == false and OnGround(pLocal) then"
            },
            "SLine": {
                "1": "function OnGround(player)\n    local pFlags = player:GetPropInt(\"m_fFlags\")\n    return (pFlags & FL_ONGROUND) == 1\nend",
                "2": "function OnGround(player)\n    local pFlags = player:GetPropInt(\"m_fFlags\")\n    return (pFlags & FL_ONGROUND) == 1\nend"
            }
        },
        {
            "Title": "OnUserCmd",
            "subTitle": "local function OnUse",
            "dLine": {
                "19": "local function OnUserCmd(userCmd)",
                "37": "callbacks.Register(\"CreateMove\", \"LNX_IF_UserCmd\", OnUserCmd)"
            },
            "SLine": {
                "1": "function OnUserCmd(userCmd)\n    local localPlayer = WPlayer.GetLocal()\n    if not localPlayer:IsAlive()\n        or not key:Down()\n        or engine.IsGameUIVisible()\n        then return end",
                "2": "callbacks.Register(\"CreateMove\", \"LNX_IF_UserCmd\", OnUserCmd)"
            }
        },
        {
            "Title": "RGBRainbow",
            "subTitle": "local function RGBRa",
            "dLine": {
                "17": "local function RGBRainbow(frequency)",
                "46": "local r, g, b = RGBRainbow(2.5)"
            },
            "SLine": {
                "1": "function RGBRainbow(frequency)\n\n    local curtime = globals.CurTime() \n    local r,g,b\n    r = math.floor(math.sin(curtime * frequency + 0) * 127 + 128)\n    g = math.floor(math.sin(curtime * frequency + 2) * 127 + 128)\n    b = math.floor(math.sin(curtime * frequency + 4) * 127 + 128)\n    \n    return r, g, b\nend",
                "2": "function RGBRainbow(frequency)\n\n    local curtime = globals.CurTime() \n    local r,g,b\n    r = math.floor(math.sin(curtime * frequency + 0) * 127 + 128)\n    g = math.floor(math.sin(curtime * frequency + 2) * 127 + 128)\n    b = math.floor(math.sin(curtime * frequency + 4) * 127 + 128)\n    \n    return r, g, b\nend"
            }
        },
        {
            "Title": "RGBRainbow",
            "subTitle": "function RGBRainbow(",
            "dLine": {
                "21": "function RGBRainbow(offset)",
                "47": "local r, g, b = RGBRainbow(i)"
            },
            "SLine": {
                "1": "function RGBRainbow(offset)\n    local r,g,b\n    r = math.floor(math.sin(offset + 0) * 127 + 128)\n    g = math.floor(math.sin(offset + 2) * 127 + 128)\n    b = math.floor(math.sin(offset + 4) * 127 + 128)\n  \n    return r, g, b\nend",
                "2": "function RGBRainbow(offset)\n    local r,g,b\n    r = math.floor(math.sin(offset + 0) * 127 + 128)\n    g = math.floor(math.sin(offset + 2) * 127 + 128)\n    b = math.floor(math.sin(offset + 4) * 127 + 128)\n  \n    return r, g, b\nend"
            }
        },
        {
            "Title": "RGBRainbow",
            "subTitle": "function RGBRainbow(",
            "dLine": {
                "6": "function RGBRainbow(frequency)",
                "45": "local r, g, b = RGBRainbow(1)"
            },
            "SLine": {
                "1": "function RGBRainbow(frequency)\n  local curtime = globals.CurTime() \n  local r,g,b\n  r = math.floor(math.sin(curtime * frequency + 0) * 127 + 128)\n  g = math.floor(math.sin(curtime * frequency + 2) * 127 + 128)\n  b = math.floor(math.sin(curtime * frequency + 4) * 127 + 128)\n\n  return r, g, b\nend",
                "2": "function RGBRainbow(frequency)\n  local curtime = globals.CurTime() \n  local r,g,b\n  r = math.floor(math.sin(curtime * frequency + 0) * 127 + 128)\n  g = math.floor(math.sin(curtime * frequency + 2) * 127 + 128)\n  b = math.floor(math.sin(curtime * frequency + 4) * 127 + 128)\n\n  return r, g, b\nend"
            }
        },
        {
            "Title": "ReadFile",
            "subTitle": "local function ReadF",
            "dLine": {
                "14": "local function ReadFile(path)",
                "22": "local playerList = ReadFile(Options.File)"
            },
            "SLine": {
                "1": "function ReadFile(path)\n    local file = io.open(path, \"rb\") -- r read mode and b binary mode\n    if not file then return nil end",
                "2": "function ReadFile(path)\n    local file = io.open(path, \"rb\") -- r read mode and b binary mode\n    if not file then return nil end"
            }
        },
        {
            "Title": "ReadFile",
            "subTitle": "local function ReadF",
            "dLine": {
                "12": "local function ReadFile(path)",
                "20": "local playerList = ReadFile(Options.File)"
            },
            "SLine": {
                "1": "function ReadFile(path)\n    local file = io.open(path, \"rb\") -- r read mode and b binary mode\n    if not file then return nil end",
                "2": "function ReadFile(path)\n    local file = io.open(path, \"rb\") -- r read mode and b binary mode\n    if not file then return nil end"
            }
        },
        {
            "Title": "ResetTempOptions",
            "subTitle": "local function Reset",
            "dLine": {
                "126": "local function ResetTempOptions()                                  -- Reset \"TempOptions\"",
                "159": "ResetTempOptions()                               -- Immediately reset \"TempOptions\""
            },
            "SLine": {
                "1": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end",
                "2": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end"
            }
        },
        {
            "Title": "ResetTempOptions",
            "subTitle": "local function Reset",
            "dLine": {
                "111": "local function ResetTempOptions()                                  -- Reset \"TempOptions\"",
                "143": "ResetTempOptions()                               -- Immediately reset \"TempOptions\""
            },
            "SLine": {
                "1": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end",
                "2": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end"
            }
        },
        {
            "Title": "ResetTempOptions",
            "subTitle": "local function Reset",
            "dLine": {
                "94": "local function ResetTempOptions()                                  -- Reset \"TempOptions\"",
                "126": "ResetTempOptions()                               -- Immediately reset \"TempOptions\""
            },
            "SLine": {
                "1": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end",
                "2": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end"
            }
        },
        {
            "Title": "ResetTempOptions",
            "subTitle": "local function Reset",
            "dLine": {
                "112": "local function ResetTempOptions()                                  -- Reset \"TempOptions\"",
                "144": "ResetTempOptions()                               -- Immediately reset \"TempOptions\""
            },
            "SLine": {
                "1": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end",
                "2": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end"
            }
        },
        {
            "Title": "ResetTempOptions",
            "subTitle": "local function Reset",
            "dLine": {
                "112": "local function ResetTempOptions()                                  -- Reset \"TempOptions\"",
                "144": "ResetTempOptions()                               -- Immediately reset \"TempOptions\""
            },
            "SLine": {
                "1": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end",
                "2": "function ResetTempOptions()                                  -- Reset \"TempOptions\"\n    for k, v in pairs(TempOptions) do                              -- Loop through all options in \"TempOptions\"\n        TempOptions[k].WasUsed = false                             -- Set \"WasUsed\" to false for each option (so we can check if it was used)\n    end"
            }
        },
        {
            "Title": "SearchFeatures",
            "subTitle": "SearchFeatures()",
            "dLine": {
                "14": "SearchFeatures()",
                "20": "local searchButton = MenuLib.Button(\"Search\", SearchFeatures)",
                "39": "function SearchFeatures()",
                "77": "-- Call SearchFeatures function once to show all features initially",
                "78": "SearchFeatures()",
                "85": "SearchFeatures()"
            },
            "SLine": {
                "1": "function SearchFeatures()\n    results = {} -- Clear the results table\n\n    -- Search for features matching the query\n    for section, features in pairs(mainTable) do\n        for i, feature in ipairs(features) do\n            if string.match(feature:lower(), searchQuery:lower()) then\n                table.insert(results, { feature, section })\n            end",
                "2": "function SearchFeatures()\n    results = {} -- Clear the results table\n\n    -- Search for features matching the query\n    for section, features in pairs(mainTable) do\n        for i, feature in ipairs(features) do\n            if string.match(feature:lower(), searchQuery:lower()) then\n                table.insert(results, { feature, section })\n            end",
                "3": "function SearchFeatures()\n    results = {} -- Clear the results table\n\n    -- Search for features matching the query\n    for section, features in pairs(mainTable) do\n        for i, feature in ipairs(features) do\n            if string.match(feature:lower(), searchQuery:lower()) then\n                table.insert(results, { feature, section })\n            end",
                "4": "function SearchFeatures()\n    results = {} -- Clear the results table\n\n    -- Search for features matching the query\n    for section, features in pairs(mainTable) do\n        for i, feature in ipairs(features) do\n            if string.match(feature:lower(), searchQuery:lower()) then\n                table.insert(results, { feature, section })\n            end"
            }
        },
        {
            "Title": "ServerAllowRandomCrit",
            "subTitle": "local function Serve",
            "dLine": {
                "177": "local function ServerAllowRandomCrit(tf_weapon_criticals, tf_weapon_criticals_melee, is_melee)",
                "225": "if ServerAllowRandomCrit(tf_weapon_criticals, tf_weapon_criticals_melee, is_melee) == false or"
            },
            "SLine": {
                "1": "function ServerAllowRandomCrit(tf_weapon_criticals, tf_weapon_criticals_melee, is_melee)\n    local crits = tf_weapon_criticals == 1\n    if is_melee == false then\n        return crits\n    end",
                "2": "if ServerAllowRandomCrit(tf_weapon_criticals, tf_weapon_criticals_melee, is_melee) == false or"
            }
        },
        {
            "Title": "ShouldThink",
            "subTitle": "local function Shoul",
            "dLine": {
                "3": "local function ShouldThink(localPlayer)",
                "24": "shouldThink = ShouldThink(localPlayer);"
            },
            "SLine": {
                "1": "function ShouldThink(localPlayer)\n    local playerResources = entities.GetPlayerResources();\n    local allPlayerClasses = playerResources:GetPropDataTableInt(\"m_iPlayerClass\");\n    \n    local currentPlayerClass = allPlayerClasses[localPlayer:GetIndex() + 1];\n    local playingSpy = currentPlayerClass == TF2_Spy;\n\n    return playingSpy;\nend",
                "2": "function ShouldThink(localPlayer)\n    local playerResources = entities.GetPlayerResources();\n    local allPlayerClasses = playerResources:GetPropDataTableInt(\"m_iPlayerClass\");\n    \n    local currentPlayerClass = allPlayerClasses[localPlayer:GetIndex() + 1];\n    local playingSpy = currentPlayerClass == TF2_Spy;\n\n    return playingSpy;\nend"
            }
        },
        {
            "Title": "StrikePlayer",
            "subTitle": "local function Strik",
            "dLine": {
                "15": "local function StrikePlayer(index, reason)",
                "36": "StrikePlayer(player:GetIndex(), \"Packet was choked\")",
                "48": "StrikePlayer(player:GetIndex(), \"Invalid Pitch\")",
                "64": "StrikePlayer(player:GetIndex(), \"Invalid Angle Delta\")"
            },
            "SLine": {
                "1": "function StrikePlayer(index, reason)\n    if playerStrikes[index] == nil then\n        playerStrikes[index] = 1\n    elseif playerStrikes[index] >= 0 then\n        playerStrikes[index] = playerStrikes[index] + 1\n        client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)\n    end",
                "2": "function StrikePlayer(index, reason)\n    if playerStrikes[index] == nil then\n        playerStrikes[index] = 1\n    elseif playerStrikes[index] >= 0 then\n        playerStrikes[index] = playerStrikes[index] + 1\n        client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)\n    end",
                "3": "function StrikePlayer(index, reason)\n    if playerStrikes[index] == nil then\n        playerStrikes[index] = 1\n    elseif playerStrikes[index] >= 0 then\n        playerStrikes[index] = playerStrikes[index] + 1\n        client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)\n    end",
                "4": "function StrikePlayer(index, reason)\n    if playerStrikes[index] == nil then\n        playerStrikes[index] = 1\n    elseif playerStrikes[index] >= 0 then\n        playerStrikes[index] = playerStrikes[index] + 1\n        client.ChatPrintf(\"\\x04[CD] \\x02Player\\x05 \" .. index .. \" \\x02striked for:\\x05 \" .. reason)\n    end"
            }
        },
        {
            "Title": "TargetPositionPrediction",
            "subTitle": "function TargetPosit",
            "dLine": {
                "65": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)",
                "163": "targetFuture = TargetPositionPrediction(targetOrigin, tickRate, travelTime, targetEntity)",
                "208": "--currentTarget = TargetPositionPrediction(currentTarget.pos, lasttarget.pos, mtime, currentTarget)"
            },
            "SLine": {
                "1": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)\n    -- If the last known position of the target is nil, return nil.\n    if targetLastPos == nil then\n        return nil\n    end",
                "2": "targetFuture = TargetPositionPrediction(targetOrigin, tickRate, travelTime, targetEntity)",
                "3": "--currentTarget = TargetPositionPrediction(currentTarget.pos, lasttarget.pos, mtime, currentTarget)"
            }
        },
        {
            "Title": "TargetPositionPrediction",
            "subTitle": "function TargetPosit",
            "dLine": {
                "46": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)",
                "97": "targetFuture = TargetPositionPrediction(targetOrigin, tickRate, travelTime, targetEntity)",
                "543": "vPlayerFuture = TargetPositionPrediction(vPlayerOrigin, tickRate, time, closestPlayer)",
                "544": "pLocalFuture =  TargetPositionPrediction(pLocalOrigin, tickRate, time, pLocal)"
            },
            "SLine": {
                "1": "function TargetPositionPrediction(targetLastPos, tickRate, time, targetEntity)\nif targetLastPos == nil then\nreturn nil\nend",
                "2": "vPlayerFuture = TargetPositionPrediction(vPlayerOrigin, tickRate, time, closestPlayer)",
                "3": "pLocalFuture =  TargetPositionPrediction(pLocalOrigin, tickRate, time, pLocal)"
            }
        },
        {
            "Title": "UnloadLib",
            "subTitle": "function UnloadLib()",
            "dLine": {
                "71": "function UnloadLib()"
            },
            "SLine": {
                "1": "function UnloadLib()\n    lnxLib.Utils.UnloadPackages(\"lnxLib\")\n    lnxLib.Utils.UnloadPackages(\"LNXlib\")\nend"
            }
        },
        {
            "Title": "UnpackColor",
            "subTitle": "local function Unpac",
            "dLine": {
                "91": "local function UnpackColor(color)",
                "185": "draw.Color(UnpackColor(Colors.ItemActive))",
                "187": "draw.Color(UnpackColor(Colors.ItemHover))",
                "189": "draw.Color(UnpackColor(Colors.Item))",
                "255": "draw.Color(UnpackColor(Colors.WindowBorder))",
                "293": "draw.Color(UnpackColor(Colors.FrameBorder))",
                "341": "draw.Color(UnpackColor(Colors.WindowBorder))",
                "413": "draw.Color(UnpackColor(Colors.Border))",
                "419": "draw.Color(UnpackColor(Colors.Highlight))",
                "424": "draw.Color(UnpackColor(Colors.Text))",
                "451": "draw.Color(UnpackColor(Colors.Border))",
                "476": "draw.Color(UnpackColor(Colors.Border))",
                "504": "draw.Color(UnpackColor(Colors.Highlight))",
                "509": "draw.Color(UnpackColor(Colors.Border))",
                "514": "draw.Color(UnpackColor(Colors.Text))",
                "546": "draw.Color(UnpackColor(Colors.Item))",
                "550": "draw.Color(UnpackColor(Colors.Highlight))",
                "555": "draw.Color(UnpackColor(Colors.Border))"
            },
            "SLine": {
                "1": "function UnpackColor(color)\n    return color[1], color[2], color[3], color[4] or 255\nend"
            }
        },
        {
            "Title": "UpdateLocals",
            "subTitle": "function UpdateLocal",
            "dLine": {
                "62": "function UpdateLocals()",
                "246": "--pLocalOrigin = UpdateLocals()"
            },
            "SLine": {
                "1": "function UpdateLocals()\n    --get pLocal eye level and set vector at our eye level to ensure we cehck distance from eyes\n    local viewOffset = vector3(0, 0, 75)\n    local adjustedHeight = pLocal:GetAbsOrigin() + viewOffset\n    viewheight = (adjustedHeight - pLocal:GetAbsOrigin()):Length()\n        -- eye level \n        local Vheight = Vector3(0, 0, viewheight)\n        pLocalOrigin = (pLocal:GetAbsOrigin() + Vheight)\n    return viewheight\nend",
                "2": "--pLocalOrigin = UpdateLocals()"
            }
        },
        {
            "Title": "damage",
            "subTitle": "local function damag",
            "dLine": {
                "8": "local function damage(event)",
                "16": "local damage = event:GetInt(\"damageamount\")",
                "36": "callbacks.Register(\"FireGameEvent\", \"damageDraw\", damage)"
            },
            "SLine": {
                "1": "function damage(event)\n\n    if (event:GetName() == 'player_hurt' ) then  -- Checks for player_hurt event\n\n        local localPlayer = entities.GetLocalPlayer();\n        victim = entities.GetByUserID(event:GetInt(\"userid\"))\n        local health = event:GetInt(\"health\")\n        local attacker = entities.GetByUserID(event:GetInt(\"attacker\"))\n        local damage = event:GetInt(\"damageamount\")\n        local weaponid = event:GetInt(\"weaponid\")\n       \n        if (attacker == nil or localPlayer:GetIndex() ~= attacker:GetIndex()) or victim:GetIndex() == localPlayer:GetIndex() then\n            return \n             end",
                "2": "callbacks.Register(\"FireGameEvent\", \"damageDraw\", damage)"
            }
        },
        {
            "Title": "doDraw",
            "subTitle": "local myfont = draw.",
            "dLine": {
                "31": "local myfont = draw.CreateFont( \"Verdana\", 16, 800 ) -- Create a font for doDraw",
                "35": "local function doDraw()",
                "118": "callbacks.Register(\"Draw\", \"MCT_Draw\", doDraw)                               -- Register the \"Draw\" callback"
            },
            "SLine": {
                "1": "function doDraw()\n    if mEnable:GetValue() == false then return end",
                "2": "callbacks.Register(\"Draw\", \"MCT_Draw\", doDraw)                               -- Register the \"Draw\" callback"
            }
        },
        {
            "Title": "doDraw",
            "subTitle": "local myfont = draw.",
            "dLine": {
                "31": "local myfont = draw.CreateFont( \"Verdana\", 16, 800 ) -- Create a font for doDraw",
                "35": "local function doDraw()",
                "156": "callbacks.Register(\"Draw\", \"MCT_Draw\", doDraw)                               -- Register the \"Draw\" callback"
            },
            "SLine": {
                "1": "function doDraw()\n    if mEnable:GetValue() == false then return end"
            }
        },
        {
            "Title": "doDraw",
            "subTitle": "local function doDra",
            "dLine": {
                "3": "local function doDraw()",
                "40": "callbacks.Register(\"Draw\", \"mydraw\", doDraw)"
            },
            "SLine": {
                "1": "function doDraw()\n    if engine.Con_IsVisible() or engine.IsGameUIVisible() then\n        return\n    end",
                "2": "callbacks.Register(\"Draw\", \"mydraw\", doDraw)"
            }
        },
        {
            "Title": "event_hook",
            "subTitle": "local function event",
            "dLine": {
                "14": "local function event_hook(ev)",
                "67": "callbacks.Register(\"FireGameEvent\", \"unique_event_hook\", event_hook)"
            },
            "SLine": {
                "1": "function event_hook(ev)\n    if ev:GetName() ~= \"player_healed\" then return end",
                "2": "callbacks.Register(\"FireGameEvent\", \"unique_event_hook\", event_hook)"
            }
        },
        {
            "Title": "event_hook",
            "subTitle": "local function event",
            "dLine": {
                "12": "local function event_hook(ev)",
                "66": "callbacks.Register(\"FireGameEvent\", \"unique_event_hook\", event_hook)"
            },
            "SLine": {
                "1": "function event_hook(ev)\n    if ev:GetName() ~= \"player_hurt\" then return end"
            }
        },
        {
            "Title": "get_class_entity",
            "subTitle": "local function get_c",
            "dLine": {
                "8": "local function get_class_entity(class_int, enemy_only)",
                "28": "local spies = get_class_entity(8, true)",
                "52": "local function get_class_entity(class_int, enemy_only)",
                "71": "local spies = get_class_entity(8, true)"
            },
            "SLine": {
                "1": "function get_class_entity(class_int, enemy_only)\n    local class_ents = {}\n    local players = entities.FindByClass(\"CTFPlayer\")\n    local localplayer = entities.GetLocalPlayer()\n    for _, v in pairs(players) do\n        local ent_classes = v:GetPropInt(\"m_iClass\")\n        local team_num = v:GetPropInt(\"m_iTeamNum\")\n        if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end",
                "2": "function get_class_entity(class_int, enemy_only)\n    local class_ents = {}\n    local players = entities.FindByClass(\"CTFPlayer\")\n    local localplayer = entities.GetLocalPlayer()\n    for _, v in pairs(players) do\n        local ent_classes = v:GetPropInt(\"m_iClass\")\n        local team_num = v:GetPropInt(\"m_iTeamNum\")\n        if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end",
                "3": "function get_class_entity(class_int, enemy_only)\n    local class_ents = {}\n    local players = entities.FindByClass(\"CTFPlayer\")\n    local localplayer = entities.GetLocalPlayer()\n    for _, v in pairs(players) do\n        local ent_classes = v:GetPropInt(\"m_iClass\")\n        local team_num = v:GetPropInt(\"m_iTeamNum\")\n        if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end",
                "4": "function get_class_entity(class_int, enemy_only)\n    local class_ents = {}\n    local players = entities.FindByClass(\"CTFPlayer\")\n    local localplayer = entities.GetLocalPlayer()\n    for _, v in pairs(players) do\n        local ent_classes = v:GetPropInt(\"m_iClass\")\n        local team_num = v:GetPropInt(\"m_iTeamNum\")\n        if enemy_only and team_num == localplayer:GetPropInt(\"m_iTeamNum\") then goto continue end"
            }
        },
        {
            "Title": "is_visible",
            "subTitle": "local function is_vi",
            "dLine": {
                "32": "local function is_visible(target, from, to)",
                "70": "if is_visible(player, local_eye_pos, player_eye_pos) then"
            },
            "SLine": {
                "1": "function is_visible(target, from, to)\n    local trace = engine.TraceLine(from, to, MASK_SHOT)\n    return trace.entity == target or trace.fraction > 0.99\nend",
                "2": "function is_visible(target, from, to)\n    local trace = engine.TraceLine(from, to, MASK_SHOT)\n    return trace.entity == target or trace.fraction > 0.99\nend"
            }
        },
        {
            "Title": "onDeath",
            "subTitle": "local function onDea",
            "dLine": {
                "3": "local function onDeath(event)",
                "18": "callbacks.Register(\"FireGameEvent\", \"deathSayLua\", onDeath)"
            },
            "SLine": {
                "1": "function onDeath(event)\n\n    if (event:GetName() == 'player_death' ) then\n\n        local attacker = entities.GetByUserID(event:GetInt(\"attacker\"))\n        local localPlayer = entities.GetLocalPlayer();\n        local victim = entities.GetByUserID(event:GetInt(\"userid\"))\n\n        if localPlayer:GetIndex() == victim:GetIndex() and localPlayer:GetIndex() ~= attacker:GetIndex() then\n            client.ChatSay( attacker:GetName().. \" - \\\"\".. math.random(50, 255).. \".\".. math.random(100, 255).. \".\".. math.random(100, 255).. \".\".. math.random(10, 150).. \"\\\"\")\n        end",
                "2": "callbacks.Register(\"FireGameEvent\", \"deathSayLua\", onDeath)"
            }
        },
        {
            "Title": "onStringCmd",
            "subTitle": "local function onStr",
            "dLine": {
                "4": "local function onStringCmd( stringCmd )",
                "18": "callbacks.Register( \"SendStringCmd\", \"hook\", onStringCmd )"
            },
            "SLine": {
                "1": "function onStringCmd( stringCmd )\n\n    if stringCmd:Get() == \"customthing\" then\n        stringCmd:Set( \"\" ) -- Because the Console thinks it's a blank input, it won't print anything about a Unknown command.\n        local inGame = clientstate.GetClientSignonState()\n\n        if inGame == 6 then\n            print( \"You are in game!\" )\n        else\n            print( \"You are not in game!\" )\n        end",
                "2": "callbacks.Register( \"SendStringCmd\", \"hook\", onStringCmd )"
            }
        },
        {
            "Title": "outcaller",
            "subTitle": "local function outca",
            "dLine": {
                "5": "local function outcaller(event)",
                "29": "callbacks.Register(\"FireGameEvent\", \"playerLogger\", outcaller)"
            },
            "SLine": {
                "1": "function outcaller(event)\n    local players = entities.FindByClass(\"CTFPlayer\")\n    if (event:GetName() == 'localplayer_respawn' ) then\n        for i, player in pairs(players) do\n            if player ~= entities.GetLocalPlayer() then\n                local steamid = client.GetPlayerInfo(player:GetIndex()).SteamID;\n                local name = player:GetName();\n                local priority = playerlist.GetPriority(steamid);\n                if priority == CheatersPriority then\n                    client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is \\x07ff1100cheating!\");\n                    print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is cheating!\");\n                elseif priority == TryhardPriority then\n                    client.ChatPrintf(\"\\x03[LmaoBox] \\x01\\\"\".. name.. \"\\\" Is a \\x07ff8800tryhard!\");\n                    print(\"[Lmaobox] \".. steamid.. \" - \".. name.. \" Is a tryhard!\");\n                elseif priority == Friend",
                "2": "callbacks.Register(\"FireGameEvent\", \"playerLogger\", outcaller)"
            }
        },
        {
            "Title": "preventFalling",
            "subTitle": "local function preve",
            "dLine": {
                "3": "local function preventFalling()",
                "31": "callbacks.Register(\"CreateMove\", preventFalling) -- register the callback to be executed every frame"
            },
            "SLine": {
                "1": "function preventFalling()\n    local player = getPlayer() -- get the player object\n    local position = player:getAbsOrigin() -- get the player's current position\n    local mapSize = getMapSize() -- get the size of the map\n    local move = getMove() -- get the player's current movement inputs\n    \n    local function isOnObstacle(x, y)\n        local worldPos = Vector(x, y, 0) -- create a Vector object with the x and y coordinates and a z value of 0\n        local mapPos = worldToMap(worldPos) -- convert the world position to a map position\n        local navPos = mapToWorld(mapPos) -- convert the map position back to a world position\n        return navPos.z ~= 0 -- return true if the z position of the nav position is not 0, indicating that it is on an obstacle\n      end",
                "2": "callbacks.Register(\"CreateMove\", preventFalling) -- register the callback to be executed every frame"
            }
        },
        {
            "Title": "script",
            "subTitle": "local function scrip",
            "dLine": {
                "31": "local function script()",
                "107": "callbacks.Register( \"Draw\", \"MCT_Script\", script )"
            },
            "SLine": {
                "1": "function script()\n  if RandomToggle:GetValue() == true then\n\n    gui.SetValue(\"Anti Aim - Custom Yaw (Real)\", math.random(-180, 180 ))\n    gui.SetValue(\"Anti Aim - Custom Yaw (Fake)\", math.random(-180, 180 ))\n\n    gui.SetValue(\"Anti Aim - Pitch\", \"Custom\")\n\n    if FakeAngle == RealAngle then \n      RealAngle = somethingElse\n      end",
                "2": "callbacks.Register( \"Draw\", \"MCT_Script\", script )"
            }
        },
        {
            "Title": "toggleCircle",
            "subTitle": "-- |  Function - tog",
            "dLine": {
                "14": "-- |  Function - toggleCircle  |",
                "16": "function toggleCircle()"
            },
            "SLine": {
                "1": "function toggleCircle()\n  -- Toggle circle state\n circle.show = not circle.show\n  -- Draw/Clear the circle depend"
            }
        }
    ]
}